
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064ac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800656c  0800656c  0000756c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006ae0  08006ae0  00007ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006ae8  08006ae8  00007ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006aec  08006aec  00007aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000040  20000000  08006af0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000099c  20000040  08006b30  00008040  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200009dc  08006b30  000089dc  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020014  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006367  00000000  00000000  0002807c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001530  00000000  00000000  0002e3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000159b  00000000  00000000  0002f918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001cd2d  00000000  00000000  00030eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000293d8  00000000  00000000  0004dbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0009c50f  00000000  00000000  00076fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001134c7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000037d4  00000000  00000000  0011350c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0000b96a  00000000  00000000  00116ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000195  00000000  00000000  0012264a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000040 	.word	0x20000040
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006554 	.word	0x08006554

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000044 	.word	0x20000044
 8000104:	08006554 	.word	0x08006554

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4699      	mov	r9, r3
 800045e:	0c03      	lsrs	r3, r0, #16
 8000460:	469c      	mov	ip, r3
 8000462:	0413      	lsls	r3, r2, #16
 8000464:	4647      	mov	r7, r8
 8000466:	0c1b      	lsrs	r3, r3, #16
 8000468:	001d      	movs	r5, r3
 800046a:	000e      	movs	r6, r1
 800046c:	4661      	mov	r1, ip
 800046e:	0404      	lsls	r4, r0, #16
 8000470:	0c24      	lsrs	r4, r4, #16
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	0c10      	lsrs	r0, r2, #16
 8000478:	434b      	muls	r3, r1
 800047a:	4365      	muls	r5, r4
 800047c:	4341      	muls	r1, r0
 800047e:	4360      	muls	r0, r4
 8000480:	0c2c      	lsrs	r4, r5, #16
 8000482:	18c0      	adds	r0, r0, r3
 8000484:	1824      	adds	r4, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	42a3      	cmp	r3, r4
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	@ 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4356      	muls	r6, r2
 800049a:	0c23      	lsrs	r3, r4, #16
 800049c:	042d      	lsls	r5, r5, #16
 800049e:	0c2d      	lsrs	r5, r5, #16
 80004a0:	1989      	adds	r1, r1, r6
 80004a2:	4463      	add	r3, ip
 80004a4:	0424      	lsls	r4, r4, #16
 80004a6:	1960      	adds	r0, r4, r5
 80004a8:	18c9      	adds	r1, r1, r3
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 f8ba 	bl	800064c <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f8b5 	bl	800064c <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	d434      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ea:	469b      	mov	fp, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	465a      	mov	r2, fp
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83b      	bhi.n	8000578 <__udivmoddi4+0xc4>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e079      	b.n	80005fa <__udivmoddi4+0x146>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e076      	b.n	8000600 <__udivmoddi4+0x14c>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e029      	b.n	8000580 <__udivmoddi4+0xcc>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	469b      	mov	fp, r3
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	4652      	mov	r2, sl
 800055e:	40da      	lsrs	r2, r3
 8000560:	4641      	mov	r1, r8
 8000562:	0013      	movs	r3, r2
 8000564:	464a      	mov	r2, r9
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	4642      	mov	r2, r8
 800056c:	431f      	orrs	r7, r3
 800056e:	4653      	mov	r3, sl
 8000570:	4093      	lsls	r3, r2
 8000572:	001e      	movs	r6, r3
 8000574:	42af      	cmp	r7, r5
 8000576:	d9c3      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000578:	2200      	movs	r2, #0
 800057a:	2300      	movs	r3, #0
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4643      	mov	r3, r8
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0d8      	beq.n	8000538 <__udivmoddi4+0x84>
 8000586:	07fb      	lsls	r3, r7, #31
 8000588:	0872      	lsrs	r2, r6, #1
 800058a:	431a      	orrs	r2, r3
 800058c:	4646      	mov	r6, r8
 800058e:	087b      	lsrs	r3, r7, #1
 8000590:	e00e      	b.n	80005b0 <__udivmoddi4+0xfc>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d101      	bne.n	800059a <__udivmoddi4+0xe6>
 8000596:	42a2      	cmp	r2, r4
 8000598:	d80c      	bhi.n	80005b4 <__udivmoddi4+0x100>
 800059a:	1aa4      	subs	r4, r4, r2
 800059c:	419d      	sbcs	r5, r3
 800059e:	2001      	movs	r0, #1
 80005a0:	1924      	adds	r4, r4, r4
 80005a2:	416d      	adcs	r5, r5
 80005a4:	2100      	movs	r1, #0
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1824      	adds	r4, r4, r0
 80005aa:	414d      	adcs	r5, r1
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d006      	beq.n	80005be <__udivmoddi4+0x10a>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d9ee      	bls.n	8000592 <__udivmoddi4+0xde>
 80005b4:	3e01      	subs	r6, #1
 80005b6:	1924      	adds	r4, r4, r4
 80005b8:	416d      	adcs	r5, r5
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d1f8      	bne.n	80005b0 <__udivmoddi4+0xfc>
 80005be:	9800      	ldr	r0, [sp, #0]
 80005c0:	9901      	ldr	r1, [sp, #4]
 80005c2:	465b      	mov	r3, fp
 80005c4:	1900      	adds	r0, r0, r4
 80005c6:	4169      	adcs	r1, r5
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db24      	blt.n	8000616 <__udivmoddi4+0x162>
 80005cc:	002b      	movs	r3, r5
 80005ce:	465a      	mov	r2, fp
 80005d0:	4644      	mov	r4, r8
 80005d2:	40d3      	lsrs	r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	40e2      	lsrs	r2, r4
 80005d8:	001c      	movs	r4, r3
 80005da:	465b      	mov	r3, fp
 80005dc:	0015      	movs	r5, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db2a      	blt.n	8000638 <__udivmoddi4+0x184>
 80005e2:	0026      	movs	r6, r4
 80005e4:	409e      	lsls	r6, r3
 80005e6:	0033      	movs	r3, r6
 80005e8:	0026      	movs	r6, r4
 80005ea:	4647      	mov	r7, r8
 80005ec:	40be      	lsls	r6, r7
 80005ee:	0032      	movs	r2, r6
 80005f0:	1a80      	subs	r0, r0, r2
 80005f2:	4199      	sbcs	r1, r3
 80005f4:	9000      	str	r0, [sp, #0]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	e79e      	b.n	8000538 <__udivmoddi4+0x84>
 80005fa:	42a3      	cmp	r3, r4
 80005fc:	d8bc      	bhi.n	8000578 <__udivmoddi4+0xc4>
 80005fe:	e782      	b.n	8000506 <__udivmoddi4+0x52>
 8000600:	4642      	mov	r2, r8
 8000602:	2320      	movs	r3, #32
 8000604:	2100      	movs	r1, #0
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	2200      	movs	r2, #0
 800060a:	9100      	str	r1, [sp, #0]
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	40da      	lsrs	r2, r3
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	e785      	b.n	8000522 <__udivmoddi4+0x6e>
 8000616:	4642      	mov	r2, r8
 8000618:	2320      	movs	r3, #32
 800061a:	1a9b      	subs	r3, r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	4646      	mov	r6, r8
 8000620:	409a      	lsls	r2, r3
 8000622:	0023      	movs	r3, r4
 8000624:	40f3      	lsrs	r3, r6
 8000626:	4644      	mov	r4, r8
 8000628:	4313      	orrs	r3, r2
 800062a:	002a      	movs	r2, r5
 800062c:	40e2      	lsrs	r2, r4
 800062e:	001c      	movs	r4, r3
 8000630:	465b      	mov	r3, fp
 8000632:	0015      	movs	r5, r2
 8000634:	2b00      	cmp	r3, #0
 8000636:	dad4      	bge.n	80005e2 <__udivmoddi4+0x12e>
 8000638:	4642      	mov	r2, r8
 800063a:	002f      	movs	r7, r5
 800063c:	2320      	movs	r3, #32
 800063e:	0026      	movs	r6, r4
 8000640:	4097      	lsls	r7, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	40de      	lsrs	r6, r3
 8000646:	003b      	movs	r3, r7
 8000648:	4333      	orrs	r3, r6
 800064a:	e7cd      	b.n	80005e8 <__udivmoddi4+0x134>

0800064c <__clzdi2>:
 800064c:	b510      	push	{r4, lr}
 800064e:	2900      	cmp	r1, #0
 8000650:	d103      	bne.n	800065a <__clzdi2+0xe>
 8000652:	f000 f807 	bl	8000664 <__clzsi2>
 8000656:	3020      	adds	r0, #32
 8000658:	e002      	b.n	8000660 <__clzdi2+0x14>
 800065a:	0008      	movs	r0, r1
 800065c:	f000 f802 	bl	8000664 <__clzsi2>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)

08000664 <__clzsi2>:
 8000664:	211c      	movs	r1, #28
 8000666:	2301      	movs	r3, #1
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0xe>
 800066e:	0c00      	lsrs	r0, r0, #16
 8000670:	3910      	subs	r1, #16
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	4298      	cmp	r0, r3
 8000676:	d301      	bcc.n	800067c <__clzsi2+0x18>
 8000678:	0a00      	lsrs	r0, r0, #8
 800067a:	3908      	subs	r1, #8
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0x22>
 8000682:	0900      	lsrs	r0, r0, #4
 8000684:	3904      	subs	r1, #4
 8000686:	a202      	add	r2, pc, #8	@ (adr r2, 8000690 <__clzsi2+0x2c>)
 8000688:	5c10      	ldrb	r0, [r2, r0]
 800068a:	1840      	adds	r0, r0, r1
 800068c:	4770      	bx	lr
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	02020304 	.word	0x02020304
 8000694:	01010101 	.word	0x01010101
	...

080006a0 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 80006a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 80006a2:	f000 fd9b 	bl	80011dc <SystemApp_Init>
  SubghzApp_Init();
 80006a6:	f000 f959 	bl	800095c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 80006aa:	bd10      	pop	{r4, pc}

080006ac <MX_SubGHz_Phy_Process>:
void MX_SubGHz_Phy_Process(void)
{
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80006ac:	2001      	movs	r0, #1
{
 80006ae:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80006b0:	4240      	negs	r0, r0
 80006b2:	f005 fbdb 	bl	8005e6c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 80006b6:	bd10      	pop	{r4, pc}

080006b8 <OnledEvent>:
}



static void OnledEvent(void *context)
{
 80006b8:	b510      	push	{r4, lr}
  LED_Toggle(LED_RED1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f001 f890 	bl	80017e0 <BSP_LED_Toggle>
  LED_Toggle(LED_RED2);
 80006c0:	2003      	movs	r0, #3
 80006c2:	f001 f88d 	bl	80017e0 <BSP_LED_Toggle>
  UTIL_TIMER_Start(&timerLed);
 80006c6:	4802      	ldr	r0, [pc, #8]	@ (80006d0 <OnledEvent+0x18>)
 80006c8:	f005 fd2c 	bl	8006124 <UTIL_TIMER_Start>
}
 80006cc:	bd10      	pop	{r4, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	2000005c 	.word	0x2000005c

080006d4 <Master>:
static void Master(void) {
 80006d4:	b570      	push	{r4, r5, r6, lr}
    Radio.Sleep();
 80006d6:	4d3b      	ldr	r5, [pc, #236]	@ (80007c4 <Master+0xf0>)
 80006d8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80006da:	4798      	blx	r3
    switch (State)
 80006dc:	4c3a      	ldr	r4, [pc, #232]	@ (80007c8 <Master+0xf4>)
 80006de:	7e20      	ldrb	r0, [r4, #24]
 80006e0:	2804      	cmp	r0, #4
 80006e2:	d80f      	bhi.n	8000704 <Master+0x30>
 80006e4:	f7ff fd18 	bl	8000118 <__gnu_thumb1_case_uqi>
 80006e8:	034d4d0f 	.word	0x034d4d0f
 80006ec:	5e          	.byte	0x5e
 80006ed:	00          	.byte	0x00
            APP_LOG(TS_ON, VLEVEL_L, "Master: waiting for ACK...\n\r");
 80006ee:	2201      	movs	r2, #1
 80006f0:	2100      	movs	r1, #0
 80006f2:	0010      	movs	r0, r2
 80006f4:	4b35      	ldr	r3, [pc, #212]	@ (80007cc <Master+0xf8>)
 80006f6:	f005 fa5b 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 80006fa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80006fc:	4834      	ldr	r0, [pc, #208]	@ (80007d0 <Master+0xfc>)
 80006fe:	4798      	blx	r3
            gpsSent = true;
 8000700:	2301      	movs	r3, #1
 8000702:	7723      	strb	r3, [r4, #28]
}
 8000704:	bd70      	pop	{r4, r5, r6, pc}
            if (gpsSent && RxBufferSize > 0)
 8000706:	7f23      	ldrb	r3, [r4, #28]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d033      	beq.n	8000774 <Master+0xa0>
 800070c:	8b63      	ldrh	r3, [r4, #26]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d030      	beq.n	8000774 <Master+0xa0>
                if (strncmp((const char *)BufferRx, ACK, sizeof(ACK) - 1) == 0)
 8000712:	2203      	movs	r2, #3
 8000714:	492f      	ldr	r1, [pc, #188]	@ (80007d4 <Master+0x100>)
 8000716:	4830      	ldr	r0, [pc, #192]	@ (80007d8 <Master+0x104>)
 8000718:	f005 fedc 	bl	80064d4 <strncmp>
                    APP_LOG(TS_ON, VLEVEL_L, "Master: Unexpected message.\n\r");
 800071c:	4b2f      	ldr	r3, [pc, #188]	@ (80007dc <Master+0x108>)
                if (strncmp((const char *)BufferRx, ACK, sizeof(ACK) - 1) == 0)
 800071e:	2800      	cmp	r0, #0
 8000720:	d109      	bne.n	8000736 <Master+0x62>
                    UTIL_TIMER_Stop(&timerLed);
 8000722:	0020      	movs	r0, r4
 8000724:	f005 fcaa 	bl	800607c <UTIL_TIMER_Stop>
                    LED_Off(LED_RED2);
 8000728:	2003      	movs	r0, #3
 800072a:	f001 f849 	bl	80017c0 <BSP_LED_Off>
                    LED_Toggle(LED_RED1);
 800072e:	2001      	movs	r0, #1
 8000730:	f001 f856 	bl	80017e0 <BSP_LED_Toggle>
                    APP_LOG(TS_ON, VLEVEL_L, "Master: ACK received.\n\r");
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <Master+0x10c>)
                    APP_LOG(TS_ON, VLEVEL_L, "Master: Unexpected message.\n\r");
 8000736:	2201      	movs	r2, #1
                gpsSent = false;
 8000738:	2600      	movs	r6, #0
                    APP_LOG(TS_ON, VLEVEL_L, "Master: Unexpected message.\n\r");
 800073a:	2100      	movs	r1, #0
 800073c:	0010      	movs	r0, r2
 800073e:	f005 fa37 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
                HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 8000742:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
                gpsSent = false;
 8000744:	7726      	strb	r6, [r4, #28]
                HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 8000746:	4798      	blx	r3
 8000748:	6a23      	ldr	r3, [r4, #32]
 800074a:	3332      	adds	r3, #50	@ 0x32
 800074c:	1818      	adds	r0, r3, r0
 800074e:	f000 fdcf 	bl	80012f0 <HAL_Delay>
                memcpy(BufferTx, GPS, sizeof(GPS) - 1);
 8000752:	4c24      	ldr	r4, [pc, #144]	@ (80007e4 <Master+0x110>)
 8000754:	2203      	movs	r2, #3
 8000756:	0020      	movs	r0, r4
 8000758:	4923      	ldr	r1, [pc, #140]	@ (80007e8 <Master+0x114>)
 800075a:	f005 fef1 	bl	8006540 <memcpy>
                APP_LOG(TS_ON, VLEVEL_L, "Master Tx start: sending GPS\n\r");
 800075e:	4b23      	ldr	r3, [pc, #140]	@ (80007ec <Master+0x118>)
 8000760:	2201      	movs	r2, #1
 8000762:	0031      	movs	r1, r6
 8000764:	0010      	movs	r0, r2
 8000766:	f005 fa23 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800076a:	2140      	movs	r1, #64	@ 0x40
 800076c:	0020      	movs	r0, r4
 800076e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8000770:	4798      	blx	r3
}
 8000772:	e7c7      	b.n	8000704 <Master+0x30>
                APP_LOG(TS_ON, VLEVEL_L, "Master: Nothing to process in RX\n\r");
 8000774:	2201      	movs	r2, #1
 8000776:	2100      	movs	r1, #0
 8000778:	0010      	movs	r0, r2
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <Master+0x11c>)
 800077c:	f005 fa18 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
 8000780:	e7c0      	b.n	8000704 <Master+0x30>
            gpsSent = false;
 8000782:	2600      	movs	r6, #0
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 8000784:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
            gpsSent = false;
 8000786:	7726      	strb	r6, [r4, #28]
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 8000788:	4798      	blx	r3
 800078a:	6a23      	ldr	r3, [r4, #32]
 800078c:	3332      	adds	r3, #50	@ 0x32
 800078e:	1818      	adds	r0, r3, r0
 8000790:	f000 fdae 	bl	80012f0 <HAL_Delay>
            memcpy(BufferTx, GPS, sizeof(GPS) - 1);
 8000794:	4c13      	ldr	r4, [pc, #76]	@ (80007e4 <Master+0x110>)
 8000796:	2203      	movs	r2, #3
 8000798:	0020      	movs	r0, r4
 800079a:	4913      	ldr	r1, [pc, #76]	@ (80007e8 <Master+0x114>)
 800079c:	f005 fed0 	bl	8006540 <memcpy>
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx retry: sending GPS\n\r");
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <Master+0x120>)
 80007a2:	e7dd      	b.n	8000760 <Master+0x8c>
            APP_LOG(TS_ON, VLEVEL_L, "Master: TX timeout, retry\n\r");
 80007a4:	2201      	movs	r2, #1
 80007a6:	2100      	movs	r1, #0
 80007a8:	0010      	movs	r0, r2
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <Master+0x124>)
 80007ac:	f005 fa00 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
            gpsSent = false;
 80007b0:	2300      	movs	r3, #0
 80007b2:	7723      	strb	r3, [r4, #28]
            memcpy(BufferTx, GPS, sizeof(GPS) - 1);
 80007b4:	4c0b      	ldr	r4, [pc, #44]	@ (80007e4 <Master+0x110>)
 80007b6:	2203      	movs	r2, #3
 80007b8:	0020      	movs	r0, r4
 80007ba:	490b      	ldr	r1, [pc, #44]	@ (80007e8 <Master+0x114>)
 80007bc:	f005 fec0 	bl	8006540 <memcpy>
 80007c0:	e7d3      	b.n	800076a <Master+0x96>
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	0800674c 	.word	0x0800674c
 80007c8:	2000005c 	.word	0x2000005c
 80007cc:	080068c6 	.word	0x080068c6
 80007d0:	00000bb8 	.word	0x00000bb8
 80007d4:	080067f2 	.word	0x080067f2
 80007d8:	2000019f 	.word	0x2000019f
 80007dc:	080068fb 	.word	0x080068fb
 80007e0:	080068e3 	.word	0x080068e3
 80007e4:	200000a0 	.word	0x200000a0
 80007e8:	080067c8 	.word	0x080067c8
 80007ec:	08006919 	.word	0x08006919
 80007f0:	08006938 	.word	0x08006938
 80007f4:	0800695b 	.word	0x0800695b
 80007f8:	0800697a 	.word	0x0800697a

080007fc <OnRxDone>:
{
 80007fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fe:	0016      	movs	r6, r2
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 8000800:	2201      	movs	r2, #1
{
 8000802:	b085      	sub	sp, #20
 8000804:	001f      	movs	r7, r3
 8000806:	000c      	movs	r4, r1
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 8000808:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <OnRxDone+0xa4>)
 800080a:	2100      	movs	r1, #0
{
 800080c:	9003      	str	r0, [sp, #12]
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 800080e:	0010      	movs	r0, r2
 8000810:	f005 f9ce 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 8000814:	2201      	movs	r2, #1
 8000816:	2100      	movs	r1, #0
 8000818:	0010      	movs	r0, r2
 800081a:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <OnRxDone+0xa8>)
 800081c:	9701      	str	r7, [sp, #4]
 800081e:	9600      	str	r6, [sp, #0]
 8000820:	f005 f9c6 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  State = RX;
 8000824:	2100      	movs	r1, #0
  SnrValue = LoraSnr_FskCfo;
 8000826:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <OnRxDone+0xac>)
 8000828:	4d20      	ldr	r5, [pc, #128]	@ (80008ac <OnRxDone+0xb0>)
 800082a:	77df      	strb	r7, [r3, #31]
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800082c:	4f20      	ldr	r7, [pc, #128]	@ (80008b0 <OnRxDone+0xb4>)
 800082e:	22ff      	movs	r2, #255	@ 0xff
 8000830:	0038      	movs	r0, r7
  State = RX;
 8000832:	7629      	strb	r1, [r5, #24]
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8000834:	f005 fe46 	bl	80064c4 <memset>
  RxBufferSize = size;
 8000838:	836c      	strh	r4, [r5, #26]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800083a:	2cff      	cmp	r4, #255	@ 0xff
 800083c:	d804      	bhi.n	8000848 <OnRxDone+0x4c>
    memcpy(BufferRx, payload, RxBufferSize);
 800083e:	0022      	movs	r2, r4
 8000840:	0038      	movs	r0, r7
 8000842:	9903      	ldr	r1, [sp, #12]
 8000844:	f005 fe7c 	bl	8006540 <memcpy>
  RssiValue = rssi;
 8000848:	3506      	adds	r5, #6
 800084a:	77ee      	strb	r6, [r5, #31]
  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 800084c:	2201      	movs	r2, #1
 800084e:	9400      	str	r4, [sp, #0]
 8000850:	2100      	movs	r1, #0
 8000852:	2003      	movs	r0, #3
 8000854:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <OnRxDone+0xb8>)
 8000856:	f005 f9ab 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 800085a:	2400      	movs	r4, #0
    if (i % 16 == 15)
 800085c:	250f      	movs	r5, #15
    APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 800085e:	5d3a      	ldrb	r2, [r7, r4]
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <OnRxDone+0xbc>)
 8000862:	9200      	str	r2, [sp, #0]
 8000864:	2200      	movs	r2, #0
 8000866:	2003      	movs	r0, #3
 8000868:	0011      	movs	r1, r2
 800086a:	f005 f9a1 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
    if (i % 16 == 15)
 800086e:	0023      	movs	r3, r4
 8000870:	402b      	ands	r3, r5
 8000872:	2b0f      	cmp	r3, #15
 8000874:	d105      	bne.n	8000882 <OnRxDone+0x86>
      APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 8000876:	2200      	movs	r2, #0
 8000878:	2003      	movs	r0, #3
 800087a:	0011      	movs	r1, r2
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <OnRxDone+0xc0>)
 800087e:	f005 f997 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 8000882:	3401      	adds	r4, #1
 8000884:	2c40      	cmp	r4, #64	@ 0x40
 8000886:	d1ea      	bne.n	800085e <OnRxDone+0x62>
  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 8000888:	2200      	movs	r2, #0
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <OnRxDone+0xc0>)
 800088c:	0011      	movs	r1, r2
 800088e:	2003      	movs	r0, #3
 8000890:	f005 f98e 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Master), CFG_SEQ_Prio_0);
 8000894:	2100      	movs	r1, #0
 8000896:	2001      	movs	r0, #1
 8000898:	f005 fab4 	bl	8005e04 <UTIL_SEQ_SetTask>
}
 800089c:	b005      	add	sp, #20
 800089e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a0:	08006996 	.word	0x08006996
 80008a4:	080069a1 	.word	0x080069a1
 80008a8:	20000061 	.word	0x20000061
 80008ac:	2000005c 	.word	0x2000005c
 80008b0:	2000019f 	.word	0x2000019f
 80008b4:	080069c3 	.word	0x080069c3
 80008b8:	080069d7 	.word	0x080069d7
 80008bc:	080069d4 	.word	0x080069d4

080008c0 <OnRxError.part.0>:
static void OnRxError(void)
 80008c0:	b510      	push	{r4, lr}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Master), CFG_SEQ_Prio_0);
 80008c2:	2100      	movs	r1, #0
 80008c4:	2001      	movs	r0, #1
 80008c6:	f005 fa9d 	bl	8005e04 <UTIL_SEQ_SetTask>
}
 80008ca:	bd10      	pop	{r4, pc}

080008cc <OnRxError>:
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 80008cc:	2201      	movs	r2, #1
{
 80008ce:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 80008d0:	2100      	movs	r1, #0
 80008d2:	0010      	movs	r0, r2
 80008d4:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <OnRxError+0x1c>)
 80008d6:	f005 f96b 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  State = RX_ERROR;
 80008da:	2202      	movs	r2, #2
 80008dc:	4b03      	ldr	r3, [pc, #12]	@ (80008ec <OnRxError+0x20>)
 80008de:	761a      	strb	r2, [r3, #24]
  if(MASTER==1){
 80008e0:	f7ff ffee 	bl	80008c0 <OnRxError.part.0>
}
 80008e4:	bd10      	pop	{r4, pc}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	080069dc 	.word	0x080069dc
 80008ec:	2000005c 	.word	0x2000005c

080008f0 <OnRxTimeout>:
  APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 80008f0:	2201      	movs	r2, #1
{
 80008f2:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 80008f4:	2100      	movs	r1, #0
 80008f6:	0010      	movs	r0, r2
 80008f8:	4b04      	ldr	r3, [pc, #16]	@ (800090c <OnRxTimeout+0x1c>)
 80008fa:	f005 f959 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  State = RX_TIMEOUT;
 80008fe:	2201      	movs	r2, #1
 8000900:	4b03      	ldr	r3, [pc, #12]	@ (8000910 <OnRxTimeout+0x20>)
 8000902:	761a      	strb	r2, [r3, #24]
  if(MASTER==1){
 8000904:	f7ff ffdc 	bl	80008c0 <OnRxError.part.0>
}
 8000908:	bd10      	pop	{r4, pc}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	080069e8 	.word	0x080069e8
 8000910:	2000005c 	.word	0x2000005c

08000914 <OnTxTimeout>:
  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 8000914:	2201      	movs	r2, #1
{
 8000916:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 8000918:	2100      	movs	r1, #0
 800091a:	0010      	movs	r0, r2
 800091c:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <OnTxTimeout+0x1c>)
 800091e:	f005 f947 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  State = TX_TIMEOUT;
 8000922:	2204      	movs	r2, #4
 8000924:	4b03      	ldr	r3, [pc, #12]	@ (8000934 <OnTxTimeout+0x20>)
 8000926:	761a      	strb	r2, [r3, #24]
  if(MASTER==1){
 8000928:	f7ff ffca 	bl	80008c0 <OnRxError.part.0>
}
 800092c:	bd10      	pop	{r4, pc}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	080069f6 	.word	0x080069f6
 8000934:	2000005c 	.word	0x2000005c

08000938 <OnTxDone>:
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 8000938:	2201      	movs	r2, #1
{
 800093a:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 800093c:	2100      	movs	r1, #0
 800093e:	0010      	movs	r0, r2
 8000940:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <OnTxDone+0x1c>)
 8000942:	f005 f935 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  State = TX;
 8000946:	2203      	movs	r2, #3
 8000948:	4b03      	ldr	r3, [pc, #12]	@ (8000958 <OnTxDone+0x20>)
 800094a:	761a      	strb	r2, [r3, #24]
  if(MASTER==1){
 800094c:	f7ff ffb8 	bl	80008c0 <OnRxError.part.0>
}
 8000950:	bd10      	pop	{r4, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	08006a04 	.word	0x08006a04
 8000958:	2000005c 	.word	0x2000005c

0800095c <SubghzApp_Init>:
  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 800095c:	2200      	movs	r2, #0
{
 800095e:	b5f0      	push	{r4, r5, r6, r7, lr}
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION= V%X.%X.%X\r\n",
 8000960:	2400      	movs	r4, #0
 8000962:	2501      	movs	r5, #1
{
 8000964:	b08d      	sub	sp, #52	@ 0x34
  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 8000966:	0011      	movs	r1, r2
 8000968:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa4 <SubghzApp_Init+0x148>)
 800096a:	2002      	movs	r0, #2
 800096c:	f005 f920 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION= V%X.%X.%X\r\n",
 8000970:	0022      	movs	r2, r4
 8000972:	0021      	movs	r1, r4
 8000974:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa8 <SubghzApp_Init+0x14c>)
 8000976:	9402      	str	r4, [sp, #8]
 8000978:	9501      	str	r5, [sp, #4]
 800097a:	9500      	str	r5, [sp, #0]
 800097c:	2002      	movs	r0, #2
 800097e:	f005 f917 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&timerLed, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 8000982:	4e4a      	ldr	r6, [pc, #296]	@ (8000aac <SubghzApp_Init+0x150>)
 8000984:	0022      	movs	r2, r4
 8000986:	4b4a      	ldr	r3, [pc, #296]	@ (8000ab0 <SubghzApp_Init+0x154>)
 8000988:	4269      	negs	r1, r5
 800098a:	0030      	movs	r0, r6
 800098c:	9400      	str	r4, [sp, #0]
 800098e:	f005 fb17 	bl	8005fc0 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&timerLed, LED_PERIOD_MS);
 8000992:	21c8      	movs	r1, #200	@ 0xc8
 8000994:	0030      	movs	r0, r6
 8000996:	f005 fc03 	bl	80061a0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&timerLed);
 800099a:	0030      	movs	r0, r6
 800099c:	f005 fbc2 	bl	8006124 <UTIL_TIMER_Start>
  Radio.Init(&RadioEvents);
 80009a0:	0030      	movs	r0, r6
  RadioEvents.TxDone = OnTxDone;
 80009a2:	4b44      	ldr	r3, [pc, #272]	@ (8000ab4 <SubghzApp_Init+0x158>)
  Radio.Init(&RadioEvents);
 80009a4:	3028      	adds	r0, #40	@ 0x28
  RadioEvents.TxDone = OnTxDone;
 80009a6:	62b3      	str	r3, [r6, #40]	@ 0x28
  RadioEvents.RxDone = OnRxDone;
 80009a8:	4b43      	ldr	r3, [pc, #268]	@ (8000ab8 <SubghzApp_Init+0x15c>)
 80009aa:	6333      	str	r3, [r6, #48]	@ 0x30
  RadioEvents.TxTimeout = OnTxTimeout;
 80009ac:	4b43      	ldr	r3, [pc, #268]	@ (8000abc <SubghzApp_Init+0x160>)
 80009ae:	62f3      	str	r3, [r6, #44]	@ 0x2c
  RadioEvents.RxTimeout = OnRxTimeout;
 80009b0:	4b43      	ldr	r3, [pc, #268]	@ (8000ac0 <SubghzApp_Init+0x164>)
 80009b2:	6373      	str	r3, [r6, #52]	@ 0x34
  RadioEvents.RxError = OnRxError;
 80009b4:	4b43      	ldr	r3, [pc, #268]	@ (8000ac4 <SubghzApp_Init+0x168>)
 80009b6:	63b3      	str	r3, [r6, #56]	@ 0x38
  Radio.Init(&RadioEvents);
 80009b8:	4b43      	ldr	r3, [pc, #268]	@ (8000ac8 <SubghzApp_Init+0x16c>)
 80009ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4798      	blx	r3
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 80009c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 80009c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 80009c8:	0d80      	lsrs	r0, r0, #22
 80009ca:	6230      	str	r0, [r6, #32]
  Radio.SetChannel(RF_FREQUENCY);
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	483f      	ldr	r0, [pc, #252]	@ (8000acc <SubghzApp_Init+0x170>)
 80009d0:	4798      	blx	r3
  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 80009d2:	0022      	movs	r2, r4
 80009d4:	0021      	movs	r1, r4
 80009d6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ad0 <SubghzApp_Init+0x174>)
 80009d8:	2002      	movs	r0, #2
 80009da:	f005 f8e9 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 80009de:	0022      	movs	r2, r4
 80009e0:	0021      	movs	r1, r4
 80009e2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ad4 <SubghzApp_Init+0x178>)
 80009e4:	2002      	movs	r0, #2
 80009e6:	f005 f8e3 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 80009ea:	227d      	movs	r2, #125	@ 0x7d
 80009ec:	0021      	movs	r1, r4
 80009ee:	9200      	str	r2, [sp, #0]
 80009f0:	4b39      	ldr	r3, [pc, #228]	@ (8000ad8 <SubghzApp_Init+0x17c>)
 80009f2:	0022      	movs	r2, r4
 80009f4:	2002      	movs	r0, #2
 80009f6:	f005 f8db 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 80009fa:	2207      	movs	r2, #7
 80009fc:	0021      	movs	r1, r4
 80009fe:	0017      	movs	r7, r2
 8000a00:	9200      	str	r2, [sp, #0]
 8000a02:	4b36      	ldr	r3, [pc, #216]	@ (8000adc <SubghzApp_Init+0x180>)
 8000a04:	0022      	movs	r2, r4
 8000a06:	2002      	movs	r0, #2
 8000a08:	f005 f8d2 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8000a0c:	4b34      	ldr	r3, [pc, #208]	@ (8000ae0 <SubghzApp_Init+0x184>)
 8000a0e:	0028      	movs	r0, r5
 8000a10:	9308      	str	r3, [sp, #32]
 8000a12:	2308      	movs	r3, #8
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000a18:	9700      	str	r7, [sp, #0]
 8000a1a:	69da      	ldr	r2, [r3, #28]
 8000a1c:	210e      	movs	r1, #14
 8000a1e:	0017      	movs	r7, r2
 8000a20:	0023      	movs	r3, r4
 8000a22:	0022      	movs	r2, r4
 8000a24:	9407      	str	r4, [sp, #28]
 8000a26:	9406      	str	r4, [sp, #24]
 8000a28:	9405      	str	r4, [sp, #20]
 8000a2a:	9504      	str	r5, [sp, #16]
 8000a2c:	9403      	str	r4, [sp, #12]
 8000a2e:	9501      	str	r5, [sp, #4]
 8000a30:	47b8      	blx	r7
  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8000a32:	2305      	movs	r3, #5
 8000a34:	9302      	str	r3, [sp, #8]
 8000a36:	3303      	adds	r3, #3
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	0021      	movs	r1, r4
 8000a42:	001f      	movs	r7, r3
 8000a44:	0028      	movs	r0, r5
 8000a46:	002b      	movs	r3, r5
 8000a48:	9509      	str	r5, [sp, #36]	@ 0x24
 8000a4a:	9408      	str	r4, [sp, #32]
 8000a4c:	9407      	str	r4, [sp, #28]
 8000a4e:	9406      	str	r4, [sp, #24]
 8000a50:	9505      	str	r5, [sp, #20]
 8000a52:	9404      	str	r4, [sp, #16]
 8000a54:	9403      	str	r4, [sp, #12]
 8000a56:	9400      	str	r4, [sp, #0]
 8000a58:	47b8      	blx	r7
  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8000a5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000a5c:	21ff      	movs	r1, #255	@ 0xff
 8000a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a60:	0028      	movs	r0, r5
 8000a62:	4798      	blx	r3
  LED_Init(LED_RED1);
 8000a64:	0028      	movs	r0, r5
 8000a66:	f000 fe69 	bl	800173c <BSP_LED_Init>
  LED_Init(LED_RED2);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f000 fe66 	bl	800173c <BSP_LED_Init>
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 8000a70:	0021      	movs	r1, r4
 8000a72:	22ff      	movs	r2, #255	@ 0xff
 8000a74:	481b      	ldr	r0, [pc, #108]	@ (8000ae4 <SubghzApp_Init+0x188>)
 8000a76:	f005 fd25 	bl	80064c4 <memset>
  APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 8000a7a:	6a32      	ldr	r2, [r6, #32]
 8000a7c:	0021      	movs	r1, r4
 8000a7e:	9200      	str	r2, [sp, #0]
 8000a80:	0028      	movs	r0, r5
 8000a82:	002a      	movs	r2, r5
 8000a84:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <SubghzApp_Init+0x18c>)
 8000a86:	f005 f893 	bl	8005bb0 <UTIL_ADV_TRACE_COND_FSend>
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 8000a8a:	6a30      	ldr	r0, [r6, #32]
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <SubghzApp_Init+0x184>)
 8000a8e:	18c0      	adds	r0, r0, r3
 8000a90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a94:	4798      	blx	r3
	  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Master), UTIL_SEQ_RFU, Master);
 8000a96:	0021      	movs	r1, r4
 8000a98:	0028      	movs	r0, r5
 8000a9a:	4a14      	ldr	r2, [pc, #80]	@ (8000aec <SubghzApp_Init+0x190>)
 8000a9c:	f005 fa4c 	bl	8005f38 <UTIL_SEQ_RegTask>
}
 8000aa0:	b00d      	add	sp, #52	@ 0x34
 8000aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa4:	08006a0f 	.word	0x08006a0f
 8000aa8:	08006a1d 	.word	0x08006a1d
 8000aac:	2000005c 	.word	0x2000005c
 8000ab0:	080006b9 	.word	0x080006b9
 8000ab4:	08000939 	.word	0x08000939
 8000ab8:	080007fd 	.word	0x080007fd
 8000abc:	08000915 	.word	0x08000915
 8000ac0:	080008f1 	.word	0x080008f1
 8000ac4:	080008cd 	.word	0x080008cd
 8000ac8:	0800674c 	.word	0x0800674c
 8000acc:	33bca100 	.word	0x33bca100
 8000ad0:	08006a36 	.word	0x08006a36
 8000ad4:	08006a48 	.word	0x08006a48
 8000ad8:	08006a5a 	.word	0x08006a5a
 8000adc:	08006a6b 	.word	0x08006a6b
 8000ae0:	00000bb8 	.word	0x00000bb8
 8000ae4:	200000a0 	.word	0x200000a0
 8000ae8:	08006a78 	.word	0x08006a78
 8000aec:	080006d5 	.word	0x080006d5

08000af0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000af0:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af2:	2101      	movs	r1, #1
 8000af4:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <MX_DMA_Init+0x28>)

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000af6:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000afa:	430a      	orrs	r2, r1
 8000afc:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	400b      	ands	r3, r1
 8000b04:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000b06:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b08:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000b0a:	f001 f8c9 	bl	8001ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000b0e:	200b      	movs	r0, #11
 8000b10:	f001 f8f0 	bl	8001cf4 <HAL_NVIC_EnableIRQ>

}
 8000b14:	bd07      	pop	{r0, r1, r2, pc}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	40021000 	.word	0x40021000

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b510      	push	{r4, lr}
 8000b1e:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b20:	222c      	movs	r2, #44	@ 0x2c
 8000b22:	2100      	movs	r1, #0
 8000b24:	a807      	add	r0, sp, #28
 8000b26:	f005 fccd 	bl	80064c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2a:	2214      	movs	r2, #20
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	a801      	add	r0, sp, #4
 8000b30:	f005 fcc8 	bl	80064c4 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8000b34:	2302      	movs	r3, #2
 8000b36:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8000b38:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8000b3a:	2380      	movs	r3, #128	@ 0x80
 8000b3c:	031b      	lsls	r3, r3, #12
 8000b3e:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8000b40:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000b42:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b44:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8000b46:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000b4a:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b4c:	940a      	str	r4, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8000b4e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f001 fc76 	bl	8002440 <HAL_RCC_OscConfig>
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <SystemClock_Config+0x3e>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ba4 <SystemClock_Config+0x88>)
 8000b60:	055b      	lsls	r3, r3, #21
 8000b62:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8000b64:	430b      	orrs	r3, r1
 8000b66:	6393      	str	r3, [r2, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b68:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba8 <SystemClock_Config+0x8c>)
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <SystemClock_Config+0x90>)
 8000b6c:	6811      	ldr	r1, [r2, #0]
 8000b6e:	4019      	ands	r1, r3
 8000b70:	2380      	movs	r3, #128	@ 0x80
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	430b      	orrs	r3, r1
 8000b76:	6013      	str	r3, [r2, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8000b78:	6851      	ldr	r1, [r2, #4]
 8000b7a:	000b      	movs	r3, r1
 8000b7c:	4023      	ands	r3, r4
 8000b7e:	4221      	tst	r1, r4
 8000b80:	d1fa      	bne.n	8000b78 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000b82:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b84:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000b86:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b88:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8a:	3a0c      	subs	r2, #12
 8000b8c:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b90:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b92:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b94:	f001 fede 	bl	8002954 <HAL_RCC_ClockConfig>
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x84>
 8000b9c:	b672      	cpsid	i
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <SystemClock_Config+0x82>
}
 8000ba0:	b014      	add	sp, #80	@ 0x50
 8000ba2:	bd10      	pop	{r4, pc}
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40007000 	.word	0x40007000
 8000bac:	ffffe7ff 	.word	0xffffe7ff

08000bb0 <main>:
{
 8000bb0:	b510      	push	{r4, lr}
  HAL_Init();
 8000bb2:	f001 f83d 	bl	8001c30 <HAL_Init>
  SystemClock_Config();
 8000bb6:	f7ff ffb1 	bl	8000b1c <SystemClock_Config>
  MX_SubGHz_Phy_Init();
 8000bba:	f7ff fd71 	bl	80006a0 <MX_SubGHz_Phy_Init>
    MX_SubGHz_Phy_Process();
 8000bbe:	f7ff fd75 	bl	80006ac <MX_SubGHz_Phy_Process>
  while (1)
 8000bc2:	e7fc      	b.n	8000bbe <main+0xe>

08000bc4 <Error_Handler>:
 8000bc4:	b672      	cpsid	i
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <Error_Handler+0x2>

08000bc8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000bc8:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8000bca:	2500      	movs	r5, #0
{
 8000bcc:	b091      	sub	sp, #68	@ 0x44
  RTC_TimeTypeDef sTime = {0};
 8000bce:	2214      	movs	r2, #20
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	a801      	add	r0, sp, #4
 8000bd4:	f005 fc76 	bl	80064c4 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8000bd8:	2228      	movs	r2, #40	@ 0x28
 8000bda:	0029      	movs	r1, r5
 8000bdc:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 8000bde:	9500      	str	r5, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000be0:	f005 fc70 	bl	80064c4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000be4:	4c24      	ldr	r4, [pc, #144]	@ (8000c78 <MX_RTC_Init+0xb0>)
 8000be6:	4b25      	ldr	r3, [pc, #148]	@ (8000c7c <MX_RTC_Init+0xb4>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000be8:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 8000bea:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000bec:	231f      	movs	r3, #31
 8000bee:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8000bf0:	4b23      	ldr	r3, [pc, #140]	@ (8000c80 <MX_RTC_Init+0xb8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bf2:	6065      	str	r5, [r4, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8000bf4:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bf6:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000bf8:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bfa:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bfc:	61e5      	str	r5, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bfe:	f002 f953 	bl	8002ea8 <HAL_RTC_Init>
 8000c02:	42a8      	cmp	r0, r5
 8000c04:	d001      	beq.n	8000c0a <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8000c06:	f7ff ffdd 	bl	8000bc4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000c0a:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	0020      	movs	r0, r4
 8000c10:	a901      	add	r1, sp, #4
  sTime.Hours = 0;
 8000c12:	809d      	strh	r5, [r3, #4]
  sTime.Seconds = 0;
 8000c14:	719d      	strb	r5, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c16:	9504      	str	r5, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c18:	9505      	str	r5, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000c1a:	f002 f99f 	bl	8002f5c <HAL_RTC_SetTime>
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	d001      	beq.n	8000c26 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000c22:	f7ff ffcf 	bl	8000bc4 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_RTC_Init+0xbc>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4669      	mov	r1, sp
 8000c2c:	0020      	movs	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c2e:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000c30:	f002 f9fa 	bl	8003028 <HAL_RTC_SetDate>
 8000c34:	2800      	cmp	r0, #0
 8000c36:	d001      	beq.n	8000c3c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000c38:	f7ff ffc4 	bl	8000bc4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	466b      	mov	r3, sp
 8000c40:	831a      	strh	r2, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 8000c42:	769a      	strb	r2, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8000c44:	23a0      	movs	r3, #160	@ 0xa0
 8000c46:	051b      	lsls	r3, r3, #20
 8000c48:	930c      	str	r3, [sp, #48]	@ 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 8000c4a:	2319      	movs	r3, #25
 8000c4c:	211e      	movs	r1, #30
 8000c4e:	446b      	add	r3, sp
 8000c50:	77d9      	strb	r1, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c52:	2380      	movs	r3, #128	@ 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000c54:	0020      	movs	r0, r4
  sAlarm.Alarm = RTC_ALARM_A;
 8000c56:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000c58:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 8000c5a:	9207      	str	r2, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c5c:	9209      	str	r2, [sp, #36]	@ 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c5e:	920a      	str	r2, [sp, #40]	@ 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c60:	920b      	str	r2, [sp, #44]	@ 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c62:	920d      	str	r2, [sp, #52]	@ 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 8000c64:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000c66:	f002 fa31 	bl	80030cc <HAL_RTC_SetAlarm_IT>
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8000c6e:	f7ff ffa9 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c72:	b011      	add	sp, #68	@ 0x44
 8000c74:	bd30      	pop	{r4, r5, pc}
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	200002a0 	.word	0x200002a0
 8000c7c:	40002800 	.word	0x40002800
 8000c80:	000003ff 	.word	0x000003ff
 8000c84:	00010101 	.word	0x00010101

08000c88 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	0004      	movs	r4, r0
 8000c8c:	b08e      	sub	sp, #56	@ 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	2238      	movs	r2, #56	@ 0x38
 8000c90:	2100      	movs	r1, #0
 8000c92:	4668      	mov	r0, sp
 8000c94:	f005 fc16 	bl	80064c4 <memset>
  if (rtcHandle->Instance == RTC)
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <HAL_RTC_MspInit+0x50>)
 8000c9a:	6822      	ldr	r2, [r4, #0]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d118      	bne.n	8000cd2 <HAL_RTC_MspInit+0x4a>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
      */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000ca0:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000ca4:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ca6:	33fc      	adds	r3, #252	@ 0xfc
 8000ca8:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000caa:	f001 fbc9 	bl	8002440 <HAL_RCC_OscConfig>
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 8000cb2:	f7ff ff87 	bl	8000bc4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cb6:	2380      	movs	r3, #128	@ 0x80
 8000cb8:	4a08      	ldr	r2, [pc, #32]	@ (8000cdc <HAL_RTC_MspInit+0x54>)
 8000cba:	02db      	lsls	r3, r3, #11
 8000cbc:	6d11      	ldr	r1, [r2, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000cbe:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	6513      	str	r3, [r2, #80]	@ 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	f000 ffea 	bl	8001ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f001 f811 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8000cd2:	b00e      	add	sp, #56	@ 0x38
 8000cd4:	bd10      	pop	{r4, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	40002800 	.word	0x40002800
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8000ce0:	4b01      	ldr	r3, [pc, #4]	@ (8000ce8 <RTC_IF_GetTimerContext+0x8>)
 8000ce2:	6818      	ldr	r0, [r3, #0]
}
 8000ce4:	4770      	bx	lr
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	200002c4 	.word	0x200002c4

08000cec <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 8000cec:	2003      	movs	r0, #3
 8000cee:	4770      	bx	lr

08000cf0 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000cf0:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8000cf2:	0e41      	lsrs	r1, r0, #25
 8000cf4:	227d      	movs	r2, #125	@ 0x7d
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	01c0      	lsls	r0, r0, #7
 8000cfa:	f7ff fb8d 	bl	8000418 <__aeabi_uldivmod>
}
 8000cfe:	bd10      	pop	{r4, pc}

08000d00 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8000d00:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8000d02:	227d      	movs	r2, #125	@ 0x7d
 8000d04:	2300      	movs	r3, #0
 8000d06:	2100      	movs	r1, #0
 8000d08:	f7ff fba6 	bl	8000458 <__aeabi_lmul>
 8000d0c:	0649      	lsls	r1, r1, #25
 8000d0e:	09c0      	lsrs	r0, r0, #7
 8000d10:	4308      	orrs	r0, r1
}
 8000d12:	bd10      	pop	{r4, pc}

08000d14 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000d14:	4806      	ldr	r0, [pc, #24]	@ (8000d30 <RTC_IF_StopTimer+0x1c>)
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <RTC_IF_StopTimer+0x20>)
 8000d18:	6801      	ldr	r1, [r0, #0]
{
 8000d1a:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000d1c:	68ca      	ldr	r2, [r1, #12]
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	4313      	orrs	r3, r2
 8000d22:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000d24:	2180      	movs	r1, #128	@ 0x80
 8000d26:	0049      	lsls	r1, r1, #1
 8000d28:	f001 ffde 	bl	8002ce8 <HAL_RTC_DeactivateAlarm>
}
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	bd10      	pop	{r4, pc}
 8000d30:	200002a0 	.word	0x200002a0
 8000d34:	fffffe7f 	.word	0xfffffe7f

08000d38 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8000d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8000d3a:	4e25      	ldr	r6, [pc, #148]	@ (8000dd0 <RTC_GetCalendarValue+0x98>)
{
 8000d3c:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	0030      	movs	r0, r6
{
 8000d42:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8000d44:	f002 fa9c 	bl	8003280 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Subseconds value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000d48:	4f22      	ldr	r7, [pc, #136]	@ (8000dd4 <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4e:	0029      	movs	r1, r5
 8000d50:	0030      	movs	r0, r6
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	f002 fabc 	bl	80032d0 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	0021      	movs	r1, r4
 8000d5c:	0030      	movs	r0, r6
 8000d5e:	f002 fa8f 	bl	8003280 <HAL_RTC_GetTime>
 8000d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8000d64:	9a01      	ldr	r2, [sp, #4]
 8000d66:	4053      	eors	r3, r2
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1ec      	bne.n	8000d48 <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8000d6e:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8000d70:	78ea      	ldrb	r2, [r5, #3]
 8000d72:	4819      	ldr	r0, [pc, #100]	@ (8000dd8 <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000d74:	786e      	ldrb	r6, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8000d76:	4350      	muls	r0, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8000d78:	400a      	ands	r2, r1
 8000d7a:	1e53      	subs	r3, r2, #1
 8000d7c:	419a      	sbcs	r2, r3
 8000d7e:	4253      	negs	r3, r2
 8000d80:	4a16      	ldr	r2, [pc, #88]	@ (8000ddc <RTC_GetCalendarValue+0xa4>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000d82:	3e01      	subs	r6, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8000d84:	4013      	ands	r3, r2
 8000d86:	4a16      	ldr	r2, [pc, #88]	@ (8000de0 <RTC_GetCalendarValue+0xa8>)
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));

  calendarValue += (RTC_DateStruct->Date - 1);
 8000d88:	78ad      	ldrb	r5, [r5, #2]
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8000d8a:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000d8c:	223d      	movs	r2, #61	@ 0x3d
 8000d8e:	4372      	muls	r2, r6
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8000d90:	0076      	lsls	r6, r6, #1
 8000d92:	40f3      	lsrs	r3, r6
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000d94:	3201      	adds	r2, #1
 8000d96:	0fd7      	lsrs	r7, r2, #31
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8000d98:	3003      	adds	r0, #3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000d9a:	18ba      	adds	r2, r7, r2
 8000d9c:	3d01      	subs	r5, #1
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8000d9e:	0880      	lsrs	r0, r0, #2
  calendarValue += (RTC_DateStruct->Date - 1);
 8000da0:	1828      	adds	r0, r5, r0
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000da2:	1052      	asrs	r2, r2, #1
 8000da4:	1812      	adds	r2, r2, r0
  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8000da6:	20e1      	movs	r0, #225	@ 0xe1
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8000da8:	400b      	ands	r3, r1
  calendarValue += (RTC_DateStruct->Date - 1);
 8000daa:	1ad3      	subs	r3, r2, r3
  calendarValue *= SECONDS_IN_1DAY;
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <RTC_GetCalendarValue+0xac>)
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8000dae:	0100      	lsls	r0, r0, #4
  calendarValue *= SECONDS_IN_1DAY;
 8000db0:	4353      	muls	r3, r2
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8000db2:	7822      	ldrb	r2, [r4, #0]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8000db4:	7861      	ldrb	r1, [r4, #1]
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8000db6:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8000db8:	223c      	movs	r2, #60	@ 0x3c
 8000dba:	434a      	muls	r2, r1
 8000dbc:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8000dbe:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8000dc0:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8000dc2:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8000dc4:	6863      	ldr	r3, [r4, #4]
 8000dc6:	0280      	lsls	r0, r0, #10
 8000dc8:	1ac0      	subs	r0, r0, r3
 8000dca:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <RTC_GetCalendarValue+0xb0>)
 8000dcc:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 8000dce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000dd0:	200002a0 	.word	0x200002a0
 8000dd4:	40002800 	.word	0x40002800
 8000dd8:	000005b5 	.word	0x000005b5
 8000ddc:	00555550 	.word	0x00555550
 8000de0:	00445550 	.word	0x00445550
 8000de4:	00015180 	.word	0x00015180
 8000de8:	000003ff 	.word	0x000003ff

08000dec <RTC_IF_SetTimerContext>:
{
 8000dec:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8000dee:	4c04      	ldr	r4, [pc, #16]	@ (8000e00 <RTC_IF_SetTimerContext+0x14>)
 8000df0:	4904      	ldr	r1, [pc, #16]	@ (8000e04 <RTC_IF_SetTimerContext+0x18>)
 8000df2:	0020      	movs	r0, r4
 8000df4:	3018      	adds	r0, #24
 8000df6:	f7ff ff9f 	bl	8000d38 <RTC_GetCalendarValue>
 8000dfa:	6020      	str	r0, [r4, #0]
}
 8000dfc:	bd10      	pop	{r4, pc}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	200002c4 	.word	0x200002c4
 8000e04:	200002c8 	.word	0x200002c8

08000e08 <RTC_IF_GetTimerElapsedTime>:
{
 8000e08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8000e0a:	4668      	mov	r0, sp
 8000e0c:	a901      	add	r1, sp, #4
 8000e0e:	f7ff ff93 	bl	8000d38 <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8000e12:	4b02      	ldr	r3, [pc, #8]	@ (8000e1c <RTC_IF_GetTimerElapsedTime+0x14>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	1ac0      	subs	r0, r0, r3
}
 8000e18:	b007      	add	sp, #28
 8000e1a:	bd00      	pop	{pc}
 8000e1c:	200002c4 	.word	0x200002c4

08000e20 <RTC_IF_StartTimer>:
{
 8000e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e22:	b087      	sub	sp, #28
 8000e24:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8000e26:	f7ff ffef 	bl	8000e08 <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8000e2a:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8000e2c:	1a30      	subs	r0, r6, r0
 8000e2e:	2803      	cmp	r0, #3
 8000e30:	d800      	bhi.n	8000e34 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8000e32:	2101      	movs	r1, #1
 8000e34:	2002      	movs	r0, #2
 8000e36:	f004 ff71 	bl	8005d1c <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8000e3a:	f004 ff9b 	bl	8005d74 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8000e3e:	4c3f      	ldr	r4, [pc, #252]	@ (8000f3c <RTC_IF_StartTimer+0x11c>)
 8000e40:	7923      	ldrb	r3, [r4, #4]
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	79a3      	ldrb	r3, [r4, #6]
 8000e46:	7967      	ldrb	r7, [r4, #5]
 8000e48:	9301      	str	r3, [sp, #4]
 8000e4a:	79e3      	ldrb	r3, [r4, #7]
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	68a3      	ldr	r3, [r4, #8]
 8000e50:	9303      	str	r3, [sp, #12]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8000e52:	7e63      	ldrb	r3, [r4, #25]
 8000e54:	9304      	str	r3, [sp, #16]
 8000e56:	7ea5      	ldrb	r5, [r4, #26]
 8000e58:	7ee3      	ldrb	r3, [r4, #27]
 8000e5a:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 8000e5c:	f7ff ff5a 	bl	8000d14 <RTC_IF_StopTimer>
  rtcAlarmDays =  RTC_DateStruct.Date;
 8000e60:	0028      	movs	r0, r5
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8000e62:	4b37      	ldr	r3, [pc, #220]	@ (8000f40 <RTC_IF_StartTimer+0x120>)
 8000e64:	9a03      	ldr	r2, [sp, #12]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8000e66:	4937      	ldr	r1, [pc, #220]	@ (8000f44 <RTC_IF_StartTimer+0x124>)
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8000e68:	1a9a      	subs	r2, r3, r2
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8000e6a:	05b3      	lsls	r3, r6, #22
 8000e6c:	0d9b      	lsrs	r3, r3, #22
 8000e6e:	18d2      	adds	r2, r2, r3
 8000e70:	b292      	uxth	r2, r2
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8000e72:	0ab3      	lsrs	r3, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d841      	bhi.n	8000efc <RTC_IF_StartTimer+0xdc>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8000e78:	21e1      	movs	r1, #225	@ 0xe1
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8000e7a:	9e00      	ldr	r6, [sp, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8000e7c:	0109      	lsls	r1, r1, #4
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d241      	bcs.n	8000f06 <RTC_IF_StartTimer+0xe6>
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8000e82:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e84:	d844      	bhi.n	8000f10 <RTC_IF_StartTimer+0xf0>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8000e86:	0a91      	lsrs	r1, r2, #10
 8000e88:	028d      	lsls	r5, r1, #10
 8000e8a:	1b52      	subs	r2, r2, r5
 8000e8c:	b292      	uxth	r2, r2
 8000e8e:	9200      	str	r2, [sp, #0]
 8000e90:	9a01      	ldr	r2, [sp, #4]
 8000e92:	1855      	adds	r5, r2, r1
 8000e94:	18ed      	adds	r5, r5, r3
 8000e96:	b2ad      	uxth	r5, r5
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8000e98:	2d3b      	cmp	r5, #59	@ 0x3b
 8000e9a:	d83d      	bhi.n	8000f18 <RTC_IF_StartTimer+0xf8>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8000e9c:	2f3b      	cmp	r7, #59	@ 0x3b
 8000e9e:	d840      	bhi.n	8000f22 <RTC_IF_StartTimer+0x102>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8000ea0:	2e17      	cmp	r6, #23
 8000ea2:	d843      	bhi.n	8000f2c <RTC_IF_StartTimer+0x10c>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8000ea4:	9a04      	ldr	r2, [sp, #16]
  if (RTC_DateStruct.Year % 4 == 0)
 8000ea6:	9905      	ldr	r1, [sp, #20]
 8000ea8:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <RTC_IF_StartTimer+0x128>)
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8000eaa:	3a01      	subs	r2, #1
  if (RTC_DateStruct.Year % 4 == 0)
 8000eac:	0789      	lsls	r1, r1, #30
 8000eae:	d142      	bne.n	8000f36 <RTC_IF_StartTimer+0x116>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8000eb0:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8000eb2:	4288      	cmp	r0, r1
 8000eb4:	d902      	bls.n	8000ebc <RTC_IF_StartTimer+0x9c>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8000eb6:	f7ff faa9 	bl	800040c <__aeabi_idivmod>
 8000eba:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8000ebc:	9a00      	ldr	r2, [sp, #0]
 8000ebe:	4b20      	ldr	r3, [pc, #128]	@ (8000f40 <RTC_IF_StartTimer+0x120>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8000ec0:	77a5      	strb	r5, [r4, #30]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8000ec2:	1a9b      	subs	r3, r3, r2
 8000ec4:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8000ec6:	23a0      	movs	r3, #160	@ 0xa0
 8000ec8:	051b      	lsls	r3, r3, #20
 8000eca:	6363      	str	r3, [r4, #52]	@ 0x34
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8000ecc:	0023      	movs	r3, r4
 8000ece:	333c      	adds	r3, #60	@ 0x3c
 8000ed0:	7018      	strb	r0, [r3, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8000ed2:	9b02      	ldr	r3, [sp, #8]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ed4:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8000ed6:	77e3      	strb	r3, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8000ed8:	0021      	movs	r1, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8000eda:	2380      	movs	r3, #128	@ 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8000edc:	002a      	movs	r2, r5
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8000ede:	005b      	lsls	r3, r3, #1
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8000ee0:	311c      	adds	r1, #28
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8000ee2:	481a      	ldr	r0, [pc, #104]	@ (8000f4c <RTC_IF_StartTimer+0x12c>)
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8000ee4:	7767      	strb	r7, [r4, #29]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8000ee6:	7726      	strb	r6, [r4, #28]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ee8:	63a5      	str	r5, [r4, #56]	@ 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8000eea:	6325      	str	r5, [r4, #48]	@ 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8000eec:	6423      	str	r3, [r4, #64]	@ 0x40
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000eee:	62a5      	str	r5, [r4, #40]	@ 0x28
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ef0:	62e5      	str	r5, [r4, #44]	@ 0x2c
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8000ef2:	f002 f8eb 	bl	80030cc <HAL_RTC_SetAlarm_IT>
}
 8000ef6:	0028      	movs	r0, r5
 8000ef8:	b007      	add	sp, #28
 8000efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 8000efc:	4d14      	ldr	r5, [pc, #80]	@ (8000f50 <RTC_IF_StartTimer+0x130>)
    rtcAlarmDays++;
 8000efe:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 8000f00:	195b      	adds	r3, r3, r5
    rtcAlarmDays++;
 8000f02:	b280      	uxth	r0, r0
 8000f04:	e7b6      	b.n	8000e74 <RTC_IF_StartTimer+0x54>
    timeoutValue -= SECONDS_IN_1HOUR;
 8000f06:	4d13      	ldr	r5, [pc, #76]	@ (8000f54 <RTC_IF_StartTimer+0x134>)
    rtcAlarmHours++;
 8000f08:	3601      	adds	r6, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 8000f0a:	195b      	adds	r3, r3, r5
    rtcAlarmHours++;
 8000f0c:	b2b6      	uxth	r6, r6
 8000f0e:	e7b6      	b.n	8000e7e <RTC_IF_StartTimer+0x5e>
    rtcAlarmMinutes++;
 8000f10:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 8000f12:	3b3c      	subs	r3, #60	@ 0x3c
    rtcAlarmMinutes++;
 8000f14:	b2bf      	uxth	r7, r7
 8000f16:	e7b4      	b.n	8000e82 <RTC_IF_StartTimer+0x62>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8000f18:	3d3c      	subs	r5, #60	@ 0x3c
    rtcAlarmMinutes++;
 8000f1a:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8000f1c:	b2ad      	uxth	r5, r5
    rtcAlarmMinutes++;
 8000f1e:	b2bf      	uxth	r7, r7
 8000f20:	e7ba      	b.n	8000e98 <RTC_IF_StartTimer+0x78>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8000f22:	3f3c      	subs	r7, #60	@ 0x3c
    rtcAlarmHours++;
 8000f24:	3601      	adds	r6, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8000f26:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 8000f28:	b2b6      	uxth	r6, r6
 8000f2a:	e7b7      	b.n	8000e9c <RTC_IF_StartTimer+0x7c>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8000f2c:	3e18      	subs	r6, #24
    rtcAlarmDays++;
 8000f2e:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8000f30:	b2b6      	uxth	r6, r6
    rtcAlarmDays++;
 8000f32:	b280      	uxth	r0, r0
 8000f34:	e7b4      	b.n	8000ea0 <RTC_IF_StartTimer+0x80>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8000f36:	189b      	adds	r3, r3, r2
 8000f38:	7b19      	ldrb	r1, [r3, #12]
 8000f3a:	e7ba      	b.n	8000eb2 <RTC_IF_StartTimer+0x92>
 8000f3c:	200002c4 	.word	0x200002c4
 8000f40:	000003ff 	.word	0x000003ff
 8000f44:	0001517f 	.word	0x0001517f
 8000f48:	0800656c 	.word	0x0800656c
 8000f4c:	200002a0 	.word	0x200002a0
 8000f50:	fffeae80 	.word	0xfffeae80
 8000f54:	fffff1f0 	.word	0xfffff1f0

08000f58 <RTC_IF_GetTime>:
{
 8000f58:	b530      	push	{r4, r5, lr}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8000f5e:	a901      	add	r1, sp, #4
 8000f60:	4668      	mov	r0, sp
 8000f62:	f7ff fee9 	bl	8000d38 <RTC_GetCalendarValue>
 8000f66:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8000f68:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8000f6a:	227d      	movs	r2, #125	@ 0x7d
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8000f70:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8000f72:	f7ff fa71 	bl	8000458 <__aeabi_lmul>
 8000f76:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8000f78:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8000f7a:	0aa0      	lsrs	r0, r4, #10
}
 8000f7c:	b007      	add	sp, #28
 8000f7e:	bd30      	pop	{r4, r5, pc}

08000f80 <RTC_IF_BkUp_Write_Seconds>:
{
 8000f80:	b510      	push	{r4, lr}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000f82:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <RTC_IF_BkUp_Write_Seconds+0x10>)
{
 8000f84:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000f86:	2100      	movs	r1, #0
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f002 f9c3 	bl	8003314 <HAL_RTCEx_BKUPWrite>
}
 8000f8e:	bd10      	pop	{r4, pc}
 8000f90:	200002a0 	.word	0x200002a0

08000f94 <RTC_IF_BkUp_Write_SubSeconds>:
{
 8000f94:	b510      	push	{r4, lr}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000f96:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
{
 8000f98:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f002 f9b9 	bl	8003314 <HAL_RTCEx_BKUPWrite>
}
 8000fa2:	bd10      	pop	{r4, pc}
 8000fa4:	200002a0 	.word	0x200002a0

08000fa8 <RTC_IF_BkUp_Read_Seconds>:
{
 8000fa8:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000faa:	2100      	movs	r1, #0
 8000fac:	4801      	ldr	r0, [pc, #4]	@ (8000fb4 <RTC_IF_BkUp_Read_Seconds+0xc>)
 8000fae:	f002 f9b7 	bl	8003320 <HAL_RTCEx_BKUPRead>
}
 8000fb2:	bd10      	pop	{r4, pc}
 8000fb4:	200002a0 	.word	0x200002a0

08000fb8 <RTC_IF_BkUp_Read_SubSeconds>:
{
 8000fb8:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4801      	ldr	r0, [pc, #4]	@ (8000fc4 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 8000fbe:	f002 f9af 	bl	8003320 <HAL_RTCEx_BKUPRead>
}
 8000fc2:	bd10      	pop	{r4, pc}
 8000fc4:	200002a0 	.word	0x200002a0

08000fc8 <RTC_IF_Init>:
{
 8000fc8:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 8000fca:	4d11      	ldr	r5, [pc, #68]	@ (8001010 <RTC_IF_Init+0x48>)
{
 8000fcc:	b08b      	sub	sp, #44	@ 0x2c
  if (RTC_Initalized == false)
 8000fce:	782b      	ldrb	r3, [r5, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d119      	bne.n	8001008 <RTC_IF_Init+0x40>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fd4:	3320      	adds	r3, #32
 8000fd6:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000fd8:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fda:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000fdc:	025b      	lsls	r3, r3, #9
 8000fde:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe0:	f001 fda6 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	2800      	cmp	r0, #0
 8000fe6:	d000      	beq.n	8000fea <RTC_IF_Init+0x22>
      while (1);
 8000fe8:	e7fe      	b.n	8000fe8 <RTC_IF_Init+0x20>
    MX_RTC_Init();
 8000fea:	f7ff fded 	bl	8000bc8 <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000fee:	2180      	movs	r1, #128	@ 0x80
 8000ff0:	4c08      	ldr	r4, [pc, #32]	@ (8001014 <RTC_IF_Init+0x4c>)
 8000ff2:	0049      	lsls	r1, r1, #1
 8000ff4:	0020      	movs	r0, r4
 8000ff6:	f001 fe77 	bl	8002ce8 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000ffa:	0020      	movs	r0, r4
 8000ffc:	f002 f996 	bl	800332c <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 8001000:	f7ff fef4 	bl	8000dec <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 8001004:	2301      	movs	r3, #1
 8001006:	702b      	strb	r3, [r5, #0]
}
 8001008:	2000      	movs	r0, #0
 800100a:	b00b      	add	sp, #44	@ 0x2c
 800100c:	bd30      	pop	{r4, r5, pc}
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	20000308 	.word	0x20000308
 8001014:	200002a0 	.word	0x200002a0

08001018 <RTC_IF_GetTimerValue>:
{
 8001018:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 800101a:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <RTC_IF_GetTimerValue+0x18>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4283      	cmp	r3, r0
 8001022:	d003      	beq.n	800102c <RTC_IF_GetTimerValue+0x14>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8001024:	4668      	mov	r0, sp
 8001026:	a901      	add	r1, sp, #4
 8001028:	f7ff fe86 	bl	8000d38 <RTC_GetCalendarValue>
}
 800102c:	b007      	add	sp, #28
 800102e:	bd00      	pop	{pc}
 8001030:	20000308 	.word	0x20000308

08001034 <RTC_IF_DelayMs>:
{
 8001034:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8001036:	227d      	movs	r2, #125	@ 0x7d
 8001038:	2300      	movs	r3, #0
 800103a:	0e41      	lsrs	r1, r0, #25
 800103c:	01c0      	lsls	r0, r0, #7
 800103e:	f7ff f9eb 	bl	8000418 <__aeabi_uldivmod>
 8001042:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8001044:	f7ff ffe8 	bl	8001018 <RTC_IF_GetTimerValue>
 8001048:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 800104a:	f7ff ffe5 	bl	8001018 <RTC_IF_GetTimerValue>
 800104e:	1b40      	subs	r0, r0, r5
 8001050:	42a0      	cmp	r0, r4
 8001052:	d300      	bcc.n	8001056 <RTC_IF_DelayMs+0x22>
}
 8001054:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	e7f7      	b.n	800104a <RTC_IF_DelayMs+0x16>

0800105a <HAL_RTC_AlarmAEventCallback>:
{
 800105a:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 800105c:	f005 f8bc 	bl	80061d8 <UTIL_TIMER_IRQ_Handler>
}
 8001060:	bd10      	pop	{r4, pc}

08001062 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001062:	4770      	bx	lr

08001064 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 8001064:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001066:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800106a:	b672      	cpsid	i
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 800106c:	f000 fcb6 	bl	80019dc <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8001070:	2304      	movs	r3, #4
 8001072:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <PWR_EnterStopMode+0x24>)
 8001074:	6811      	ldr	r1, [r2, #0]
 8001076:	430b      	orrs	r3, r1
 8001078:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800107a:	f384 8810 	msr	PRIMASK, r4
  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800107e:	2101      	movs	r1, #1
 8001080:	0008      	movs	r0, r1
 8001082:	f001 f943 	bl	800230c <HAL_PWR_EnterSTOPMode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001086:	bd10      	pop	{r4, pc}
 8001088:	40007000 	.word	0x40007000

0800108c <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800108c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800108e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001092:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8001094:	2201      	movs	r2, #1
 8001096:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <PWR_ExitStopMode+0x4c>)
 8001098:	6819      	ldr	r1, [r3, #0]
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 800109e:	2204      	movs	r2, #4
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	4211      	tst	r1, r2
 80010a4:	d0fc      	beq.n	80010a0 <PWR_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 80010a6:	2280      	movs	r2, #128	@ 0x80
 80010a8:	6819      	ldr	r1, [r3, #0]
 80010aa:	0452      	lsls	r2, r2, #17
 80010ac:	430a      	orrs	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 80010b0:	2280      	movs	r2, #128	@ 0x80
 80010b2:	0492      	lsls	r2, r2, #18
 80010b4:	6819      	ldr	r1, [r3, #0]
 80010b6:	4211      	tst	r1, r2
 80010b8:	d0fc      	beq.n	80010b4 <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80010ba:	2203      	movs	r2, #3
 80010bc:	68d9      	ldr	r1, [r3, #12]
 80010be:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80010c0:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80010c2:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	400a      	ands	r2, r1
 80010c8:	2a0c      	cmp	r2, #12
 80010ca:	d1fb      	bne.n	80010c4 <PWR_ExitStopMode+0x38>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 80010cc:	f000 fbae 	bl	800182c <CMWX1ZZABZ0XX_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010d0:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80010d4:	bd10      	pop	{r4, pc}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	40021000 	.word	0x40021000

080010dc <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80010dc:	b510      	push	{r4, lr}

  /* USER CODE END EnterSleepMode_1 */
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80010de:	2101      	movs	r1, #1
 80010e0:	2000      	movs	r0, #0
 80010e2:	f001 f8db 	bl	800229c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80010e6:	bd10      	pop	{r4, pc}

080010e8 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
 80010e8:	4770      	bx	lr

080010ea <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
 80010ea:	4770      	bx	lr

080010ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	2380      	movs	r3, #128	@ 0x80
 80010ee:	4a09      	ldr	r2, [pc, #36]	@ (8001114 <HAL_MspInit+0x28>)
 80010f0:	055b      	lsls	r3, r3, #21
 80010f2:	6b91      	ldr	r1, [r2, #56]	@ 0x38
{
 80010f4:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	430b      	orrs	r3, r1
 80010f8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 80010fa:	f001 f8c7 	bl	800228c <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 80010fe:	f001 f94b 	bl	8002398 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8001102:	2308      	movs	r3, #8
 8001104:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <HAL_MspInit+0x2c>)
 8001106:	6811      	ldr	r1, [r2, #0]
 8001108:	430b      	orrs	r3, r1
 800110a:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 800110c:	f001 f93a 	bl	8002384 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001110:	bd10      	pop	{r4, pc}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	40021000 	.word	0x40021000
 8001118:	40022000 	.word	0x40022000

0800111c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800111c:	e7fe      	b.n	800111c <NMI_Handler>

0800111e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler>

08001120 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001120:	4770      	bx	lr

08001122 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001122:	4770      	bx	lr

08001124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001124:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001126:	f000 fd97 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112a:	bd10      	pop	{r4, pc}

0800112c <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 800112c:	b510      	push	{r4, lr}
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800112e:	4803      	ldr	r0, [pc, #12]	@ (800113c <EXTI0_1_IRQHandler+0x10>)
 8001130:	f000 ff4a 	bl	8001fc8 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <EXTI0_1_IRQHandler+0x14>)
 8001136:	f000 ff47 	bl	8001fc8 <HAL_EXTI_IRQHandler>
#endif
}
 800113a:	bd10      	pop	{r4, pc}
 800113c:	20000450 	.word	0x20000450
 8001140:	20000448 	.word	0x20000448

08001144 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
 8001144:	4770      	bx	lr
	...

08001148 <EXTI4_15_IRQHandler>:
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}

void EXTI4_15_IRQHandler(void)
{
 8001148:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 800114a:	4803      	ldr	r0, [pc, #12]	@ (8001158 <EXTI4_15_IRQHandler+0x10>)
 800114c:	f000 ff3c 	bl	8001fc8 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001150:	4802      	ldr	r0, [pc, #8]	@ (800115c <EXTI4_15_IRQHandler+0x14>)
 8001152:	f000 ff39 	bl	8001fc8 <HAL_EXTI_IRQHandler>
#endif
}
 8001156:	bd10      	pop	{r4, pc}
 8001158:	20000440 	.word	0x20000440
 800115c:	20000458 	.word	0x20000458

08001160 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001160:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001162:	4802      	ldr	r0, [pc, #8]	@ (800116c <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8001164:	f000 fed7 	bl	8001f16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001168:	bd10      	pop	{r4, pc}
 800116a:	46c0      	nop			@ (mov r8, r8)
 800116c:	2000030c 	.word	0x2000030c

08001170 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001170:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001172:	4802      	ldr	r0, [pc, #8]	@ (800117c <USART2_IRQHandler+0xc>)
 8001174:	f002 fc3c 	bl	80039f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001178:	bd10      	pop	{r4, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	20000354 	.word	0x20000354

08001180 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 8001180:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001182:	4802      	ldr	r0, [pc, #8]	@ (800118c <RTC_IRQHandler+0xc>)
 8001184:	f001 fe0e 	bl	8002da4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001188:	bd10      	pop	{r4, pc}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	200002a0 	.word	0x200002a0

08001190 <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8001190:	b40c      	push	{r2, r3}
 8001192:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001194:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8001196:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001198:	4a03      	ldr	r2, [pc, #12]	@ (80011a8 <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 800119a:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800119c:	f005 f85e 	bl	800625c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80011a0:	b003      	add	sp, #12
 80011a2:	bc08      	pop	{r3}
 80011a4:	b002      	add	sp, #8
 80011a6:	4718      	bx	r3
 80011a8:	08006a82 	.word	0x08006a82

080011ac <TimestampNow>:
{
 80011ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80011ae:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 80011b0:	ae02      	add	r6, sp, #8
 80011b2:	0030      	movs	r0, r6
{
 80011b4:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 80011b6:	f004 fecf 	bl	8005f58 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80011ba:	2104      	movs	r1, #4
 80011bc:	5e73      	ldrsh	r3, [r6, r1]
 80011be:	0020      	movs	r0, r4
 80011c0:	2110      	movs	r1, #16
 80011c2:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <TimestampNow+0x2c>)
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	9b02      	ldr	r3, [sp, #8]
 80011c8:	f7ff ffe2 	bl	8001190 <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 80011cc:	0020      	movs	r0, r4
 80011ce:	f7fe ff9b 	bl	8000108 <strlen>
 80011d2:	8028      	strh	r0, [r5, #0]
}
 80011d4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	08006a82 	.word	0x08006a82

080011dc <SystemApp_Init>:
{
 80011dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	2704      	movs	r7, #4
{
 80011e4:	b08b      	sub	sp, #44	@ 0x2c
  UTIL_TIMER_Init();
 80011e6:	f004 fedf 	bl	8005fa8 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	220c      	movs	r2, #12
 80011ec:	2100      	movs	r1, #0
 80011ee:	a807      	add	r0, sp, #28
 80011f0:	f005 f968 	bl	80064c4 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f4:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	4c2c      	ldr	r4, [pc, #176]	@ (80012a8 <SystemApp_Init+0xcc>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	432b      	orrs	r3, r5
 8001200:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001202:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	402b      	ands	r3, r5
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800120e:	4333      	orrs	r3, r6
 8001210:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001212:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001214:	4033      	ands	r3, r6
 8001216:	9302      	str	r3, [sp, #8]
 8001218:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800121c:	433b      	orrs	r3, r7
 800121e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001220:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001222:	403b      	ands	r3, r7
 8001224:	9303      	str	r3, [sp, #12]
 8001226:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001228:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800122a:	4313      	orrs	r3, r2
 800122c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800122e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001230:	4013      	ands	r3, r2
 8001232:	9304      	str	r3, [sp, #16]
 8001234:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800123a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <SystemApp_Init+0xd0>)
 800123c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f000 fed5 	bl	8001fec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8001242:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <SystemApp_Init+0xd4>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001244:	a905      	add	r1, sp, #20
 8001246:	481b      	ldr	r0, [pc, #108]	@ (80012b4 <SystemApp_Init+0xd8>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8001248:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f000 fecf 	bl	8001fec <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124e:	a905      	add	r1, sp, #20
 8001250:	4819      	ldr	r0, [pc, #100]	@ (80012b8 <SystemApp_Init+0xdc>)
 8001252:	f000 fecb 	bl	8001fec <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001256:	a905      	add	r1, sp, #20
 8001258:	4818      	ldr	r0, [pc, #96]	@ (80012bc <SystemApp_Init+0xe0>)
 800125a:	f000 fec7 	bl	8001fec <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800125e:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8001260:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001262:	43ab      	bics	r3, r5
 8001264:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8001266:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001268:	43b3      	bics	r3, r6
 800126a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 800126c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800126e:	43bb      	bics	r3, r7
 8001270:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8001272:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001274:	4393      	bics	r3, r2
 8001276:	62e3      	str	r3, [r4, #44]	@ 0x2c
  DBG_Disable();
 8001278:	f000 f856 	bl	8001328 <DBG_Disable>
  DBG_ProbesInit();
 800127c:	f000 f876 	bl	800136c <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 8001280:	f004 fc2e 	bl	8005ae0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001284:	480e      	ldr	r0, [pc, #56]	@ (80012c0 <SystemApp_Init+0xe4>)
 8001286:	f004 fc45 	bl	8005b14 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800128a:	0030      	movs	r0, r6
 800128c:	f004 fc48 	bl	8005b20 <UTIL_ADV_TRACE_SetVerboseLevel>
  Sx_Board_Bus_Init();
 8001290:	f000 fc78 	bl	8001b84 <CMWX1ZZABZ0XX_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8001294:	f000 faca 	bl	800182c <CMWX1ZZABZ0XX_RADIO_IoInit>
  UTIL_LPM_Init();
 8001298:	f004 fd38 	bl	8005d0c <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800129c:	0029      	movs	r1, r5
 800129e:	0028      	movs	r0, r5
 80012a0:	f004 fd52 	bl	8005d48 <UTIL_LPM_SetOffMode>
}
 80012a4:	b00b      	add	sp, #44	@ 0x2c
 80012a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	00009fff 	.word	0x00009fff
 80012b0:	0000ffff 	.word	0x0000ffff
 80012b4:	50000400 	.word	0x50000400
 80012b8:	50000800 	.word	0x50000800
 80012bc:	50001c00 	.word	0x50001c00
 80012c0:	080011ad 	.word	0x080011ad

080012c4 <UTIL_SEQ_Idle>:
{
 80012c4:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 80012c6:	f004 fd67 	bl	8005d98 <UTIL_LPM_EnterLowPower>
}
 80012ca:	bd10      	pop	{r4, pc}

080012cc <UTIL_ADV_TRACE_PreSendHook>:
{
 80012cc:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80012ce:	2101      	movs	r1, #1
 80012d0:	2004      	movs	r0, #4
 80012d2:	f004 fd23 	bl	8005d1c <UTIL_LPM_SetStopMode>
}
 80012d6:	bd10      	pop	{r4, pc}

080012d8 <UTIL_ADV_TRACE_PostSendHook>:
{
 80012d8:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80012da:	2100      	movs	r1, #0
 80012dc:	2004      	movs	r0, #4
 80012de:	f004 fd1d 	bl	8005d1c <UTIL_LPM_SetStopMode>
}
 80012e2:	bd10      	pop	{r4, pc}

080012e4 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80012e4:	2000      	movs	r0, #0
 80012e6:	4770      	bx	lr

080012e8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80012e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 80012ea:	f7ff fe95 	bl	8001018 <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80012ee:	bd10      	pop	{r4, pc}

080012f0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80012f0:	b507      	push	{r0, r1, r2, lr}
 80012f2:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 80012f4:	9801      	ldr	r0, [sp, #4]
 80012f6:	f7ff fe9d 	bl	8001034 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80012fa:	bd07      	pop	{r0, r1, r2, pc}

080012fc <DBG_ConfigForLpm>:
    HAL_DBGMCU_EnableDBGStopMode();
    HAL_DBGMCU_EnableDBGStandbyMode();
  }
  else
  {
    __HAL_RCC_DBGMCU_CLK_ENABLE();
 80012fc:	2380      	movs	r3, #128	@ 0x80
{
 80012fe:	b510      	push	{r4, lr}
    __HAL_RCC_DBGMCU_CLK_ENABLE();
 8001300:	4c07      	ldr	r4, [pc, #28]	@ (8001320 <DBG_ConfigForLpm+0x24>)
 8001302:	03db      	lsls	r3, r3, #15
 8001304:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001306:	4313      	orrs	r3, r2
 8001308:	6363      	str	r3, [r4, #52]	@ 0x34
    HAL_DBGMCU_DisableDBGSleepMode();
 800130a:	f000 fcb1 	bl	8001c70 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 800130e:	f000 fcb7 	bl	8001c80 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8001312:	f000 fcbd 	bl	8001c90 <HAL_DBGMCU_DisableDBGStandbyMode>
    __HAL_RCC_DBGMCU_CLK_DISABLE();
 8001316:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001318:	4a02      	ldr	r2, [pc, #8]	@ (8001324 <DBG_ConfigForLpm+0x28>)
 800131a:	4013      	ands	r3, r2
 800131c:	6363      	str	r3, [r4, #52]	@ 0x34
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 800131e:	bd10      	pop	{r4, pc}
 8001320:	40021000 	.word	0x40021000
 8001324:	ffbfffff 	.word	0xffbfffff

08001328 <DBG_Disable>:
{
 8001328:	b510      	push	{r4, lr}
 800132a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	220c      	movs	r2, #12
 800132e:	2100      	movs	r1, #0
 8001330:	a803      	add	r0, sp, #12
 8001332:	f005 f8c7 	bl	80064c4 <memset>
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8001336:	2303      	movs	r3, #3
 8001338:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 800133a:	23c0      	movs	r3, #192	@ 0xc0
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 800133c:	2401      	movs	r4, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8001340:	01db      	lsls	r3, r3, #7
 8001342:	9301      	str	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001344:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <DBG_Disable+0x40>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	a901      	add	r1, sp, #4
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 800134c:	4322      	orrs	r2, r4
 800134e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001352:	4023      	ands	r3, r4
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f000 fe48 	bl	8001fec <HAL_GPIO_Init>
  DBG_ConfigForLpm(1);
 800135c:	0020      	movs	r0, r4
 800135e:	f7ff ffcd 	bl	80012fc <DBG_ConfigForLpm>
}
 8001362:	b006      	add	sp, #24
 8001364:	bd10      	pop	{r4, pc}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	40021000 	.word	0x40021000

0800136c <DBG_ProbesInit>:
#endif /* PROBE_PINS_ENABLED */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 800136c:	4770      	bx	lr
	...

08001370 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance        = USART2;
 8001370:	480a      	ldr	r0, [pc, #40]	@ (800139c <MX_USART2_UART_Init+0x2c>)
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <MX_USART2_UART_Init+0x30>)
{
 8001374:	b510      	push	{r4, lr}
  huart2.Instance        = USART2;
 8001376:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate   = USART_BAUDRATE;
 8001378:	23e1      	movs	r3, #225	@ 0xe1
 800137a:	025b      	lsls	r3, r3, #9
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits   = UART_STOPBITS_1;
  huart2.Init.Parity     = UART_PARITY_NONE;
  huart2.Init.Mode       = UART_MODE_TX;
 800137c:	2208      	movs	r2, #8
  huart2.Init.BaudRate   = USART_BAUDRATE;
 800137e:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001380:	2300      	movs	r3, #0
  huart2.Init.Mode       = UART_MODE_TX;
 8001382:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001384:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits   = UART_STOPBITS_1;
 8001386:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity     = UART_PARITY_NONE;
 8001388:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800138a:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 800138c:	f002 ff82 	bl	8004294 <HAL_UART_Init>
 8001390:	2800      	cmp	r0, #0
 8001392:	d001      	beq.n	8001398 <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
 8001394:	f7ff fc16 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001398:	bd10      	pop	{r4, pc}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	20000354 	.word	0x20000354
 80013a0:	40004400 	.word	0x40004400

080013a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 80013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a6:	0005      	movs	r5, r0
 80013a8:	b093      	sub	sp, #76	@ 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	2214      	movs	r2, #20
 80013ac:	2100      	movs	r1, #0
 80013ae:	a804      	add	r0, sp, #16
 80013b0:	f005 f888 	bl	80064c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b4:	2224      	movs	r2, #36	@ 0x24
 80013b6:	2100      	movs	r1, #0
 80013b8:	a809      	add	r0, sp, #36	@ 0x24
 80013ba:	f005 f883 	bl	80064c4 <memset>

  if (uartHandle->Instance == USART2)
 80013be:	4b37      	ldr	r3, [pc, #220]	@ (800149c <HAL_UART_MspInit+0xf8>)
 80013c0:	682a      	ldr	r2, [r5, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d168      	bne.n	8001498 <HAL_UART_MspInit+0xf4>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 80013c6:	2201      	movs	r2, #1
 80013c8:	4b35      	ldr	r3, [pc, #212]	@ (80014a0 <HAL_UART_MspInit+0xfc>)
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80013ca:	2604      	movs	r6, #4
    USARTx_TX_GPIO_CLK_ENABLE();
 80013cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013ce:	4311      	orrs	r1, r2
 80013d0:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80013d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013d4:	4011      	ands	r1, r2
 80013d6:	9101      	str	r1, [sp, #4]
 80013d8:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 80013da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013dc:	4311      	orrs	r1, r2
 80013de:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80013e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013e2:	4011      	ands	r1, r2
 80013e4:	9102      	str	r1, [sp, #8]
 80013e6:	9902      	ldr	r1, [sp, #8]
    __USART2_CLK_ENABLE();
 80013e8:	2180      	movs	r1, #128	@ 0x80
 80013ea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80013ec:	0289      	lsls	r1, r1, #10
 80013ee:	4308      	orrs	r0, r1
 80013f0:	6398      	str	r0, [r3, #56]	@ 0x38
    DMAx_CLK_ENABLE();
 80013f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80013f4:	4310      	orrs	r0, r2
 80013f6:	6318      	str	r0, [r3, #48]	@ 0x30
 80013f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80013fa:	4002      	ands	r2, r0
 80013fc:	9203      	str	r2, [sp, #12]
 80013fe:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 8001400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001402:	a809      	add	r0, sp, #36	@ 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 8001404:	4311      	orrs	r1, r2
 8001406:	6399      	str	r1, [r3, #56]	@ 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001408:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800140a:	960c      	str	r6, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800140c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140e:	f001 fb8f 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 8001412:	2800      	cmp	r0, #0
 8001414:	d001      	beq.n	800141a <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 8001416:	f7ff fbd5 	bl	8000bc4 <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 800141a:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001420:	2303      	movs	r3, #3
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8001422:	a904      	add	r1, sp, #16
 8001424:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001428:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 800142a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800142e:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8001430:	f000 fddc 	bl	8001fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8001434:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8001436:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8001438:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 800143a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800143c:	3b05      	subs	r3, #5
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 800143e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001442:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001446:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8001448:	f000 fdd0 	bl	8001fec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800144c:	4f15      	ldr	r7, [pc, #84]	@ (80014a4 <HAL_UART_MspInit+0x100>)
 800144e:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <HAL_UART_MspInit+0x104>)
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;

    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001450:	0038      	movs	r0, r7
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8001452:	603b      	str	r3, [r7, #0]
    hdma_usart2_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001454:	2310      	movs	r3, #16
 8001456:	60bb      	str	r3, [r7, #8]
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001458:	3370      	adds	r3, #112	@ 0x70
    hdma_usart2_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 800145a:	607e      	str	r6, [r7, #4]
    hdma_usart2_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800145c:	60fc      	str	r4, [r7, #12]
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800145e:	613b      	str	r3, [r7, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001460:	617c      	str	r4, [r7, #20]
    hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8001462:	61bc      	str	r4, [r7, #24]
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
 8001464:	61fc      	str	r4, [r7, #28]
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8001466:	623c      	str	r4, [r7, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001468:	f000 fc60 	bl	8001d2c <HAL_DMA_Init>
 800146c:	42a0      	cmp	r0, r4
 800146e:	d001      	beq.n	8001474 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001470:	f7ff fba8 	bl	8000bc4 <Error_Handler>
    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8001474:	2201      	movs	r2, #1
 8001476:	2100      	movs	r1, #0
 8001478:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 800147a:	672f      	str	r7, [r5, #112]	@ 0x70
 800147c:	62bd      	str	r5, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800147e:	f000 fc0f 	bl	8001ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8001482:	200b      	movs	r0, #11
 8001484:	f000 fc36 	bl	8001cf4 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8001488:	201c      	movs	r0, #28
 800148a:	2201      	movs	r2, #1
 800148c:	2100      	movs	r1, #0
 800148e:	f000 fc07 	bl	8001ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8001492:	201c      	movs	r0, #28
 8001494:	f000 fc2e 	bl	8001cf4 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8001498:	b013      	add	sp, #76	@ 0x4c
 800149a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149c:	40004400 	.word	0x40004400
 80014a0:	40021000 	.word	0x40021000
 80014a4:	2000030c 	.word	0x2000030c
 80014a8:	40020080 	.word	0x40020080

080014ac <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <HAL_UART_MspDeInit+0x30>)
 80014ae:	6802      	ldr	r2, [r0, #0]
{
 80014b0:	b510      	push	{r4, lr}
 80014b2:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART2)
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d10f      	bne.n	80014d8 <HAL_UART_MspDeInit+0x2c>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80014b8:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 80014ba:	4a09      	ldr	r2, [pc, #36]	@ (80014e0 <HAL_UART_MspDeInit+0x34>)
 80014bc:	4909      	ldr	r1, [pc, #36]	@ (80014e4 <HAL_UART_MspDeInit+0x38>)
 80014be:	6b93      	ldr	r3, [r2, #56]	@ 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80014c0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 80014c2:	400b      	ands	r3, r1
 80014c4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80014c6:	210c      	movs	r1, #12
 80014c8:	f000 fe50 	bl	800216c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80014cc:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80014ce:	f000 fc71 	bl	8001db4 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80014d2:	201c      	movs	r0, #28
 80014d4:	f000 fc1a 	bl	8001d0c <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80014d8:	bd10      	pop	{r4, pc}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	40004400 	.word	0x40004400
 80014e0:	40021000 	.word	0x40021000
 80014e4:	fffdffff 	.word	0xfffdffff

080014e8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80014e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80014ea:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <vcom_Init+0x14>)
 80014ec:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 80014ee:	f7ff faff 	bl	8000af0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014f2:	f7ff ff3d 	bl	8001370 <MX_USART2_UART_Init>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80014f6:	2000      	movs	r0, #0
 80014f8:	bd10      	pop	{r4, pc}
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	200003dc 	.word	0x200003dc

08001500 <vcom_DeInit>:
{
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8001500:	2280      	movs	r2, #128	@ 0x80
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <vcom_DeInit+0x28>)
 8001504:	0292      	lsls	r2, r2, #10
 8001506:	6a99      	ldr	r1, [r3, #40]	@ 0x28
{
 8001508:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 800150a:	430a      	orrs	r2, r1
 800150c:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 800150e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001510:	4906      	ldr	r1, [pc, #24]	@ (800152c <vcom_DeInit+0x2c>)

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001512:	4807      	ldr	r0, [pc, #28]	@ (8001530 <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 8001514:	400a      	ands	r2, r1
 8001516:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_UART_MspDeInit(&huart2);
 8001518:	f7ff ffc8 	bl	80014ac <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800151c:	200b      	movs	r0, #11
 800151e:	f000 fbf5 	bl	8001d0c <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001522:	2000      	movs	r0, #0
 8001524:	bd10      	pop	{r4, pc}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	40021000 	.word	0x40021000
 800152c:	fffdffff 	.word	0xfffdffff
 8001530:	20000354 	.word	0x20000354

08001534 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001534:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001536:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <vcom_Trace_DMA+0x14>)
{
 8001538:	000a      	movs	r2, r1
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 800153a:	0001      	movs	r1, r0
 800153c:	0018      	movs	r0, r3
 800153e:	f002 f999 	bl	8003874 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001542:	2000      	movs	r0, #0
 8001544:	bd10      	pop	{r4, pc}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	20000354 	.word	0x20000354

0800154c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800154c:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800154e:	2180      	movs	r1, #128	@ 0x80

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001550:	4c10      	ldr	r4, [pc, #64]	@ (8001594 <vcom_ReceiveInit+0x48>)
  RxCpltCallback = RxCb;
 8001552:	4d11      	ldr	r5, [pc, #68]	@ (8001598 <vcom_ReceiveInit+0x4c>)
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001554:	9a01      	ldr	r2, [sp, #4]
  RxCpltCallback = RxCb;
 8001556:	6068      	str	r0, [r5, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001558:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800155a:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800155c:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800155e:	f002 ff63 	bl	8004428 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001562:	2280      	movs	r2, #128	@ 0x80
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	0252      	lsls	r2, r2, #9
 8001568:	69d9      	ldr	r1, [r3, #28]
 800156a:	4211      	tst	r1, r2
 800156c:	d1fc      	bne.n	8001568 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 800156e:	2280      	movs	r2, #128	@ 0x80
 8001570:	03d2      	lsls	r2, r2, #15
 8001572:	69d9      	ldr	r1, [r3, #28]
 8001574:	4211      	tst	r1, r2
 8001576:	d0fc      	beq.n	8001572 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001578:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800157a:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800157c:	430a      	orrs	r2, r1
 800157e:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&huart2);
 8001580:	f002 ff98 	bl	80044b4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001584:	0029      	movs	r1, r5
 8001586:	2201      	movs	r2, #1
 8001588:	0020      	movs	r0, r4
 800158a:	3108      	adds	r1, #8
 800158c:	f002 ff16 	bl	80043bc <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001590:	2000      	movs	r0, #0
 8001592:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8001594:	20000354 	.word	0x20000354
 8001598:	200003dc 	.word	0x200003dc

0800159c <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 800159c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 800159e:	4b02      	ldr	r3, [pc, #8]	@ (80015a8 <HAL_UART_TxCpltCallback+0xc>)
 80015a0:	2000      	movs	r0, #0
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80015a6:	bd10      	pop	{r4, pc}
 80015a8:	200003dc 	.word	0x200003dc

080015ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 80015ac:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 80015ae:	4c0a      	ldr	r4, [pc, #40]	@ (80015d8 <HAL_UART_RxCpltCallback+0x2c>)
{
 80015b0:	0005      	movs	r5, r0
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 80015b2:	6863      	ldr	r3, [r4, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <HAL_UART_RxCpltCallback+0x1e>
 80015b8:	0002      	movs	r2, r0
 80015ba:	3208      	adds	r2, #8
 80015bc:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80015be:	2a00      	cmp	r2, #0
 80015c0:	d103      	bne.n	80015ca <HAL_UART_RxCpltCallback+0x1e>
  {
    RxCpltCallback(&charRx, 1, 0);
 80015c2:	0020      	movs	r0, r4
 80015c4:	2101      	movs	r1, #1
 80015c6:	3008      	adds	r0, #8
 80015c8:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 80015ca:	0021      	movs	r1, r4
 80015cc:	0028      	movs	r0, r5
 80015ce:	2201      	movs	r2, #1
 80015d0:	3108      	adds	r1, #8
 80015d2:	f002 fef3 	bl	80043bc <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
 80015d8:	200003dc 	.word	0x200003dc

080015dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80015dc:	480d      	ldr	r0, [pc, #52]	@ (8001614 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80015de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e0:	480d      	ldr	r0, [pc, #52]	@ (8001618 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e2:	490e      	ldr	r1, [pc, #56]	@ (800161c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001620 <LoopForever+0xe>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f8:	4c0b      	ldr	r4, [pc, #44]	@ (8001628 <LoopForever+0x16>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001606:	f000 fae5 	bl	8001bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160a:	f004 ff75 	bl	80064f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160e:	f7ff facf 	bl	8000bb0 <main>

08001612 <LoopForever>:

LoopForever:
    b LoopForever
 8001612:	e7fe      	b.n	8001612 <LoopForever>
   ldr   r0, =_estack
 8001614:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001620:	08006af0 	.word	0x08006af0
  ldr r2, =_sbss
 8001624:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001628:	200009dc 	.word	0x200009dc

0800162c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_COMP_IRQHandler>
	...

08001630 <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8001630:	23fa      	movs	r3, #250	@ 0xfa
{
 8001632:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001634:	0005      	movs	r5, r0
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8001636:	009b      	lsls	r3, r3, #2
{
 8001638:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	4806      	ldr	r0, [pc, #24]	@ (8001658 <BSP_SPI1_SendRecv+0x28>)
 800163e:	0013      	movs	r3, r2
 8001640:	000a      	movs	r2, r1
 8001642:	0029      	movs	r1, r5
 8001644:	f001 ff8e 	bl	8003564 <HAL_SPI_TransmitReceive>
 8001648:	2800      	cmp	r0, #0
 800164a:	d101      	bne.n	8001650 <BSP_SPI1_SendRecv+0x20>
  {
    ret = len;
 800164c:	0020      	movs	r0, r4
  }
  return ret;
}
 800164e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001650:	2006      	movs	r0, #6
 8001652:	4240      	negs	r0, r0
  return ret;
 8001654:	e7fb      	b.n	800164e <BSP_SPI1_SendRecv+0x1e>
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	200003e8 	.word	0x200003e8

0800165c <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <MX_SPI1_Init+0x54>)
{
 800165e:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 8001660:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001662:	2382      	movs	r3, #130	@ 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001664:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 800166a:	33fc      	adds	r3, #252	@ 0xfc
 800166c:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800166e:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001670:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001672:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001674:	6145      	str	r5, [r0, #20]
{
 8001676:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8001678:	f001 fa4a 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 800167c:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 800167e:	4a0d      	ldr	r2, [pc, #52]	@ (80016b4 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8001680:	490d      	ldr	r1, [pc, #52]	@ (80016b8 <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8001682:	4290      	cmp	r0, r2
 8001684:	d80d      	bhi.n	80016a2 <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001686:	2300      	movs	r3, #0
 8001688:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800168a:	6263      	str	r3, [r4, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168c:	62a3      	str	r3, [r4, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 800168e:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8001690:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8001692:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001694:	0020      	movs	r0, r4
 8001696:	f001 fefd 	bl	8003494 <HAL_SPI_Init>
 800169a:	1e43      	subs	r3, r0, #1
 800169c:	4198      	sbcs	r0, r3
  return ret;
 800169e:	b2c0      	uxtb	r0, r0
}
 80016a0:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 80016a2:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 80016a4:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 80016a6:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d0ec      	beq.n	8001686 <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 80016ac:	0840      	lsrs	r0, r0, #1
 80016ae:	e7e8      	b.n	8001682 <MX_SPI1_Init+0x26>
 80016b0:	40013000 	.word	0x40013000
 80016b4:	00989680 	.word	0x00989680
 80016b8:	080065ec 	.word	0x080065ec

080016bc <BSP_SPI1_Init>:
{
 80016bc:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 80016be:	4d1b      	ldr	r5, [pc, #108]	@ (800172c <BSP_SPI1_Init+0x70>)
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <BSP_SPI1_Init+0x74>)
{
 80016c2:	b087      	sub	sp, #28
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80016c4:	0028      	movs	r0, r5
  hspi1.Instance  = SPI1;
 80016c6:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80016c8:	f002 f8a2 	bl	8003810 <HAL_SPI_GetState>
 80016cc:	1e04      	subs	r4, r0, #0
 80016ce:	d002      	beq.n	80016d6 <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 80016d0:	2000      	movs	r0, #0
}
 80016d2:	b007      	add	sp, #28
 80016d4:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 80016d6:	2380      	movs	r3, #128	@ 0x80
 80016d8:	4a16      	ldr	r2, [pc, #88]	@ (8001734 <BSP_SPI1_Init+0x78>)
 80016da:	015b      	lsls	r3, r3, #5
 80016dc:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80016de:	430b      	orrs	r3, r1
 80016e0:	6353      	str	r3, [r2, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80016e6:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80016e8:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	3301      	adds	r3, #1
 80016ee:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80016f0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80016f2:	337d      	adds	r3, #125	@ 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80016f4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80016f6:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80016f8:	f000 fc78 	bl	8001fec <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80016fc:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80016fe:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001700:	a901      	add	r1, sp, #4
 8001702:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001704:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001706:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001708:	f000 fc70 	bl	8001fec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800170c:	2308      	movs	r3, #8
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800170e:	480a      	ldr	r0, [pc, #40]	@ (8001738 <BSP_SPI1_Init+0x7c>)
 8001710:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001712:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001714:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001716:	f000 fc69 	bl	8001fec <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800171a:	0028      	movs	r0, r5
 800171c:	f7ff ff9e 	bl	800165c <MX_SPI1_Init>
 8001720:	2800      	cmp	r0, #0
 8001722:	d0d5      	beq.n	80016d0 <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8001724:	2008      	movs	r0, #8
 8001726:	4240      	negs	r0, r0
  return ret;
 8001728:	e7d3      	b.n	80016d2 <BSP_SPI1_Init+0x16>
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	200003e8 	.word	0x200003e8
 8001730:	40013000 	.word	0x40013000
 8001734:	40021000 	.word	0x40021000
 8001738:	50000400 	.word	0x50000400

0800173c <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800173c:	b500      	push	{lr}
 800173e:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001740:	2803      	cmp	r0, #3
 8001742:	d80c      	bhi.n	800175e <BSP_LED_Init+0x22>
 8001744:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <BSP_LED_Init+0x78>)
 8001746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001748:	f7fe fce6 	bl	8000118 <__gnu_thumb1_case_uqi>
 800174c:	2b231b02 	.word	0x2b231b02
 8001750:	2102      	movs	r1, #2
 8001752:	430a      	orrs	r2, r1
 8001754:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001758:	400b      	ands	r3, r1
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800175e:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <BSP_LED_Init+0x7c>)
 8001760:	0042      	lsls	r2, r0, #1
 8001762:	5ad3      	ldrh	r3, [r2, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001764:	0080      	lsls	r0, r0, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8001766:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	3303      	adds	r3, #3
 8001772:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <BSP_LED_Init+0x80>)
 8001776:	a905      	add	r1, sp, #20
 8001778:	58c0      	ldr	r0, [r0, r3]
 800177a:	f000 fc37 	bl	8001fec <HAL_GPIO_Init>
}
 800177e:	b00b      	add	sp, #44	@ 0x2c
 8001780:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8001782:	2101      	movs	r1, #1
 8001784:	430a      	orrs	r2, r1
 8001786:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178a:	400b      	ands	r3, r1
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	9b02      	ldr	r3, [sp, #8]
 8001790:	e7e5      	b.n	800175e <BSP_LED_Init+0x22>
 8001792:	2102      	movs	r1, #2
 8001794:	430a      	orrs	r2, r1
 8001796:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179a:	400b      	ands	r3, r1
 800179c:	9303      	str	r3, [sp, #12]
 800179e:	9b03      	ldr	r3, [sp, #12]
 80017a0:	e7dd      	b.n	800175e <BSP_LED_Init+0x22>
 80017a2:	2102      	movs	r1, #2
 80017a4:	430a      	orrs	r2, r1
 80017a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017aa:	400b      	ands	r3, r1
 80017ac:	9304      	str	r3, [sp, #16]
 80017ae:	9b04      	ldr	r3, [sp, #16]
 80017b0:	e7d5      	b.n	800175e <BSP_LED_Init+0x22>
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	40021000 	.word	0x40021000
 80017b8:	0800660c 	.word	0x0800660c
 80017bc:	20000000 	.word	0x20000000

080017c0 <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80017c0:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <BSP_LED_Off+0x18>)
{
 80017c2:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80017c4:	0042      	lsls	r2, r0, #1
 80017c6:	5ad1      	ldrh	r1, [r2, r3]
 80017c8:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <BSP_LED_Off+0x1c>)
 80017ca:	0080      	lsls	r0, r0, #2
 80017cc:	2200      	movs	r2, #0
 80017ce:	58c0      	ldr	r0, [r0, r3]
 80017d0:	f000 fd4e 	bl	8002270 <HAL_GPIO_WritePin>
}
 80017d4:	bd10      	pop	{r4, pc}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	0800660c 	.word	0x0800660c
 80017dc:	20000000 	.word	0x20000000

080017e0 <BSP_LED_Toggle>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <BSP_LED_Toggle+0x14>)
{
 80017e2:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80017e4:	0042      	lsls	r2, r0, #1
 80017e6:	5ad1      	ldrh	r1, [r2, r3]
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <BSP_LED_Toggle+0x18>)
 80017ea:	0080      	lsls	r0, r0, #2
 80017ec:	58c0      	ldr	r0, [r0, r3]
 80017ee:	f000 fd45 	bl	800227c <HAL_GPIO_TogglePin>
}
 80017f2:	bd10      	pop	{r4, pc}
 80017f4:	0800660c 	.word	0x0800660c
 80017f8:	20000000 	.word	0x20000000

080017fc <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 80017fc:	2005      	movs	r0, #5
 80017fe:	4770      	bx	lr

08001800 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8001800:	0002      	movs	r2, r0
 8001802:	b510      	push	{r4, lr}

  if (state == SET)
 8001804:	2801      	cmp	r0, #1
 8001806:	d109      	bne.n	800181c <CMWX1ZZABZ0XX_RADIO_SetXO+0x1c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8001808:	2180      	movs	r1, #128	@ 0x80
 800180a:	20a0      	movs	r0, #160	@ 0xa0
 800180c:	0149      	lsls	r1, r1, #5
 800180e:	05c0      	lsls	r0, r0, #23
 8001810:	f000 fd2e 	bl	8002270 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8001814:	2005      	movs	r0, #5
 8001816:	f7ff fd6b 	bl	80012f0 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 800181a:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 800181c:	2180      	movs	r1, #128	@ 0x80
 800181e:	20a0      	movs	r0, #160	@ 0xa0
 8001820:	2200      	movs	r2, #0
 8001822:	0149      	lsls	r1, r1, #5
 8001824:	05c0      	lsls	r0, r0, #23
 8001826:	f000 fd23 	bl	8002270 <HAL_GPIO_WritePin>
}
 800182a:	e7f6      	b.n	800181a <CMWX1ZZABZ0XX_RADIO_SetXO+0x1a>

0800182c <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 800182c:	2300      	movs	r3, #0
{
 800182e:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8001830:	2602      	movs	r6, #2
  RADIO_DIO_1_GPIO_CLK_ENABLE();
  RADIO_DIO_2_GPIO_CLK_ENABLE();
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8001832:	2204      	movs	r2, #4
{
 8001834:	b097      	sub	sp, #92	@ 0x5c
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8001836:	4c66      	ldr	r4, [pc, #408]	@ (80019d0 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a4>)
  GPIO_InitTypeDef initStruct = {0};
 8001838:	9310      	str	r3, [sp, #64]	@ 0x40
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 800183a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
 800183c:	2103      	movs	r1, #3
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 800183e:	4333      	orrs	r3, r6
 8001840:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001842:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001844:	2788      	movs	r7, #136	@ 0x88
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8001846:	4033      	ands	r3, r6
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800184c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    initStruct.Pin = RADIO_DIO_PIN[i];
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800184e:	a80c      	add	r0, sp, #48	@ 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8001850:	4333      	orrs	r3, r6
 8001852:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001854:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001856:	037f      	lsls	r7, r7, #13
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8001858:	4033      	ands	r3, r6
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 800185e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001860:	2501      	movs	r5, #1
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8001862:	4333      	orrs	r3, r6
 8001864:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001866:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001868:	4033      	ands	r3, r6
 800186a:	9303      	str	r3, [sp, #12]
 800186c:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 800186e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001870:	4313      	orrs	r3, r2
 8001872:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001874:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8001876:	910f      	str	r1, [sp, #60]	@ 0x3c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8001878:	4013      	ands	r3, r2
 800187a:	9304      	str	r3, [sp, #16]
 800187c:	9b04      	ldr	r3, [sp, #16]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800187e:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001880:	0001      	movs	r1, r0
 8001882:	4854      	ldr	r0, [pc, #336]	@ (80019d4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001884:	970d      	str	r7, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001886:	930c      	str	r3, [sp, #48]	@ 0x30
  initStruct.Pull = GPIO_PULLDOWN;
 8001888:	960e      	str	r6, [sp, #56]	@ 0x38
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800188a:	f000 fbaf 	bl	8001fec <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 800188e:	23c4      	movs	r3, #196	@ 0xc4
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001890:	a80c      	add	r0, sp, #48	@ 0x30
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001892:	039b      	lsls	r3, r3, #14
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001894:	0001      	movs	r1, r0
 8001896:	484f      	ldr	r0, [pc, #316]	@ (80019d4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001898:	930d      	str	r3, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 800189a:	960c      	str	r6, [sp, #48]	@ 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800189c:	f000 fba6 	bl	8001fec <HAL_GPIO_Init>
 80018a0:	a80c      	add	r0, sp, #48	@ 0x30
 80018a2:	0001      	movs	r1, r0
 80018a4:	484b      	ldr	r0, [pc, #300]	@ (80019d4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80018a6:	970d      	str	r7, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80018a8:	950c      	str	r5, [sp, #48]	@ 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80018aa:	f000 fb9f 	bl	8001fec <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 80018ae:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80018b0:	a80c      	add	r0, sp, #48	@ 0x30
 80018b2:	0001      	movs	r1, r0
    initStruct.Pin = RADIO_DIO_PIN[i];
 80018b4:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80018b6:	4848      	ldr	r0, [pc, #288]	@ (80019d8 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80018b8:	970d      	str	r7, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80018ba:	930c      	str	r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80018bc:	f000 fb96 	bl	8001fec <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 80018c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80018c2:	27a0      	movs	r7, #160	@ 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 80018c4:	4333      	orrs	r3, r6
 80018c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80018c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2103      	movs	r1, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 80018cc:	4033      	ands	r3, r6
 80018ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80018d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 80018d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80018d4:	05ff      	lsls	r7, r7, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 80018d6:	432b      	orrs	r3, r5
 80018d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80018da:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80018dc:	a811      	add	r0, sp, #68	@ 0x44
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 80018de:	402b      	ands	r3, r5
 80018e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80018e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 80018e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80018e6:	432b      	orrs	r3, r5
 80018e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80018ea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	9114      	str	r1, [sp, #80]	@ 0x50
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 80018ee:	402b      	ands	r3, r5
 80018f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80018f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 80018f4:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80018f6:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 80018f8:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80018fa:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80018fc:	3380      	adds	r3, #128	@ 0x80
 80018fe:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	9612      	str	r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001902:	9613      	str	r6, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001904:	f000 fb72 	bl	8001fec <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8001908:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800190a:	a811      	add	r0, sp, #68	@ 0x44
 800190c:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 800190e:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001910:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8001912:	3340      	adds	r3, #64	@ 0x40
 8001914:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001916:	f000 fb69 	bl	8001fec <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 800191a:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800191c:	a811      	add	r0, sp, #68	@ 0x44
 800191e:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8001920:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001922:	482c      	ldr	r0, [pc, #176]	@ (80019d4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8001924:	3308      	adds	r3, #8
 8001926:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001928:	f000 fb60 	bl	8001fec <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 800192c:	2080      	movs	r0, #128	@ 0x80
 800192e:	0200      	lsls	r0, r0, #8
 8001930:	900c      	str	r0, [sp, #48]	@ 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	950d      	str	r5, [sp, #52]	@ 0x34
  initStruct.Pull = GPIO_PULLUP;
 8001934:	950e      	str	r5, [sp, #56]	@ 0x38
  RADIO_NSS_CLK_ENABLE();
 8001936:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8001938:	a80c      	add	r0, sp, #48	@ 0x30
  RADIO_NSS_CLK_ENABLE();
 800193a:	432b      	orrs	r3, r5
 800193c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800193e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8001940:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 8001942:	402b      	ands	r3, r5
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8001944:	0038      	movs	r0, r7
  RADIO_NSS_CLK_ENABLE();
 8001946:	9305      	str	r3, [sp, #20]
 8001948:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 800194a:	f000 fb4f 	bl	8001fec <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800194e:	2180      	movs	r1, #128	@ 0x80
 8001950:	002a      	movs	r2, r5
 8001952:	0038      	movs	r0, r7
 8001954:	0209      	lsls	r1, r1, #8
 8001956:	f000 fc8b 	bl	8002270 <HAL_GPIO_WritePin>
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 800195a:	2204      	movs	r2, #4
  RADIO_TCXO_VCC_CLK_ENABLE();
 800195c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 800195e:	2103      	movs	r1, #3
  RADIO_TCXO_VCC_CLK_ENABLE();
 8001960:	432b      	orrs	r3, r5
 8001962:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001964:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8001966:	0038      	movs	r0, r7
  RADIO_TCXO_VCC_CLK_ENABLE();
 8001968:	402b      	ands	r3, r5
 800196a:	9306      	str	r3, [sp, #24]
 800196c:	9b06      	ldr	r3, [sp, #24]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 800196e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001970:	432b      	orrs	r3, r5
 8001972:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001974:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001976:	402b      	ands	r3, r5
 8001978:	9307      	str	r3, [sp, #28]
 800197a:	9b07      	ldr	r3, [sp, #28]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 800197c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800197e:	4313      	orrs	r3, r2
 8001980:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001982:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001984:	4013      	ands	r3, r2
 8001986:	9308      	str	r3, [sp, #32]
 8001988:	9b08      	ldr	r3, [sp, #32]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 800198a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800198c:	4313      	orrs	r3, r2
 800198e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001990:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001992:	0014      	movs	r4, r2
 8001994:	4013      	ands	r3, r2
 8001996:	9311      	str	r3, [sp, #68]	@ 0x44
 8001998:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  initStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	930e      	str	r3, [sp, #56]	@ 0x38
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 800199e:	2380      	movs	r3, #128	@ 0x80
  initStruct.Speed = GPIO_SPEED_HIGH;
 80019a0:	910f      	str	r1, [sp, #60]	@ 0x3c
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80019a2:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80019a4:	a90c      	add	r1, sp, #48	@ 0x30
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80019a6:	930c      	str	r3, [sp, #48]	@ 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	950d      	str	r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80019aa:	f000 fb1f 	bl	8001fec <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 80019ae:	0038      	movs	r0, r7
 80019b0:	a90c      	add	r1, sp, #48	@ 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 80019b2:	960c      	str	r6, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 80019b4:	f000 fb1a 	bl	8001fec <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 80019b8:	a90c      	add	r1, sp, #48	@ 0x30
 80019ba:	4807      	ldr	r0, [pc, #28]	@ (80019d8 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 80019bc:	960c      	str	r6, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 80019be:	f000 fb15 	bl	8001fec <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 80019c2:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
 80019c4:	a90c      	add	r1, sp, #48	@ 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 80019c6:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 80019c8:	f000 fb10 	bl	8001fec <HAL_GPIO_Init>
}
 80019cc:	b017      	add	sp, #92	@ 0x5c
 80019ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d0:	40021000 	.word	0x40021000
 80019d4:	50000400 	.word	0x50000400
 80019d8:	50000800 	.word	0x50000800

080019dc <CMWX1ZZABZ0XX_RADIO_IoDeInit>:
{
 80019dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 80019de:	2608      	movs	r6, #8
{
 80019e0:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef initStruct = {0};
 80019e2:	0032      	movs	r2, r6
 80019e4:	2100      	movs	r1, #0
 80019e6:	a803      	add	r0, sp, #12
    initStruct.Mode = RADIO_DIO_MODE[i];
 80019e8:	2788      	movs	r7, #136	@ 0x88
  GPIO_InitTypeDef initStruct = {0};
 80019ea:	f004 fd6b 	bl	80064c4 <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 80019ee:	2502      	movs	r5, #2
    initStruct.Pin = RADIO_DIO_PIN[i];
 80019f0:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80019f2:	4c23      	ldr	r4, [pc, #140]	@ (8001a80 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa4>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80019f4:	037f      	lsls	r7, r7, #13
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80019f6:	4669      	mov	r1, sp
 80019f8:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_PULLDOWN;
 80019fa:	9502      	str	r5, [sp, #8]
    initStruct.Mode = RADIO_DIO_MODE[i];
 80019fc:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80019fe:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a00:	f000 faf4 	bl	8001fec <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001a04:	23c4      	movs	r3, #196	@ 0xc4
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a06:	4669      	mov	r1, sp
 8001a08:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001a0a:	039b      	lsls	r3, r3, #14
 8001a0c:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001a0e:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a10:	f000 faec 	bl	8001fec <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001a14:	2301      	movs	r3, #1
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a16:	4669      	mov	r1, sp
 8001a18:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001a1a:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001a1c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a1e:	f000 fae5 	bl	8001fec <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001a22:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a24:	4669      	mov	r1, sp
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001a26:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a28:	4816      	ldr	r0, [pc, #88]	@ (8001a84 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001a2a:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001a2c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a2e:	f000 fadd 	bl	8001fec <HAL_GPIO_Init>
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a32:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001a34:	25a0      	movs	r5, #160	@ 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a36:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8001a38:	2780      	movs	r7, #128	@ 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001a3a:	05ed      	lsls	r5, r5, #23
 8001a3c:	0028      	movs	r0, r5
 8001a3e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8001a42:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001a44:	f000 fad2 	bl	8001fec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8001a48:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001a4a:	0028      	movs	r0, r5
 8001a4c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8001a4e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001a50:	f000 facc 	bl	8001fec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001a54:	0020      	movs	r0, r4
 8001a56:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8001a58:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001a5a:	f000 fac7 	bl	8001fec <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8001a5e:	0039      	movs	r1, r7
 8001a60:	0028      	movs	r0, r5
 8001a62:	2200      	movs	r2, #0
 8001a64:	f000 fc04 	bl	8002270 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8001a68:	0028      	movs	r0, r5
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2140      	movs	r1, #64	@ 0x40
 8001a6e:	f000 fbff 	bl	8002270 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	0031      	movs	r1, r6
 8001a76:	0020      	movs	r0, r4
 8001a78:	f000 fbfa 	bl	8002270 <HAL_GPIO_WritePin>
}
 8001a7c:	b00b      	add	sp, #44	@ 0x2c
 8001a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a80:	50000400 	.word	0x50000400
 8001a84:	50000800 	.word	0x50000800

08001a88 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:
{
 8001a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a8a:	9000      	str	r0, [sp, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8001a90:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a92:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8001a94:	2400      	movs	r4, #0
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 8001a96:	4e11      	ldr	r6, [pc, #68]	@ (8001adc <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x54>)
 8001a98:	4d11      	ldr	r5, [pc, #68]	@ (8001ae0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x58>)
 8001a9a:	00e3      	lsls	r3, r4, #3
 8001a9c:	18f6      	adds	r6, r6, r3
 8001a9e:	00a7      	lsls	r7, r4, #2
 8001aa0:	5979      	ldr	r1, [r7, r5]
 8001aa2:	0030      	movs	r0, r6
 8001aa4:	f000 fa89 	bl	8001fba <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8001aa8:	9b00      	ldr	r3, [sp, #0]
 8001aaa:	2100      	movs	r1, #0
 8001aac:	59da      	ldr	r2, [r3, r7]
 8001aae:	0030      	movs	r0, r6
 8001ab0:	f000 fa7c 	bl	8001fac <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8001ab4:	002b      	movs	r3, r5
 8001ab6:	3310      	adds	r3, #16
 8001ab8:	56e6      	ldrsb	r6, [r4, r3]
 8001aba:	3514      	adds	r5, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	0030      	movs	r0, r6
 8001ac0:	5979      	ldr	r1, [r7, r5]
 8001ac2:	f000 f8ed 	bl	8001ca0 <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8001ac6:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8001ac8:	0030      	movs	r0, r6
 8001aca:	f000 f913 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8001ace:	2c04      	cmp	r4, #4
 8001ad0:	d1e1      	bne.n	8001a96 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ad2:	9b01      	ldr	r3, [sp, #4]
 8001ad4:	f383 8810 	msr	PRIMASK, r3
}
 8001ad8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	20000440 	.word	0x20000440
 8001ae0:	08006618 	.word	0x08006618

08001ae4 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
}
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	4770      	bx	lr

08001ae8 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:
  switch (state)
 8001ae8:	3801      	subs	r0, #1
{
 8001aea:	b510      	push	{r4, lr}
  switch (state)
 8001aec:	2803      	cmp	r0, #3
 8001aee:	d811      	bhi.n	8001b14 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x2c>
 8001af0:	f7fe fb12 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001af4:	080d0902 	.word	0x080d0902
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 8001af8:	20a0      	movs	r0, #160	@ 0xa0
 8001afa:	2201      	movs	r2, #1
 8001afc:	2102      	movs	r1, #2
 8001afe:	05c0      	lsls	r0, r0, #23
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8001b00:	f000 fbb6 	bl	8002270 <HAL_GPIO_WritePin>
}
 8001b04:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	2104      	movs	r1, #4
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8001b0a:	4809      	ldr	r0, [pc, #36]	@ (8001b30 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 8001b0c:	e7f8      	b.n	8001b00 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 8001b0e:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8001b10:	2102      	movs	r1, #2
 8001b12:	e7fa      	b.n	8001b0a <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x22>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8001b14:	20a0      	movs	r0, #160	@ 0xa0
 8001b16:	2200      	movs	r2, #0
 8001b18:	2102      	movs	r1, #2
 8001b1a:	05c0      	lsls	r0, r0, #23
 8001b1c:	f000 fba8 	bl	8002270 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2104      	movs	r1, #4
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 8001b26:	f000 fba3 	bl	8002270 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	e7f0      	b.n	8001b10 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x28>
 8001b2e:	46c0      	nop			@ (mov r8, r8)
 8001b30:	50000800 	.word	0x50000800

08001b34 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:
}
 8001b34:	2001      	movs	r0, #1
 8001b36:	4770      	bx	lr

08001b38 <CMWX1ZZABZ0XX_RADIO_Reset>:
{
 8001b38:	b530      	push	{r4, r5, lr}
 8001b3a:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 8001b3c:	220c      	movs	r2, #12
 8001b3e:	2100      	movs	r1, #0
 8001b40:	a803      	add	r0, sp, #12
 8001b42:	f004 fcbf 	bl	80064c4 <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 8001b48:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8001b80 <CMWX1ZZABZ0XX_RADIO_Reset+0x48>)
 8001b4c:	a901      	add	r1, sp, #4
 8001b4e:	0028      	movs	r0, r5
  initStruct.Speed = GPIO_SPEED_HIGH;
 8001b50:	9304      	str	r3, [sp, #16]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	9402      	str	r4, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 8001b54:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001b56:	f000 fa49 	bl	8001fec <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	0021      	movs	r1, r4
 8001b5e:	0028      	movs	r0, r5
 8001b60:	f000 fb86 	bl	8002270 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001b64:	0020      	movs	r0, r4
 8001b66:	f7ff fbc3 	bl	80012f0 <HAL_Delay>
  initStruct.Mode = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001b6c:	0028      	movs	r0, r5
 8001b6e:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_NOPULL;
 8001b70:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001b72:	f000 fa3b 	bl	8001fec <HAL_GPIO_Init>
  HAL_Delay(6);
 8001b76:	2006      	movs	r0, #6
 8001b78:	f7ff fbba 	bl	80012f0 <HAL_Delay>
}
 8001b7c:	b007      	add	sp, #28
 8001b7e:	bd30      	pop	{r4, r5, pc}
 8001b80:	50000800 	.word	0x50000800

08001b84 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:
{
 8001b84:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 8001b86:	f7ff fd99 	bl	80016bc <BSP_SPI1_Init>
}
 8001b8a:	bd10      	pop	{r4, pc}

08001b8c <CMWX1ZZABZ0XX_RADIO_SendRecv>:
{
 8001b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8001b8e:	240e      	movs	r4, #14
{
 8001b90:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8001b92:	446c      	add	r4, sp
{
 8001b94:	80d8      	strh	r0, [r3, #6]
 8001b96:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	0021      	movs	r1, r4
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff fd47 	bl	8001630 <BSP_SPI1_SendRecv>
  return rxData;
 8001ba2:	8820      	ldrh	r0, [r4, #0]
}
 8001ba4:	b004      	add	sp, #16
 8001ba6:	bd10      	pop	{r4, pc}

08001ba8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:
{
 8001ba8:	0002      	movs	r2, r0
 8001baa:	b510      	push	{r4, lr}
  if (state == 0)
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d106      	bne.n	8001bbe <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x16>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8001bb0:	2180      	movs	r1, #128	@ 0x80
 8001bb2:	20a0      	movs	r0, #160	@ 0xa0
 8001bb4:	0209      	lsls	r1, r1, #8
 8001bb6:	05c0      	lsls	r0, r0, #23
 8001bb8:	f000 fb5a 	bl	8002270 <HAL_GPIO_WritePin>
}
 8001bbc:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	e7f6      	b.n	8001bb0 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x8>
	...

08001bc4 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:
{
 8001bc4:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	4801      	ldr	r0, [pc, #4]	@ (8001bd0 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0xc>)
 8001bca:	f000 fb4b 	bl	8002264 <HAL_GPIO_ReadPin>
}
 8001bce:	bd10      	pop	{r4, pc}
 8001bd0:	50000400 	.word	0x50000400

08001bd4 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001bd4:	2280      	movs	r2, #128	@ 0x80
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <SystemInit+0x44>)
 8001bd8:	0052      	lsls	r2, r2, #1
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	490e      	ldr	r1, [pc, #56]	@ (8001c1c <SystemInit+0x48>)
 8001be4:	400a      	ands	r2, r1
 8001be6:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	490d      	ldr	r1, [pc, #52]	@ (8001c20 <SystemInit+0x4c>)
 8001bec:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001bee:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001bf0:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	490a      	ldr	r1, [pc, #40]	@ (8001c24 <SystemInit+0x50>)
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	4909      	ldr	r1, [pc, #36]	@ (8001c28 <SystemInit+0x54>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c0c:	2280      	movs	r2, #128	@ 0x80
 8001c0e:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <SystemInit+0x58>)
 8001c10:	0512      	lsls	r2, r2, #20
 8001c12:	609a      	str	r2, [r3, #8]
#endif
}
 8001c14:	4770      	bx	lr
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	88ff400c 	.word	0x88ff400c
 8001c20:	fef6fff6 	.word	0xfef6fff6
 8001c24:	fffbffff 	.word	0xfffbffff
 8001c28:	ff02ffff 	.word	0xff02ffff
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c30:	2302      	movs	r3, #2
 8001c32:	4a08      	ldr	r2, [pc, #32]	@ (8001c54 <HAL_Init+0x24>)
{
 8001c34:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c36:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c38:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c3e:	f7ff fb51 	bl	80012e4 <HAL_InitTick>
 8001c42:	1e04      	subs	r4, r0, #0
 8001c44:	d103      	bne.n	8001c4e <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c46:	f7ff fa51 	bl	80010ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8001c4a:	0020      	movs	r0, r4
 8001c4c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001c4e:	2401      	movs	r4, #1
 8001c50:	e7fb      	b.n	8001c4a <HAL_Init+0x1a>
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	40022000 	.word	0x40022000

08001c58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c58:	4a03      	ldr	r2, [pc, #12]	@ (8001c68 <HAL_IncTick+0x10>)
 8001c5a:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <HAL_IncTick+0x14>)
 8001c5c:	6811      	ldr	r1, [r2, #0]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	185b      	adds	r3, r3, r1
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	4770      	bx	lr
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	20000460 	.word	0x20000460
 8001c6c:	20000018 	.word	0x20000018

08001c70 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001c70:	2101      	movs	r1, #1
 8001c72:	4a02      	ldr	r2, [pc, #8]	@ (8001c7c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8001c74:	6853      	ldr	r3, [r2, #4]
 8001c76:	438b      	bics	r3, r1
 8001c78:	6053      	str	r3, [r2, #4]
}
 8001c7a:	4770      	bx	lr
 8001c7c:	40015800 	.word	0x40015800

08001c80 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001c80:	2102      	movs	r1, #2
 8001c82:	4a02      	ldr	r2, [pc, #8]	@ (8001c8c <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8001c84:	6853      	ldr	r3, [r2, #4]
 8001c86:	438b      	bics	r3, r1
 8001c88:	6053      	str	r3, [r2, #4]
}
 8001c8a:	4770      	bx	lr
 8001c8c:	40015800 	.word	0x40015800

08001c90 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001c90:	2104      	movs	r1, #4
 8001c92:	4a02      	ldr	r2, [pc, #8]	@ (8001c9c <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8001c94:	6853      	ldr	r3, [r2, #4]
 8001c96:	438b      	bics	r3, r1
 8001c98:	6053      	str	r3, [r2, #4]
}
 8001c9a:	4770      	bx	lr
 8001c9c:	40015800 	.word	0x40015800

08001ca0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca0:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ca2:	24ff      	movs	r4, #255	@ 0xff
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	000b      	movs	r3, r1
 8001ca8:	0021      	movs	r1, r4
 8001caa:	4002      	ands	r2, r0
 8001cac:	00d2      	lsls	r2, r2, #3
 8001cae:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cb0:	019b      	lsls	r3, r3, #6
 8001cb2:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb4:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cb6:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	db0a      	blt.n	8001cd2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cbc:	24c0      	movs	r4, #192	@ 0xc0
 8001cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8001cec <HAL_NVIC_SetPriority+0x4c>)
 8001cc0:	0880      	lsrs	r0, r0, #2
 8001cc2:	0080      	lsls	r0, r0, #2
 8001cc4:	1880      	adds	r0, r0, r2
 8001cc6:	00a4      	lsls	r4, r4, #2
 8001cc8:	5902      	ldr	r2, [r0, r4]
 8001cca:	400a      	ands	r2, r1
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001cd0:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	4010      	ands	r0, r2
 8001cd6:	3808      	subs	r0, #8
 8001cd8:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <HAL_NVIC_SetPriority+0x50>)
 8001cda:	0880      	lsrs	r0, r0, #2
 8001cdc:	0080      	lsls	r0, r0, #2
 8001cde:	1880      	adds	r0, r0, r2
 8001ce0:	69c2      	ldr	r2, [r0, #28]
 8001ce2:	4011      	ands	r1, r2
 8001ce4:	4319      	orrs	r1, r3
 8001ce6:	61c1      	str	r1, [r0, #28]
 8001ce8:	e7f2      	b.n	8001cd0 <HAL_NVIC_SetPriority+0x30>
 8001cea:	46c0      	nop			@ (mov r8, r8)
 8001cec:	e000e100 	.word	0xe000e100
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	2800      	cmp	r0, #0
 8001cf6:	db05      	blt.n	8001d04 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf8:	231f      	movs	r3, #31
 8001cfa:	4018      	ands	r0, r3
 8001cfc:	3b1e      	subs	r3, #30
 8001cfe:	4083      	lsls	r3, r0
 8001d00:	4a01      	ldr	r2, [pc, #4]	@ (8001d08 <HAL_NVIC_EnableIRQ+0x14>)
 8001d02:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d04:	4770      	bx	lr
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	db09      	blt.n	8001d24 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d10:	231f      	movs	r3, #31
 8001d12:	4018      	ands	r0, r3
 8001d14:	3b1e      	subs	r3, #30
 8001d16:	4083      	lsls	r3, r0
 8001d18:	4a03      	ldr	r2, [pc, #12]	@ (8001d28 <HAL_NVIC_DisableIRQ+0x1c>)
 8001d1a:	67d3      	str	r3, [r2, #124]	@ 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d20:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001d24:	4770      	bx	lr
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	e000e104 	.word	0xe000e104

08001d2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2e:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8001d30:	2001      	movs	r0, #1
  if(hdma == NULL)
 8001d32:	2c00      	cmp	r4, #0
 8001d34:	d035      	beq.n	8001da2 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d36:	6825      	ldr	r5, [r4, #0]
 8001d38:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <HAL_DMA_Init+0x78>)
 8001d3a:	2114      	movs	r1, #20
 8001d3c:	18e8      	adds	r0, r5, r3
 8001d3e:	f7fe f9f5 	bl	800012c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001d42:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d44:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8001d46:	6423      	str	r3, [r4, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d4c:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d4e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d50:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d52:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d54:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d56:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8001d58:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8001d5c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5e:	433b      	orrs	r3, r7
 8001d60:	6967      	ldr	r7, [r4, #20]
 8001d62:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d64:	69a7      	ldr	r7, [r4, #24]
 8001d66:	433b      	orrs	r3, r7
 8001d68:	69e7      	ldr	r7, [r4, #28]
 8001d6a:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6c:	6a27      	ldr	r7, [r4, #32]
 8001d6e:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8001d70:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d72:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001d74:	2380      	movs	r3, #128	@ 0x80
 8001d76:	01db      	lsls	r3, r3, #7
 8001d78:	4299      	cmp	r1, r3
 8001d7a:	d00c      	beq.n	8001d96 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d7c:	251c      	movs	r5, #28
 8001d7e:	4028      	ands	r0, r5
 8001d80:	3d0d      	subs	r5, #13
 8001d82:	4085      	lsls	r5, r0
 8001d84:	490a      	ldr	r1, [pc, #40]	@ (8001db0 <HAL_DMA_Init+0x84>)
 8001d86:	680b      	ldr	r3, [r1, #0]
 8001d88:	43ab      	bics	r3, r5
 8001d8a:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d8c:	6863      	ldr	r3, [r4, #4]
 8001d8e:	680d      	ldr	r5, [r1, #0]
 8001d90:	4083      	lsls	r3, r0
 8001d92:	432b      	orrs	r3, r5
 8001d94:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d96:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001d98:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d9a:	63e0      	str	r0, [r4, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d9c:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8001d9e:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8001da0:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8001da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001da4:	bffdfff8 	.word	0xbffdfff8
 8001da8:	40020000 	.word	0x40020000
 8001dac:	ffff800f 	.word	0xffff800f
 8001db0:	400200a8 	.word	0x400200a8

08001db4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001db4:	b570      	push	{r4, r5, r6, lr}
 8001db6:	2501      	movs	r5, #1
 8001db8:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 8001dba:	0028      	movs	r0, r5
  if (NULL == hdma )
 8001dbc:	2c00      	cmp	r4, #0
 8001dbe:	d021      	beq.n	8001e04 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001dc0:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dc2:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8001dc4:	6833      	ldr	r3, [r6, #0]
 8001dc6:	43ab      	bics	r3, r5
 8001dc8:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <HAL_DMA_DeInit+0x54>)
 8001dcc:	18f0      	adds	r0, r6, r3
 8001dce:	f7fe f9ad 	bl	800012c <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001dd2:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dd4:	0083      	lsls	r3, r0, #2
 8001dd6:	6463      	str	r3, [r4, #68]	@ 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001dd8:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 8001dda:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ddc:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001dde:	390d      	subs	r1, #13
 8001de0:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 8001de2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001de4:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 8001de6:	6422      	str	r2, [r4, #64]	@ 0x40
  hdma->Instance->CCR  = 0U;
 8001de8:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001dea:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001dec:	4d08      	ldr	r5, [pc, #32]	@ (8001e10 <HAL_DMA_DeInit+0x5c>)
 8001dee:	682a      	ldr	r2, [r5, #0]
 8001df0:	438a      	bics	r2, r1
 8001df2:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 8001df4:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001df6:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001df8:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001dfa:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dfc:	63e0      	str	r0, [r4, #60]	@ 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001dfe:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 8001e00:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 8001e02:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8001e04:	bd70      	pop	{r4, r5, r6, pc}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	bffdfff8 	.word	0xbffdfff8
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	400200a8 	.word	0x400200a8

08001e14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e16:	1d44      	adds	r4, r0, #5
{
 8001e18:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8001e1a:	7fe5      	ldrb	r5, [r4, #31]
 8001e1c:	2d01      	cmp	r5, #1
 8001e1e:	d035      	beq.n	8001e8c <HAL_DMA_Start_IT+0x78>
 8001e20:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e22:	1d87      	adds	r7, r0, #6
  __HAL_LOCK(hdma);
 8001e24:	77e5      	strb	r5, [r4, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e26:	7ffd      	ldrb	r5, [r7, #31]
 8001e28:	2600      	movs	r6, #0
 8001e2a:	46ac      	mov	ip, r5
 8001e2c:	4663      	mov	r3, ip
 8001e2e:	b2ed      	uxtb	r5, r5
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d12a      	bne.n	8001e8a <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e34:	2402      	movs	r4, #2
 8001e36:	77fc      	strb	r4, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e38:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e3a:	63c6      	str	r6, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001e3c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e3e:	331b      	adds	r3, #27
    __HAL_DMA_DISABLE(hdma);
 8001e40:	43ae      	bics	r6, r5
 8001e42:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e44:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 8001e46:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8001e48:	401e      	ands	r6, r3
 8001e4a:	40b5      	lsls	r5, r6

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e4c:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e4e:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8001e50:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e52:	6883      	ldr	r3, [r0, #8]
 8001e54:	2b10      	cmp	r3, #16
 8001e56:	d10e      	bne.n	8001e76 <HAL_DMA_Start_IT+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e58:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e5a:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001e5c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00c      	beq.n	8001e7c <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e62:	230e      	movs	r3, #14
 8001e64:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e66:	4313      	orrs	r3, r2
 8001e68:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e6a:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001e6c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001e6e:	6822      	ldr	r2, [r4, #0]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	6023      	str	r3, [r4, #0]
}
 8001e74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001e76:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001e78:	60e2      	str	r2, [r4, #12]
 8001e7a:	e7ef      	b.n	8001e5c <HAL_DMA_Start_IT+0x48>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	4393      	bics	r3, r2
 8001e82:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e84:	6822      	ldr	r2, [r4, #0]
 8001e86:	230a      	movs	r3, #10
 8001e88:	e7ed      	b.n	8001e66 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma);
 8001e8a:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	e7f1      	b.n	8001e74 <HAL_DMA_Start_IT+0x60>

08001e90 <HAL_DMA_Abort>:
{
 8001e90:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e92:	1d84      	adds	r4, r0, #6
 8001e94:	7fe2      	ldrb	r2, [r4, #31]
{
 8001e96:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e98:	2a02      	cmp	r2, #2
 8001e9a:	d006      	beq.n	8001eaa <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001ea0:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	3305      	adds	r3, #5
 8001ea6:	77da      	strb	r2, [r3, #31]
}
 8001ea8:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eaa:	6802      	ldr	r2, [r0, #0]
 8001eac:	200e      	movs	r0, #14
 8001eae:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001eb0:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb2:	4381      	bics	r1, r0
 8001eb4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	6810      	ldr	r0, [r2, #0]
 8001eba:	4388      	bics	r0, r1
 8001ebc:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ebe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ec0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001ec2:	402a      	ands	r2, r5
 8001ec4:	000d      	movs	r5, r1
 8001ec6:	4095      	lsls	r5, r2
 8001ec8:	6045      	str	r5, [r0, #4]
    return status;
 8001eca:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001ecc:	77e1      	strb	r1, [r4, #31]
    return status;
 8001ece:	e7e8      	b.n	8001ea2 <HAL_DMA_Abort+0x12>

08001ed0 <HAL_DMA_Abort_IT>:
{
 8001ed0:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ed2:	1d84      	adds	r4, r0, #6
 8001ed4:	7fe3      	ldrb	r3, [r4, #31]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d003      	beq.n	8001ee2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eda:	2304      	movs	r3, #4
 8001edc:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8001ede:	2001      	movs	r0, #1
}
 8001ee0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee2:	210e      	movs	r1, #14
 8001ee4:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ee6:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	438a      	bics	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001eee:	2201      	movs	r2, #1
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	4391      	bics	r1, r2
 8001ef4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ef6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001ef8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001efa:	402b      	ands	r3, r5
 8001efc:	0015      	movs	r5, r2
 8001efe:	409d      	lsls	r5, r3
 8001f00:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001f02:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001f04:	2200      	movs	r2, #0
 8001f06:	1d43      	adds	r3, r0, #5
 8001f08:	77da      	strb	r2, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8001f0a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d000      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8001f10:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001f12:	2000      	movs	r0, #0
 8001f14:	e7e4      	b.n	8001ee0 <HAL_DMA_Abort_IT+0x10>

08001f16 <HAL_DMA_IRQHandler>:
{
 8001f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f18:	261c      	movs	r6, #28
 8001f1a:	2704      	movs	r7, #4
 8001f1c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f1e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f20:	4032      	ands	r2, r6
 8001f22:	003e      	movs	r6, r7
 8001f24:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f26:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001f28:	6803      	ldr	r3, [r0, #0]
 8001f2a:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f2c:	4235      	tst	r5, r6
 8001f2e:	d00d      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x36>
 8001f30:	423c      	tst	r4, r7
 8001f32:	d00b      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	0692      	lsls	r2, r2, #26
 8001f38:	d402      	bmi.n	8001f40 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	43ba      	bics	r2, r7
 8001f3e:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001f40:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001f42:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d019      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8001f48:	4798      	blx	r3
  return;
 8001f4a:	e017      	b.n	8001f7c <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f4c:	2702      	movs	r7, #2
 8001f4e:	003e      	movs	r6, r7
 8001f50:	4096      	lsls	r6, r2
 8001f52:	4235      	tst	r5, r6
 8001f54:	d013      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x68>
 8001f56:	423c      	tst	r4, r7
 8001f58:	d011      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	0692      	lsls	r2, r2, #26
 8001f5e:	d406      	bmi.n	8001f6e <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f60:	240a      	movs	r4, #10
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	43a2      	bics	r2, r4
 8001f66:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	1d83      	adds	r3, r0, #6
 8001f6c:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f72:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001f74:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8001f76:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d1e5      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x32>
}
 8001f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001f7e:	2608      	movs	r6, #8
 8001f80:	0037      	movs	r7, r6
 8001f82:	4097      	lsls	r7, r2
 8001f84:	423d      	tst	r5, r7
 8001f86:	d0f9      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x66>
 8001f88:	4234      	tst	r4, r6
 8001f8a:	d0f7      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f8c:	250e      	movs	r5, #14
 8001f8e:	681c      	ldr	r4, [r3, #0]
 8001f90:	43ac      	bics	r4, r5
 8001f92:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f94:	2301      	movs	r3, #1
 8001f96:	001c      	movs	r4, r3
 8001f98:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8001f9a:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f9c:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f9e:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001fa0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	1d43      	adds	r3, r0, #5
 8001fa6:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8001fa8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001faa:	e7e5      	b.n	8001f78 <HAL_DMA_IRQHandler+0x62>

08001fac <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001fac:	0003      	movs	r3, r0
 8001fae:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8001fb0:	d101      	bne.n	8001fb6 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001fb2:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8001fb4:	4770      	bx	lr
      status = HAL_ERROR;
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	e7fc      	b.n	8001fb4 <HAL_EXTI_RegisterCallback+0x8>

08001fba <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001fba:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8001fbc:	2001      	movs	r0, #1
  if (hexti == NULL)
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8001fc2:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8001fc4:	6019      	str	r1, [r3, #0]
  }
}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001fc8:	231f      	movs	r3, #31
 8001fca:	6802      	ldr	r2, [r0, #0]
{
 8001fcc:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001fce:	401a      	ands	r2, r3
 8001fd0:	3b1e      	subs	r3, #30
 8001fd2:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8001fd4:	4a04      	ldr	r2, [pc, #16]	@ (8001fe8 <HAL_EXTI_IRQHandler+0x20>)
 8001fd6:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8001fd8:	420b      	tst	r3, r1
 8001fda:	d004      	beq.n	8001fe6 <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001fdc:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001fde:	6843      	ldr	r3, [r0, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d000      	beq.n	8001fe6 <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8001fe4:	4798      	blx	r3
    }
  }
}
 8001fe6:	bd10      	pop	{r4, pc}
 8001fe8:	40010400 	.word	0x40010400

08001fec <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8001fec:	2300      	movs	r3, #0
{
 8001fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff0:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ff2:	680a      	ldr	r2, [r1, #0]
 8001ff4:	0014      	movs	r4, r2
 8001ff6:	40dc      	lsrs	r4, r3
 8001ff8:	d101      	bne.n	8001ffe <HAL_GPIO_Init+0x12>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 8001ffa:	b005      	add	sp, #20
 8001ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ffe:	2501      	movs	r5, #1
 8002000:	0014      	movs	r4, r2
 8002002:	409d      	lsls	r5, r3
 8002004:	402c      	ands	r4, r5
 8002006:	9400      	str	r4, [sp, #0]
    if (iocurrent)
 8002008:	422a      	tst	r2, r5
 800200a:	d100      	bne.n	800200e <HAL_GPIO_Init+0x22>
 800200c:	e09c      	b.n	8002148 <HAL_GPIO_Init+0x15c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800200e:	684a      	ldr	r2, [r1, #4]
 8002010:	005f      	lsls	r7, r3, #1
 8002012:	4694      	mov	ip, r2
 8002014:	2203      	movs	r2, #3
 8002016:	4664      	mov	r4, ip
 8002018:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800201a:	2403      	movs	r4, #3
 800201c:	40bc      	lsls	r4, r7
 800201e:	43e4      	mvns	r4, r4
 8002020:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002022:	1e54      	subs	r4, r2, #1
 8002024:	2c01      	cmp	r4, #1
 8002026:	d82e      	bhi.n	8002086 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8002028:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800202a:	9c01      	ldr	r4, [sp, #4]
 800202c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800202e:	68cc      	ldr	r4, [r1, #12]
 8002030:	40bc      	lsls	r4, r7
 8002032:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8002034:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002036:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002038:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800203a:	43ac      	bics	r4, r5
 800203c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203e:	4664      	mov	r4, ip
 8002040:	0924      	lsrs	r4, r4, #4
 8002042:	4034      	ands	r4, r6
 8002044:	409c      	lsls	r4, r3
 8002046:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002048:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800204a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800204c:	9c01      	ldr	r4, [sp, #4]
 800204e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002050:	688c      	ldr	r4, [r1, #8]
 8002052:	40bc      	lsls	r4, r7
 8002054:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8002056:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002058:	2a02      	cmp	r2, #2
 800205a:	d116      	bne.n	800208a <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800205c:	2507      	movs	r5, #7
 800205e:	260f      	movs	r6, #15
 8002060:	401d      	ands	r5, r3
 8002062:	00ad      	lsls	r5, r5, #2
 8002064:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3U];
 8002066:	08dc      	lsrs	r4, r3, #3
 8002068:	00a4      	lsls	r4, r4, #2
 800206a:	1904      	adds	r4, r0, r4
 800206c:	9402      	str	r4, [sp, #8]
 800206e:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002070:	9603      	str	r6, [sp, #12]
 8002072:	0026      	movs	r6, r4
 8002074:	9c03      	ldr	r4, [sp, #12]
 8002076:	43a6      	bics	r6, r4
 8002078:	0034      	movs	r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800207a:	690e      	ldr	r6, [r1, #16]
 800207c:	40ae      	lsls	r6, r5
 800207e:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8002080:	9c02      	ldr	r4, [sp, #8]
 8002082:	6226      	str	r6, [r4, #32]
 8002084:	e001      	b.n	800208a <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002086:	2a03      	cmp	r2, #3
 8002088:	d1df      	bne.n	800204a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800208a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800208c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800208e:	9d01      	ldr	r5, [sp, #4]
 8002090:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002092:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002094:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8002096:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002098:	4662      	mov	r2, ip
 800209a:	02a4      	lsls	r4, r4, #10
 800209c:	4222      	tst	r2, r4
 800209e:	d053      	beq.n	8002148 <HAL_GPIO_Init+0x15c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a0:	2501      	movs	r5, #1
 80020a2:	4c2a      	ldr	r4, [pc, #168]	@ (800214c <HAL_GPIO_Init+0x160>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80020a4:	27a0      	movs	r7, #160	@ 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80020a8:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	432a      	orrs	r2, r5
 80020ac:	6362      	str	r2, [r4, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80020ae:	4a28      	ldr	r2, [pc, #160]	@ (8002150 <HAL_GPIO_Init+0x164>)
 80020b0:	089c      	lsrs	r4, r3, #2
 80020b2:	00a4      	lsls	r4, r4, #2
 80020b4:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80020b6:	220f      	movs	r2, #15
 80020b8:	3502      	adds	r5, #2
 80020ba:	401d      	ands	r5, r3
 80020bc:	00ad      	lsls	r5, r5, #2
 80020be:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 80020c0:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80020c2:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80020c4:	2200      	movs	r2, #0
 80020c6:	42b8      	cmp	r0, r7
 80020c8:	d014      	beq.n	80020f4 <HAL_GPIO_Init+0x108>
 80020ca:	4f22      	ldr	r7, [pc, #136]	@ (8002154 <HAL_GPIO_Init+0x168>)
 80020cc:	3201      	adds	r2, #1
 80020ce:	42b8      	cmp	r0, r7
 80020d0:	d010      	beq.n	80020f4 <HAL_GPIO_Init+0x108>
 80020d2:	4f21      	ldr	r7, [pc, #132]	@ (8002158 <HAL_GPIO_Init+0x16c>)
 80020d4:	3201      	adds	r2, #1
 80020d6:	42b8      	cmp	r0, r7
 80020d8:	d00c      	beq.n	80020f4 <HAL_GPIO_Init+0x108>
 80020da:	4f20      	ldr	r7, [pc, #128]	@ (800215c <HAL_GPIO_Init+0x170>)
 80020dc:	3201      	adds	r2, #1
 80020de:	42b8      	cmp	r0, r7
 80020e0:	d008      	beq.n	80020f4 <HAL_GPIO_Init+0x108>
 80020e2:	4f1f      	ldr	r7, [pc, #124]	@ (8002160 <HAL_GPIO_Init+0x174>)
 80020e4:	3201      	adds	r2, #1
 80020e6:	42b8      	cmp	r0, r7
 80020e8:	d004      	beq.n	80020f4 <HAL_GPIO_Init+0x108>
 80020ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002164 <HAL_GPIO_Init+0x178>)
 80020ec:	1882      	adds	r2, r0, r2
 80020ee:	1e57      	subs	r7, r2, #1
 80020f0:	41ba      	sbcs	r2, r7
 80020f2:	3205      	adds	r2, #5
 80020f4:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020f6:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80020f8:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020fa:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 80020fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002168 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 80020fe:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8002100:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8002102:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8002104:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8002106:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002108:	02ff      	lsls	r7, r7, #11
 800210a:	d401      	bmi.n	8002110 <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 800210c:	0035      	movs	r5, r6
 800210e:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002110:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8002112:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002114:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8002116:	9d00      	ldr	r5, [sp, #0]
 8002118:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800211a:	02bf      	lsls	r7, r7, #10
 800211c:	d401      	bmi.n	8002122 <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 800211e:	0035      	movs	r5, r6
 8002120:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002122:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8002124:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8002126:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8002128:	9d00      	ldr	r5, [sp, #0]
 800212a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800212c:	03bf      	lsls	r7, r7, #14
 800212e:	d401      	bmi.n	8002134 <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 8002130:	0035      	movs	r5, r6
 8002132:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002134:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8002136:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8002138:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 800213a:	9e00      	ldr	r6, [sp, #0]
 800213c:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800213e:	03ff      	lsls	r7, r7, #15
 8002140:	d401      	bmi.n	8002146 <HAL_GPIO_Init+0x15a>
        temp &= ~((uint32_t)iocurrent);
 8002142:	4025      	ands	r5, r4
 8002144:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8002146:	6016      	str	r6, [r2, #0]
    position++;
 8002148:	3301      	adds	r3, #1
 800214a:	e752      	b.n	8001ff2 <HAL_GPIO_Init+0x6>
 800214c:	40021000 	.word	0x40021000
 8002150:	40010000 	.word	0x40010000
 8002154:	50000400 	.word	0x50000400
 8002158:	50000800 	.word	0x50000800
 800215c:	50000c00 	.word	0x50000c00
 8002160:	50001000 	.word	0x50001000
 8002164:	afffe400 	.word	0xafffe400
 8002168:	40010400 	.word	0x40010400

0800216c <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800216c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00U;
 800216e:	2200      	movs	r2, #0
{
 8002170:	000f      	movs	r7, r1
 8002172:	b085      	sub	sp, #20

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8002174:	003b      	movs	r3, r7
 8002176:	40d3      	lsrs	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_DeInit+0x12>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 800217a:	b005      	add	sp, #20
 800217c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 800217e:	2301      	movs	r3, #1
 8002180:	4093      	lsls	r3, r2
 8002182:	001c      	movs	r4, r3
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	403c      	ands	r4, r7
    if (iocurrent)
 8002188:	421f      	tst	r7, r3
 800218a:	d05a      	beq.n	8002242 <HAL_GPIO_DeInit+0xd6>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800218c:	4b2e      	ldr	r3, [pc, #184]	@ (8002248 <HAL_GPIO_DeInit+0xdc>)
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800218e:	2503      	movs	r5, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002190:	0891      	lsrs	r1, r2, #2
 8002192:	0089      	lsls	r1, r1, #2
 8002194:	18c9      	adds	r1, r1, r3
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8002196:	230f      	movs	r3, #15
 8002198:	4015      	ands	r5, r2
 800219a:	00ad      	lsls	r5, r5, #2
 800219c:	40ab      	lsls	r3, r5
      tmp = SYSCFG->EXTICR[position >> 2U];
 800219e:	688e      	ldr	r6, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80021a0:	9302      	str	r3, [sp, #8]
 80021a2:	401e      	ands	r6, r3
 80021a4:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80021a6:	26a0      	movs	r6, #160	@ 0xa0
 80021a8:	2300      	movs	r3, #0
 80021aa:	05f6      	lsls	r6, r6, #23
 80021ac:	42b0      	cmp	r0, r6
 80021ae:	d018      	beq.n	80021e2 <HAL_GPIO_DeInit+0x76>
 80021b0:	4b26      	ldr	r3, [pc, #152]	@ (800224c <HAL_GPIO_DeInit+0xe0>)
 80021b2:	469c      	mov	ip, r3
 80021b4:	2301      	movs	r3, #1
 80021b6:	4560      	cmp	r0, ip
 80021b8:	d013      	beq.n	80021e2 <HAL_GPIO_DeInit+0x76>
 80021ba:	4b25      	ldr	r3, [pc, #148]	@ (8002250 <HAL_GPIO_DeInit+0xe4>)
 80021bc:	469c      	mov	ip, r3
 80021be:	2302      	movs	r3, #2
 80021c0:	4560      	cmp	r0, ip
 80021c2:	d00e      	beq.n	80021e2 <HAL_GPIO_DeInit+0x76>
 80021c4:	4b23      	ldr	r3, [pc, #140]	@ (8002254 <HAL_GPIO_DeInit+0xe8>)
 80021c6:	469c      	mov	ip, r3
 80021c8:	2303      	movs	r3, #3
 80021ca:	4560      	cmp	r0, ip
 80021cc:	d009      	beq.n	80021e2 <HAL_GPIO_DeInit+0x76>
 80021ce:	4b22      	ldr	r3, [pc, #136]	@ (8002258 <HAL_GPIO_DeInit+0xec>)
 80021d0:	469c      	mov	ip, r3
 80021d2:	2304      	movs	r3, #4
 80021d4:	4560      	cmp	r0, ip
 80021d6:	d004      	beq.n	80021e2 <HAL_GPIO_DeInit+0x76>
 80021d8:	4b20      	ldr	r3, [pc, #128]	@ (800225c <HAL_GPIO_DeInit+0xf0>)
 80021da:	18c3      	adds	r3, r0, r3
 80021dc:	1e5e      	subs	r6, r3, #1
 80021de:	41b3      	sbcs	r3, r6
 80021e0:	3305      	adds	r3, #5
 80021e2:	40ab      	lsls	r3, r5
 80021e4:	9d03      	ldr	r5, [sp, #12]
 80021e6:	42ab      	cmp	r3, r5
 80021e8:	d110      	bne.n	800220c <HAL_GPIO_DeInit+0xa0>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80021ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002260 <HAL_GPIO_DeInit+0xf4>)
 80021ec:	681d      	ldr	r5, [r3, #0]
 80021ee:	43a5      	bics	r5, r4
 80021f0:	601d      	str	r5, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80021f2:	685d      	ldr	r5, [r3, #4]
 80021f4:	43a5      	bics	r5, r4
 80021f6:	605d      	str	r5, [r3, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80021f8:	68dd      	ldr	r5, [r3, #12]
 80021fa:	43a5      	bics	r5, r4
 80021fc:	60dd      	str	r5, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80021fe:	689d      	ldr	r5, [r3, #8]
 8002200:	43a5      	bics	r5, r4
 8002202:	609d      	str	r5, [r3, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002204:	688b      	ldr	r3, [r1, #8]
 8002206:	9c02      	ldr	r4, [sp, #8]
 8002208:	43a3      	bics	r3, r4
 800220a:	608b      	str	r3, [r1, #8]
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800220c:	2403      	movs	r4, #3
 800220e:	0051      	lsls	r1, r2, #1
 8002210:	408c      	lsls	r4, r1
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002212:	2107      	movs	r1, #7
 8002214:	260f      	movs	r6, #15
 8002216:	4011      	ands	r1, r2
 8002218:	0089      	lsls	r1, r1, #2
 800221a:	408e      	lsls	r6, r1
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800221c:	6803      	ldr	r3, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800221e:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8002220:	4323      	orrs	r3, r4
 8002222:	6003      	str	r3, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002224:	08d3      	lsrs	r3, r2, #3
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	18c3      	adds	r3, r0, r3
 800222a:	6a1d      	ldr	r5, [r3, #32]
 800222c:	43b5      	bics	r5, r6
 800222e:	621d      	str	r5, [r3, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002230:	68c3      	ldr	r3, [r0, #12]
 8002232:	43a3      	bics	r3, r4
 8002234:	60c3      	str	r3, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8002236:	6843      	ldr	r3, [r0, #4]
 8002238:	438b      	bics	r3, r1
 800223a:	6043      	str	r3, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800223c:	6883      	ldr	r3, [r0, #8]
 800223e:	43a3      	bics	r3, r4
 8002240:	6083      	str	r3, [r0, #8]
    position++;
 8002242:	3201      	adds	r2, #1
 8002244:	e796      	b.n	8002174 <HAL_GPIO_DeInit+0x8>
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	40010000 	.word	0x40010000
 800224c:	50000400 	.word	0x50000400
 8002250:	50000800 	.word	0x50000800
 8002254:	50000c00 	.word	0x50000c00
 8002258:	50001000 	.word	0x50001000
 800225c:	afffe400 	.word	0xafffe400
 8002260:	40010400 	.word	0x40010400

08002264 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002264:	6900      	ldr	r0, [r0, #16]
 8002266:	4008      	ands	r0, r1
 8002268:	1e43      	subs	r3, r0, #1
 800226a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800226c:	b2c0      	uxtb	r0, r0
}
 800226e:	4770      	bx	lr

08002270 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002270:	2a00      	cmp	r2, #0
 8002272:	d001      	beq.n	8002278 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002274:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002276:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8002278:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800227a:	e7fc      	b.n	8002276 <HAL_GPIO_WritePin+0x6>

0800227c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800227c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800227e:	0013      	movs	r3, r2
 8002280:	400b      	ands	r3, r1
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	4391      	bics	r1, r2
 8002286:	430b      	orrs	r3, r1
 8002288:	6183      	str	r3, [r0, #24]
}
 800228a:	4770      	bx	lr

0800228c <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 800228c:	2110      	movs	r1, #16
 800228e:	4a02      	ldr	r2, [pc, #8]	@ (8002298 <HAL_PWR_DisablePVD+0xc>)
 8002290:	6813      	ldr	r3, [r2, #0]
 8002292:	438b      	bics	r3, r1
 8002294:	6013      	str	r3, [r2, #0]
}
 8002296:	4770      	bx	lr
 8002298:	40007000 	.word	0x40007000

0800229c <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800229c:	4b17      	ldr	r3, [pc, #92]	@ (80022fc <HAL_PWR_EnterSLEEPMode+0x60>)
{
 800229e:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80022a0:	681e      	ldr	r6, [r3, #0]
{
 80022a2:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80022a4:	2080      	movs	r0, #128	@ 0x80
 80022a6:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80022a8:	2701      	movs	r7, #1
 80022aa:	4a15      	ldr	r2, [pc, #84]	@ (8002300 <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80022ac:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80022ae:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80022b0:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80022b2:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 80022b4:	4206      	tst	r6, r0
 80022b6:	d005      	beq.n	80022c4 <HAL_PWR_EnterSLEEPMode+0x28>
 80022b8:	2a00      	cmp	r2, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	4e11      	ldr	r6, [pc, #68]	@ (8002304 <HAL_PWR_EnterSLEEPMode+0x68>)
 80022c0:	4030      	ands	r0, r6
 80022c2:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80022c4:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 80022c6:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80022c8:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80022ca:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80022cc:	4d0e      	ldr	r5, [pc, #56]	@ (8002308 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 80022ce:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80022d0:	6928      	ldr	r0, [r5, #16]
 80022d2:	3601      	adds	r6, #1
 80022d4:	43b0      	bics	r0, r6
 80022d6:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80022d8:	2901      	cmp	r1, #1
 80022da:	d10b      	bne.n	80022f4 <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80022dc:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 80022de:	2c00      	cmp	r4, #0
 80022e0:	d006      	beq.n	80022f0 <HAL_PWR_EnterSLEEPMode+0x54>
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	d004      	beq.n	80022f0 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80022e6:	2280      	movs	r2, #128	@ 0x80
 80022e8:	6819      	ldr	r1, [r3, #0]
 80022ea:	0092      	lsls	r2, r2, #2
 80022ec:	430a      	orrs	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 80022f0:	46c0      	nop			@ (mov r8, r8)

}
 80022f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 80022f4:	bf40      	sev
    __WFE();
 80022f6:	bf20      	wfe
    __WFE();
 80022f8:	bf20      	wfe
 80022fa:	e7f0      	b.n	80022de <HAL_PWR_EnterSLEEPMode+0x42>
 80022fc:	40007000 	.word	0x40007000
 8002300:	40010000 	.word	0x40010000
 8002304:	fffffdff 	.word	0xfffffdff
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <HAL_PWR_EnterSTOPMode+0x68>)
{
 800230e:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002310:	681e      	ldr	r6, [r3, #0]
{
 8002312:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002314:	2080      	movs	r0, #128	@ 0x80
 8002316:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002318:	2701      	movs	r7, #1
 800231a:	4a17      	ldr	r2, [pc, #92]	@ (8002378 <HAL_PWR_EnterSTOPMode+0x6c>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800231c:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800231e:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002320:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002322:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8002324:	4206      	tst	r6, r0
 8002326:	d005      	beq.n	8002334 <HAL_PWR_EnterSTOPMode+0x28>
 8002328:	2a00      	cmp	r2, #0
 800232a:	d003      	beq.n	8002334 <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	4e13      	ldr	r6, [pc, #76]	@ (800237c <HAL_PWR_EnterSTOPMode+0x70>)
 8002330:	4030      	ands	r0, r6
 8002332:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002334:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8002336:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002338:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800233a:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800233c:	2504      	movs	r5, #4
  PWR->CR = tmpreg;
 800233e:	6018      	str	r0, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002340:	480f      	ldr	r0, [pc, #60]	@ (8002380 <HAL_PWR_EnterSTOPMode+0x74>)
 8002342:	6906      	ldr	r6, [r0, #16]
 8002344:	4335      	orrs	r5, r6
 8002346:	6105      	str	r5, [r0, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002348:	2901      	cmp	r1, #1
 800234a:	d10e      	bne.n	800236a <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800234c:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800234e:	2504      	movs	r5, #4
 8002350:	6901      	ldr	r1, [r0, #16]
 8002352:	43a9      	bics	r1, r5
 8002354:	6101      	str	r1, [r0, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8002356:	2c00      	cmp	r4, #0
 8002358:	d006      	beq.n	8002368 <HAL_PWR_EnterSTOPMode+0x5c>
 800235a:	2a00      	cmp	r2, #0
 800235c:	d004      	beq.n	8002368 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800235e:	2280      	movs	r2, #128	@ 0x80
 8002360:	6819      	ldr	r1, [r3, #0]
 8002362:	0092      	lsls	r2, r2, #2
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]
  }
}
 8002368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 800236a:	bf40      	sev
    __WFE();
 800236c:	bf20      	wfe
    __WFE();
 800236e:	bf20      	wfe
 8002370:	e7ed      	b.n	800234e <HAL_PWR_EnterSTOPMode+0x42>
 8002372:	46c0      	nop			@ (mov r8, r8)
 8002374:	40007000 	.word	0x40007000
 8002378:	40010000 	.word	0x40010000
 800237c:	fffffdff 	.word	0xfffffdff
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8002384:	2380      	movs	r3, #128	@ 0x80
 8002386:	4a03      	ldr	r2, [pc, #12]	@ (8002394 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	6811      	ldr	r1, [r2, #0]
 800238c:	430b      	orrs	r3, r1
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	4770      	bx	lr
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	40007000 	.word	0x40007000

08002398 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8002398:	2380      	movs	r3, #128	@ 0x80
 800239a:	4a03      	ldr	r2, [pc, #12]	@ (80023a8 <HAL_PWREx_EnableUltraLowPower+0x10>)
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	6811      	ldr	r1, [r2, #0]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6013      	str	r3, [r2, #0]
}
 80023a4:	4770      	bx	lr
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	40007000 	.word	0x40007000

080023ac <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023ac:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80023ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 80023b0:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80023b2:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80023b4:	4022      	ands	r2, r4
 80023b6:	2a08      	cmp	r2, #8
 80023b8:	d034      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x78>
 80023ba:	2a0c      	cmp	r2, #12
 80023bc:	d00c      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x2c>
 80023be:	2a04      	cmp	r2, #4
 80023c0:	d128      	bne.n	8002414 <HAL_RCC_GetSysClockFreq+0x68>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	2310      	movs	r3, #16
 80023c6:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80023c8:	4243      	negs	r3, r0
 80023ca:	4158      	adcs	r0, r3
 80023cc:	4b17      	ldr	r3, [pc, #92]	@ (800242c <HAL_RCC_GetSysClockFreq+0x80>)
 80023ce:	4240      	negs	r0, r0
 80023d0:	4018      	ands	r0, r3
 80023d2:	4b17      	ldr	r3, [pc, #92]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x84>)
 80023d4:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80023d8:	02a2      	lsls	r2, r4, #10
 80023da:	4816      	ldr	r0, [pc, #88]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x88>)
 80023dc:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80023de:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023e0:	2280      	movs	r2, #128	@ 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80023e2:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023e4:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80023e6:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023e8:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80023ea:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ec:	4211      	tst	r1, r2
 80023ee:	d009      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80023f0:	4a11      	ldr	r2, [pc, #68]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x8c>)
 80023f2:	2300      	movs	r3, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	f7fe f82f 	bl	8000458 <__aeabi_lmul>
 80023fa:	0022      	movs	r2, r4
 80023fc:	2300      	movs	r3, #0
 80023fe:	f7fe f80b 	bl	8000418 <__aeabi_uldivmod>
 8002402:	e7e8      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	2310      	movs	r3, #16
 8002408:	421a      	tst	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x64>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800240c:	4a08      	ldr	r2, [pc, #32]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x84>)
 800240e:	e7f0      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x46>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002410:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <HAL_RCC_GetSysClockFreq+0x90>)
 8002412:	e7ee      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002414:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002416:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002418:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800241e:	3301      	adds	r3, #1
 8002420:	4098      	lsls	r0, r3
      break;
 8002422:	e7d8      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x2a>
  switch (tmpreg & RCC_CFGR_SWS)
 8002424:	4804      	ldr	r0, [pc, #16]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002426:	e7d6      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x2a>
 8002428:	40021000 	.word	0x40021000
 800242c:	00b71b00 	.word	0x00b71b00
 8002430:	003d0900 	.word	0x003d0900
 8002434:	0800663c 	.word	0x0800663c
 8002438:	007a1200 	.word	0x007a1200
 800243c:	00f42400 	.word	0x00f42400

08002440 <HAL_RCC_OscConfig>:
{
 8002440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002442:	0005      	movs	r5, r0
 8002444:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8002446:	2800      	cmp	r0, #0
 8002448:	d059      	beq.n	80024fe <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244a:	230c      	movs	r3, #12
 800244c:	4cb8      	ldr	r4, [pc, #736]	@ (8002730 <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244e:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002450:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002452:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002454:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002456:	2380      	movs	r3, #128	@ 0x80
 8002458:	025b      	lsls	r3, r3, #9
 800245a:	0019      	movs	r1, r3
 800245c:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245e:	07d2      	lsls	r2, r2, #31
 8002460:	d441      	bmi.n	80024e6 <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002462:	682b      	ldr	r3, [r5, #0]
 8002464:	079b      	lsls	r3, r3, #30
 8002466:	d500      	bpl.n	800246a <HAL_RCC_OscConfig+0x2a>
 8002468:	e08a      	b.n	8002580 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800246a:	682b      	ldr	r3, [r5, #0]
 800246c:	06db      	lsls	r3, r3, #27
 800246e:	d528      	bpl.n	80024c2 <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002470:	2e00      	cmp	r6, #0
 8002472:	d000      	beq.n	8002476 <HAL_RCC_OscConfig+0x36>
 8002474:	e0e3      	b.n	800263e <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	059b      	lsls	r3, r3, #22
 800247a:	d502      	bpl.n	8002482 <HAL_RCC_OscConfig+0x42>
 800247c:	69eb      	ldr	r3, [r5, #28]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d03d      	beq.n	80024fe <HAL_RCC_OscConfig+0xbe>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002482:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002484:	6862      	ldr	r2, [r4, #4]
 8002486:	49ab      	ldr	r1, [pc, #684]	@ (8002734 <HAL_RCC_OscConfig+0x2f4>)
 8002488:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800248a:	400a      	ands	r2, r1
 800248c:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800248e:	0b5b      	lsrs	r3, r3, #13
 8002490:	3301      	adds	r3, #1
 8002492:	023f      	lsls	r7, r7, #8
 8002494:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002496:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002498:	6861      	ldr	r1, [r4, #4]
 800249a:	6a2a      	ldr	r2, [r5, #32]
 800249c:	0209      	lsls	r1, r1, #8
 800249e:	0a09      	lsrs	r1, r1, #8
 80024a0:	0612      	lsls	r2, r2, #24
 80024a2:	430a      	orrs	r2, r1
 80024a4:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80024a6:	68e1      	ldr	r1, [r4, #12]
 80024a8:	48a3      	ldr	r0, [pc, #652]	@ (8002738 <HAL_RCC_OscConfig+0x2f8>)
 80024aa:	060b      	lsls	r3, r1, #24
 80024ac:	0f1b      	lsrs	r3, r3, #28
 80024ae:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024b0:	4aa2      	ldr	r2, [pc, #648]	@ (800273c <HAL_RCC_OscConfig+0x2fc>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80024b2:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 80024b4:	4ba2      	ldr	r3, [pc, #648]	@ (8002740 <HAL_RCC_OscConfig+0x300>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024b6:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	f7fe ff13 	bl	80012e4 <HAL_InitTick>
        if(status != HAL_OK)
 80024be:	2800      	cmp	r0, #0
 80024c0:	d134      	bne.n	800252c <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c2:	682b      	ldr	r3, [r5, #0]
 80024c4:	071b      	lsls	r3, r3, #28
 80024c6:	d500      	bpl.n	80024ca <HAL_RCC_OscConfig+0x8a>
 80024c8:	e0f0      	b.n	80026ac <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ca:	682b      	ldr	r3, [r5, #0]
 80024cc:	075b      	lsls	r3, r3, #29
 80024ce:	d500      	bpl.n	80024d2 <HAL_RCC_OscConfig+0x92>
 80024d0:	e112      	b.n	80026f8 <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024d2:	682b      	ldr	r3, [r5, #0]
 80024d4:	069b      	lsls	r3, r3, #26
 80024d6:	d500      	bpl.n	80024da <HAL_RCC_OscConfig+0x9a>
 80024d8:	e197      	b.n	800280a <HAL_RCC_OscConfig+0x3ca>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024da:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d000      	beq.n	80024e2 <HAL_RCC_OscConfig+0xa2>
 80024e0:	e1c6      	b.n	8002870 <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 80024e2:	2000      	movs	r0, #0
 80024e4:	e022      	b.n	800252c <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e6:	2e08      	cmp	r6, #8
 80024e8:	d003      	beq.n	80024f2 <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024ea:	2e0c      	cmp	r6, #12
 80024ec:	d109      	bne.n	8002502 <HAL_RCC_OscConfig+0xc2>
 80024ee:	2f00      	cmp	r7, #0
 80024f0:	d007      	beq.n	8002502 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	039b      	lsls	r3, r3, #14
 80024f6:	d5b4      	bpl.n	8002462 <HAL_RCC_OscConfig+0x22>
 80024f8:	686b      	ldr	r3, [r5, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1b1      	bne.n	8002462 <HAL_RCC_OscConfig+0x22>
    return HAL_ERROR;
 80024fe:	2001      	movs	r0, #1
 8002500:	e014      	b.n	800252c <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002502:	686a      	ldr	r2, [r5, #4]
 8002504:	428a      	cmp	r2, r1
 8002506:	d113      	bne.n	8002530 <HAL_RCC_OscConfig+0xf0>
 8002508:	6822      	ldr	r2, [r4, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800250e:	f7fe feeb 	bl	80012e8 <HAL_GetTick>
 8002512:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002514:	2280      	movs	r2, #128	@ 0x80
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	0292      	lsls	r2, r2, #10
 800251a:	4213      	tst	r3, r2
 800251c:	d1a1      	bne.n	8002462 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251e:	f7fe fee3 	bl	80012e8 <HAL_GetTick>
 8002522:	9b00      	ldr	r3, [sp, #0]
 8002524:	1ac0      	subs	r0, r0, r3
 8002526:	2864      	cmp	r0, #100	@ 0x64
 8002528:	d9f4      	bls.n	8002514 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 800252a:	2003      	movs	r0, #3
}
 800252c:	b005      	add	sp, #20
 800252e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002530:	21a0      	movs	r1, #160	@ 0xa0
 8002532:	02c9      	lsls	r1, r1, #11
 8002534:	428a      	cmp	r2, r1
 8002536:	d105      	bne.n	8002544 <HAL_RCC_OscConfig+0x104>
 8002538:	2280      	movs	r2, #128	@ 0x80
 800253a:	6821      	ldr	r1, [r4, #0]
 800253c:	02d2      	lsls	r2, r2, #11
 800253e:	430a      	orrs	r2, r1
 8002540:	6022      	str	r2, [r4, #0]
 8002542:	e7e1      	b.n	8002508 <HAL_RCC_OscConfig+0xc8>
 8002544:	6821      	ldr	r1, [r4, #0]
 8002546:	487f      	ldr	r0, [pc, #508]	@ (8002744 <HAL_RCC_OscConfig+0x304>)
 8002548:	4001      	ands	r1, r0
 800254a:	6021      	str	r1, [r4, #0]
 800254c:	6821      	ldr	r1, [r4, #0]
 800254e:	400b      	ands	r3, r1
 8002550:	9303      	str	r3, [sp, #12]
 8002552:	9b03      	ldr	r3, [sp, #12]
 8002554:	497c      	ldr	r1, [pc, #496]	@ (8002748 <HAL_RCC_OscConfig+0x308>)
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	400b      	ands	r3, r1
 800255a:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800255c:	2a00      	cmp	r2, #0
 800255e:	d1d6      	bne.n	800250e <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8002560:	f7fe fec2 	bl	80012e8 <HAL_GetTick>
 8002564:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002566:	2280      	movs	r2, #128	@ 0x80
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	0292      	lsls	r2, r2, #10
 800256c:	4213      	tst	r3, r2
 800256e:	d100      	bne.n	8002572 <HAL_RCC_OscConfig+0x132>
 8002570:	e777      	b.n	8002462 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002572:	f7fe feb9 	bl	80012e8 <HAL_GetTick>
 8002576:	9b00      	ldr	r3, [sp, #0]
 8002578:	1ac0      	subs	r0, r0, r3
 800257a:	2864      	cmp	r0, #100	@ 0x64
 800257c:	d9f3      	bls.n	8002566 <HAL_RCC_OscConfig+0x126>
 800257e:	e7d4      	b.n	800252a <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002580:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8002582:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002584:	4213      	tst	r3, r2
 8002586:	d003      	beq.n	8002590 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002588:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800258a:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800258c:	4311      	orrs	r1, r2
 800258e:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002590:	2e04      	cmp	r6, #4
 8002592:	d003      	beq.n	800259c <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002594:	2e0c      	cmp	r6, #12
 8002596:	d124      	bne.n	80025e2 <HAL_RCC_OscConfig+0x1a2>
 8002598:	2f00      	cmp	r7, #0
 800259a:	d122      	bne.n	80025e2 <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800259c:	6822      	ldr	r2, [r4, #0]
 800259e:	0752      	lsls	r2, r2, #29
 80025a0:	d501      	bpl.n	80025a6 <HAL_RCC_OscConfig+0x166>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0ab      	beq.n	80024fe <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	6861      	ldr	r1, [r4, #4]
 80025a8:	692a      	ldr	r2, [r5, #16]
 80025aa:	4868      	ldr	r0, [pc, #416]	@ (800274c <HAL_RCC_OscConfig+0x30c>)
 80025ac:	0212      	lsls	r2, r2, #8
 80025ae:	4001      	ands	r1, r0
 80025b0:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80025b2:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	438a      	bics	r2, r1
 80025ba:	4313      	orrs	r3, r2
 80025bc:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025be:	f7ff fef5 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 80025c2:	68e3      	ldr	r3, [r4, #12]
 80025c4:	4a5c      	ldr	r2, [pc, #368]	@ (8002738 <HAL_RCC_OscConfig+0x2f8>)
 80025c6:	061b      	lsls	r3, r3, #24
 80025c8:	0f1b      	lsrs	r3, r3, #28
 80025ca:	5cd3      	ldrb	r3, [r2, r3]
 80025cc:	495b      	ldr	r1, [pc, #364]	@ (800273c <HAL_RCC_OscConfig+0x2fc>)
 80025ce:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 80025d0:	4b5b      	ldr	r3, [pc, #364]	@ (8002740 <HAL_RCC_OscConfig+0x300>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025d2:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	f7fe fe85 	bl	80012e4 <HAL_InitTick>
      if(status != HAL_OK)
 80025da:	2800      	cmp	r0, #0
 80025dc:	d100      	bne.n	80025e0 <HAL_RCC_OscConfig+0x1a0>
 80025de:	e744      	b.n	800246a <HAL_RCC_OscConfig+0x2a>
 80025e0:	e7a4      	b.n	800252c <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d019      	beq.n	800261a <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80025e6:	2109      	movs	r1, #9
 80025e8:	6822      	ldr	r2, [r4, #0]
 80025ea:	438a      	bics	r2, r1
 80025ec:	4313      	orrs	r3, r2
 80025ee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80025f0:	f7fe fe7a 	bl	80012e8 <HAL_GetTick>
 80025f4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f6:	2204      	movs	r2, #4
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	4213      	tst	r3, r2
 80025fc:	d007      	beq.n	800260e <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fe:	6862      	ldr	r2, [r4, #4]
 8002600:	692b      	ldr	r3, [r5, #16]
 8002602:	4952      	ldr	r1, [pc, #328]	@ (800274c <HAL_RCC_OscConfig+0x30c>)
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	400a      	ands	r2, r1
 8002608:	4313      	orrs	r3, r2
 800260a:	6063      	str	r3, [r4, #4]
 800260c:	e72d      	b.n	800246a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260e:	f7fe fe6b 	bl	80012e8 <HAL_GetTick>
 8002612:	1bc0      	subs	r0, r0, r7
 8002614:	2802      	cmp	r0, #2
 8002616:	d9ee      	bls.n	80025f6 <HAL_RCC_OscConfig+0x1b6>
 8002618:	e787      	b.n	800252a <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 800261a:	2201      	movs	r2, #1
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	4393      	bics	r3, r2
 8002620:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002622:	f7fe fe61 	bl	80012e8 <HAL_GetTick>
 8002626:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002628:	2204      	movs	r2, #4
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	4213      	tst	r3, r2
 800262e:	d100      	bne.n	8002632 <HAL_RCC_OscConfig+0x1f2>
 8002630:	e71b      	b.n	800246a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002632:	f7fe fe59 	bl	80012e8 <HAL_GetTick>
 8002636:	1bc0      	subs	r0, r0, r7
 8002638:	2802      	cmp	r0, #2
 800263a:	d9f5      	bls.n	8002628 <HAL_RCC_OscConfig+0x1e8>
 800263c:	e775      	b.n	800252a <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800263e:	69eb      	ldr	r3, [r5, #28]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d020      	beq.n	8002686 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	6822      	ldr	r2, [r4, #0]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4313      	orrs	r3, r2
 800264c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800264e:	f7fe fe4b 	bl	80012e8 <HAL_GetTick>
 8002652:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002654:	2280      	movs	r2, #128	@ 0x80
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	0092      	lsls	r2, r2, #2
 800265a:	4213      	tst	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800265e:	6863      	ldr	r3, [r4, #4]
 8002660:	4a34      	ldr	r2, [pc, #208]	@ (8002734 <HAL_RCC_OscConfig+0x2f4>)
 8002662:	4013      	ands	r3, r2
 8002664:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8002666:	4313      	orrs	r3, r2
 8002668:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800266a:	6862      	ldr	r2, [r4, #4]
 800266c:	6a2b      	ldr	r3, [r5, #32]
 800266e:	0212      	lsls	r2, r2, #8
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	0a12      	lsrs	r2, r2, #8
 8002674:	4313      	orrs	r3, r2
 8002676:	6063      	str	r3, [r4, #4]
 8002678:	e723      	b.n	80024c2 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800267a:	f7fe fe35 	bl	80012e8 <HAL_GetTick>
 800267e:	1bc0      	subs	r0, r0, r7
 8002680:	2802      	cmp	r0, #2
 8002682:	d9e7      	bls.n	8002654 <HAL_RCC_OscConfig+0x214>
 8002684:	e751      	b.n	800252a <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	4a31      	ldr	r2, [pc, #196]	@ (8002750 <HAL_RCC_OscConfig+0x310>)
 800268a:	4013      	ands	r3, r2
 800268c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800268e:	f7fe fe2b 	bl	80012e8 <HAL_GetTick>
 8002692:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002694:	2280      	movs	r2, #128	@ 0x80
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	0092      	lsls	r2, r2, #2
 800269a:	4213      	tst	r3, r2
 800269c:	d100      	bne.n	80026a0 <HAL_RCC_OscConfig+0x260>
 800269e:	e710      	b.n	80024c2 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a0:	f7fe fe22 	bl	80012e8 <HAL_GetTick>
 80026a4:	1bc0      	subs	r0, r0, r7
 80026a6:	2802      	cmp	r0, #2
 80026a8:	d9f4      	bls.n	8002694 <HAL_RCC_OscConfig+0x254>
 80026aa:	e73e      	b.n	800252a <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ac:	696a      	ldr	r2, [r5, #20]
 80026ae:	2301      	movs	r3, #1
 80026b0:	2a00      	cmp	r2, #0
 80026b2:	d010      	beq.n	80026d6 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 80026b4:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80026b6:	4313      	orrs	r3, r2
 80026b8:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80026ba:	f7fe fe15 	bl	80012e8 <HAL_GetTick>
 80026be:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026c0:	2202      	movs	r2, #2
 80026c2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80026c4:	4213      	tst	r3, r2
 80026c6:	d000      	beq.n	80026ca <HAL_RCC_OscConfig+0x28a>
 80026c8:	e6ff      	b.n	80024ca <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ca:	f7fe fe0d 	bl	80012e8 <HAL_GetTick>
 80026ce:	1bc0      	subs	r0, r0, r7
 80026d0:	2802      	cmp	r0, #2
 80026d2:	d9f5      	bls.n	80026c0 <HAL_RCC_OscConfig+0x280>
 80026d4:	e729      	b.n	800252a <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 80026d6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80026d8:	439a      	bics	r2, r3
 80026da:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80026dc:	f7fe fe04 	bl	80012e8 <HAL_GetTick>
 80026e0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026e2:	2202      	movs	r2, #2
 80026e4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80026e6:	4213      	tst	r3, r2
 80026e8:	d100      	bne.n	80026ec <HAL_RCC_OscConfig+0x2ac>
 80026ea:	e6ee      	b.n	80024ca <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ec:	f7fe fdfc 	bl	80012e8 <HAL_GetTick>
 80026f0:	1bc0      	subs	r0, r0, r7
 80026f2:	2802      	cmp	r0, #2
 80026f4:	d9f5      	bls.n	80026e2 <HAL_RCC_OscConfig+0x2a2>
 80026f6:	e718      	b.n	800252a <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f8:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80026fa:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80026fe:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8002700:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002702:	421a      	tst	r2, r3
 8002704:	d104      	bne.n	8002710 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002708:	4313      	orrs	r3, r2
 800270a:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 800270c:	2301      	movs	r3, #1
 800270e:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	2280      	movs	r2, #128	@ 0x80
 8002712:	4f10      	ldr	r7, [pc, #64]	@ (8002754 <HAL_RCC_OscConfig+0x314>)
 8002714:	0052      	lsls	r2, r2, #1
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	4213      	tst	r3, r2
 800271a:	d01d      	beq.n	8002758 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271c:	2280      	movs	r2, #128	@ 0x80
 800271e:	68ab      	ldr	r3, [r5, #8]
 8002720:	0052      	lsls	r2, r2, #1
 8002722:	4293      	cmp	r3, r2
 8002724:	d12c      	bne.n	8002780 <HAL_RCC_OscConfig+0x340>
 8002726:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002728:	4313      	orrs	r3, r2
 800272a:	6523      	str	r3, [r4, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272c:	e04d      	b.n	80027ca <HAL_RCC_OscConfig+0x38a>
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	40021000 	.word	0x40021000
 8002734:	ffff1fff 	.word	0xffff1fff
 8002738:	08006645 	.word	0x08006645
 800273c:	20000014 	.word	0x20000014
 8002740:	2000001c 	.word	0x2000001c
 8002744:	fffeffff 	.word	0xfffeffff
 8002748:	fffbffff 	.word	0xfffbffff
 800274c:	ffffe0ff 	.word	0xffffe0ff
 8002750:	fffffeff 	.word	0xfffffeff
 8002754:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002758:	2280      	movs	r2, #128	@ 0x80
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	0052      	lsls	r2, r2, #1
 800275e:	4313      	orrs	r3, r2
 8002760:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002762:	f7fe fdc1 	bl	80012e8 <HAL_GetTick>
 8002766:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	2280      	movs	r2, #128	@ 0x80
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	0052      	lsls	r2, r2, #1
 800276e:	4213      	tst	r3, r2
 8002770:	d1d4      	bne.n	800271c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002772:	f7fe fdb9 	bl	80012e8 <HAL_GetTick>
 8002776:	9b01      	ldr	r3, [sp, #4]
 8002778:	1ac0      	subs	r0, r0, r3
 800277a:	2864      	cmp	r0, #100	@ 0x64
 800277c:	d9f4      	bls.n	8002768 <HAL_RCC_OscConfig+0x328>
 800277e:	e6d4      	b.n	800252a <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	2b00      	cmp	r3, #0
 8002782:	d116      	bne.n	80027b2 <HAL_RCC_OscConfig+0x372>
 8002784:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002786:	4a6b      	ldr	r2, [pc, #428]	@ (8002934 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	4013      	ands	r3, r2
 800278a:	6523      	str	r3, [r4, #80]	@ 0x50
 800278c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800278e:	4a6a      	ldr	r2, [pc, #424]	@ (8002938 <HAL_RCC_OscConfig+0x4f8>)
 8002790:	4013      	ands	r3, r2
 8002792:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8002794:	f7fe fda8 	bl	80012e8 <HAL_GetTick>
 8002798:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800279a:	2280      	movs	r2, #128	@ 0x80
 800279c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	4213      	tst	r3, r2
 80027a2:	d01a      	beq.n	80027da <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a4:	f7fe fda0 	bl	80012e8 <HAL_GetTick>
 80027a8:	4b64      	ldr	r3, [pc, #400]	@ (800293c <HAL_RCC_OscConfig+0x4fc>)
 80027aa:	1bc0      	subs	r0, r0, r7
 80027ac:	4298      	cmp	r0, r3
 80027ae:	d9f4      	bls.n	800279a <HAL_RCC_OscConfig+0x35a>
 80027b0:	e6bb      	b.n	800252a <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b2:	21a0      	movs	r1, #160	@ 0xa0
 80027b4:	00c9      	lsls	r1, r1, #3
 80027b6:	428b      	cmp	r3, r1
 80027b8:	d118      	bne.n	80027ec <HAL_RCC_OscConfig+0x3ac>
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6523      	str	r3, [r4, #80]	@ 0x50
 80027c4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80027c6:	431a      	orrs	r2, r3
 80027c8:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80027ca:	f7fe fd8d 	bl	80012e8 <HAL_GetTick>
 80027ce:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027d0:	2280      	movs	r2, #128	@ 0x80
 80027d2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	4213      	tst	r3, r2
 80027d8:	d010      	beq.n	80027fc <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 80027da:	9b00      	ldr	r3, [sp, #0]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d000      	beq.n	80027e2 <HAL_RCC_OscConfig+0x3a2>
 80027e0:	e677      	b.n	80024d2 <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80027e4:	4a56      	ldr	r2, [pc, #344]	@ (8002940 <HAL_RCC_OscConfig+0x500>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80027ea:	e672      	b.n	80024d2 <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80027ee:	4a51      	ldr	r2, [pc, #324]	@ (8002934 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	6523      	str	r3, [r4, #80]	@ 0x50
 80027f4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80027f6:	4a50      	ldr	r2, [pc, #320]	@ (8002938 <HAL_RCC_OscConfig+0x4f8>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	e796      	b.n	800272a <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe fd74 	bl	80012e8 <HAL_GetTick>
 8002800:	4b4e      	ldr	r3, [pc, #312]	@ (800293c <HAL_RCC_OscConfig+0x4fc>)
 8002802:	1bc0      	subs	r0, r0, r7
 8002804:	4298      	cmp	r0, r3
 8002806:	d9e3      	bls.n	80027d0 <HAL_RCC_OscConfig+0x390>
 8002808:	e68f      	b.n	800252a <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800280a:	69aa      	ldr	r2, [r5, #24]
 800280c:	2101      	movs	r1, #1
 800280e:	4b4d      	ldr	r3, [pc, #308]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 8002810:	2a00      	cmp	r2, #0
 8002812:	d018      	beq.n	8002846 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8002814:	68a2      	ldr	r2, [r4, #8]
 8002816:	430a      	orrs	r2, r1
 8002818:	60a2      	str	r2, [r4, #8]
 800281a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800281c:	430a      	orrs	r2, r1
 800281e:	6362      	str	r2, [r4, #52]	@ 0x34
 8002820:	2280      	movs	r2, #128	@ 0x80
 8002822:	6a19      	ldr	r1, [r3, #32]
 8002824:	0192      	lsls	r2, r2, #6
 8002826:	430a      	orrs	r2, r1
 8002828:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 800282a:	f7fe fd5d 	bl	80012e8 <HAL_GetTick>
 800282e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002830:	2202      	movs	r2, #2
 8002832:	68a3      	ldr	r3, [r4, #8]
 8002834:	4213      	tst	r3, r2
 8002836:	d000      	beq.n	800283a <HAL_RCC_OscConfig+0x3fa>
 8002838:	e64f      	b.n	80024da <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800283a:	f7fe fd55 	bl	80012e8 <HAL_GetTick>
 800283e:	1bc0      	subs	r0, r0, r7
 8002840:	2802      	cmp	r0, #2
 8002842:	d9f5      	bls.n	8002830 <HAL_RCC_OscConfig+0x3f0>
 8002844:	e671      	b.n	800252a <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 8002846:	68a2      	ldr	r2, [r4, #8]
 8002848:	438a      	bics	r2, r1
 800284a:	60a2      	str	r2, [r4, #8]
 800284c:	6a1a      	ldr	r2, [r3, #32]
 800284e:	493e      	ldr	r1, [pc, #248]	@ (8002948 <HAL_RCC_OscConfig+0x508>)
 8002850:	400a      	ands	r2, r1
 8002852:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8002854:	f7fe fd48 	bl	80012e8 <HAL_GetTick>
 8002858:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800285a:	2202      	movs	r2, #2
 800285c:	68a3      	ldr	r3, [r4, #8]
 800285e:	4213      	tst	r3, r2
 8002860:	d100      	bne.n	8002864 <HAL_RCC_OscConfig+0x424>
 8002862:	e63a      	b.n	80024da <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002864:	f7fe fd40 	bl	80012e8 <HAL_GetTick>
 8002868:	1bc0      	subs	r0, r0, r7
 800286a:	2802      	cmp	r0, #2
 800286c:	d9f5      	bls.n	800285a <HAL_RCC_OscConfig+0x41a>
 800286e:	e65c      	b.n	800252a <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002870:	2e0c      	cmp	r6, #12
 8002872:	d043      	beq.n	80028fc <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002874:	4a35      	ldr	r2, [pc, #212]	@ (800294c <HAL_RCC_OscConfig+0x50c>)
 8002876:	2b02      	cmp	r3, #2
 8002878:	d12e      	bne.n	80028d8 <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_DISABLE();
 800287a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800287c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800287e:	4013      	ands	r3, r2
 8002880:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002882:	f7fe fd31 	bl	80012e8 <HAL_GetTick>
 8002886:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002888:	04bf      	lsls	r7, r7, #18
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	423b      	tst	r3, r7
 800288e:	d11d      	bne.n	80028cc <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002890:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8002892:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002894:	68e2      	ldr	r2, [r4, #12]
 8002896:	430b      	orrs	r3, r1
 8002898:	492d      	ldr	r1, [pc, #180]	@ (8002950 <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800289a:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289c:	400a      	ands	r2, r1
 800289e:	4313      	orrs	r3, r2
 80028a0:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80028a2:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	6822      	ldr	r2, [r4, #0]
 80028ac:	045b      	lsls	r3, r3, #17
 80028ae:	4313      	orrs	r3, r2
 80028b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80028b2:	f7fe fd19 	bl	80012e8 <HAL_GetTick>
 80028b6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	4233      	tst	r3, r6
 80028bc:	d000      	beq.n	80028c0 <HAL_RCC_OscConfig+0x480>
 80028be:	e610      	b.n	80024e2 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe fd12 	bl	80012e8 <HAL_GetTick>
 80028c4:	1b40      	subs	r0, r0, r5
 80028c6:	2802      	cmp	r0, #2
 80028c8:	d9f6      	bls.n	80028b8 <HAL_RCC_OscConfig+0x478>
 80028ca:	e62e      	b.n	800252a <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe fd0c 	bl	80012e8 <HAL_GetTick>
 80028d0:	1b80      	subs	r0, r0, r6
 80028d2:	2802      	cmp	r0, #2
 80028d4:	d9d9      	bls.n	800288a <HAL_RCC_OscConfig+0x44a>
 80028d6:	e628      	b.n	800252a <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 80028d8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028da:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80028dc:	4013      	ands	r3, r2
 80028de:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80028e0:	f7fe fd02 	bl	80012e8 <HAL_GetTick>
 80028e4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028e6:	04b6      	lsls	r6, r6, #18
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	4233      	tst	r3, r6
 80028ec:	d100      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4b0>
 80028ee:	e5f8      	b.n	80024e2 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe fcfa 	bl	80012e8 <HAL_GetTick>
 80028f4:	1b40      	subs	r0, r0, r5
 80028f6:	2802      	cmp	r0, #2
 80028f8:	d9f6      	bls.n	80028e8 <HAL_RCC_OscConfig+0x4a8>
 80028fa:	e616      	b.n	800252a <HAL_RCC_OscConfig+0xea>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d100      	bne.n	8002902 <HAL_RCC_OscConfig+0x4c2>
 8002900:	e5fd      	b.n	80024fe <HAL_RCC_OscConfig+0xbe>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002902:	2380      	movs	r3, #128	@ 0x80
        pll_config = RCC->CFGR;
 8002904:	68e0      	ldr	r0, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8002908:	025b      	lsls	r3, r3, #9
 800290a:	4003      	ands	r3, r0
 800290c:	4293      	cmp	r3, r2
 800290e:	d000      	beq.n	8002912 <HAL_RCC_OscConfig+0x4d2>
 8002910:	e5f5      	b.n	80024fe <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002912:	23f0      	movs	r3, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002914:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002916:	039b      	lsls	r3, r3, #14
 8002918:	4003      	ands	r3, r0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291a:	4293      	cmp	r3, r2
 800291c:	d000      	beq.n	8002920 <HAL_RCC_OscConfig+0x4e0>
 800291e:	e5ee      	b.n	80024fe <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002920:	23c0      	movs	r3, #192	@ 0xc0
 8002922:	041b      	lsls	r3, r3, #16
 8002924:	4018      	ands	r0, r3
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002926:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002928:	1ac0      	subs	r0, r0, r3
 800292a:	1e43      	subs	r3, r0, #1
 800292c:	4198      	sbcs	r0, r3
 800292e:	b2c0      	uxtb	r0, r0
 8002930:	e5fc      	b.n	800252c <HAL_RCC_OscConfig+0xec>
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	fffffeff 	.word	0xfffffeff
 8002938:	fffffbff 	.word	0xfffffbff
 800293c:	00001388 	.word	0x00001388
 8002940:	efffffff 	.word	0xefffffff
 8002944:	40010000 	.word	0x40010000
 8002948:	ffffdfff 	.word	0xffffdfff
 800294c:	feffffff 	.word	0xfeffffff
 8002950:	ff02ffff 	.word	0xff02ffff

08002954 <HAL_RCC_ClockConfig>:
{
 8002954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002956:	1e04      	subs	r4, r0, #0
 8002958:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800295a:	d101      	bne.n	8002960 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800295c:	2001      	movs	r0, #1
}
 800295e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002960:	2501      	movs	r5, #1
 8002962:	4e5b      	ldr	r6, [pc, #364]	@ (8002ad0 <HAL_RCC_ClockConfig+0x17c>)
 8002964:	9a01      	ldr	r2, [sp, #4]
 8002966:	6833      	ldr	r3, [r6, #0]
 8002968:	402b      	ands	r3, r5
 800296a:	4293      	cmp	r3, r2
 800296c:	d331      	bcc.n	80029d2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296e:	6822      	ldr	r2, [r4, #0]
 8002970:	0793      	lsls	r3, r2, #30
 8002972:	d443      	bmi.n	80029fc <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002974:	07d2      	lsls	r2, r2, #31
 8002976:	d449      	bmi.n	8002a0c <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	2501      	movs	r5, #1
 800297a:	6833      	ldr	r3, [r6, #0]
 800297c:	9a01      	ldr	r2, [sp, #4]
 800297e:	402b      	ands	r3, r5
 8002980:	4293      	cmp	r3, r2
 8002982:	d909      	bls.n	8002998 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002984:	6833      	ldr	r3, [r6, #0]
 8002986:	43ab      	bics	r3, r5
 8002988:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800298a:	f7fe fcad 	bl	80012e8 <HAL_GetTick>
 800298e:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002990:	6833      	ldr	r3, [r6, #0]
 8002992:	422b      	tst	r3, r5
 8002994:	d000      	beq.n	8002998 <HAL_RCC_ClockConfig+0x44>
 8002996:	e08c      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002998:	6822      	ldr	r2, [r4, #0]
 800299a:	4d4e      	ldr	r5, [pc, #312]	@ (8002ad4 <HAL_RCC_ClockConfig+0x180>)
 800299c:	0753      	lsls	r3, r2, #29
 800299e:	d500      	bpl.n	80029a2 <HAL_RCC_ClockConfig+0x4e>
 80029a0:	e08f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a2:	0712      	lsls	r2, r2, #28
 80029a4:	d506      	bpl.n	80029b4 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029a6:	68ea      	ldr	r2, [r5, #12]
 80029a8:	6923      	ldr	r3, [r4, #16]
 80029aa:	494b      	ldr	r1, [pc, #300]	@ (8002ad8 <HAL_RCC_ClockConfig+0x184>)
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	400a      	ands	r2, r1
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029b4:	f7ff fcfa 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 80029b8:	68eb      	ldr	r3, [r5, #12]
 80029ba:	4a48      	ldr	r2, [pc, #288]	@ (8002adc <HAL_RCC_ClockConfig+0x188>)
 80029bc:	061b      	lsls	r3, r3, #24
 80029be:	0f1b      	lsrs	r3, r3, #28
 80029c0:	5cd3      	ldrb	r3, [r2, r3]
 80029c2:	4947      	ldr	r1, [pc, #284]	@ (8002ae0 <HAL_RCC_ClockConfig+0x18c>)
 80029c4:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 80029c6:	4b47      	ldr	r3, [pc, #284]	@ (8002ae4 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029c8:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	f7fe fc8a 	bl	80012e4 <HAL_InitTick>
  if(status != HAL_OK)
 80029d0:	e7c5      	b.n	800295e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	6833      	ldr	r3, [r6, #0]
 80029d4:	9a01      	ldr	r2, [sp, #4]
 80029d6:	43ab      	bics	r3, r5
 80029d8:	4313      	orrs	r3, r2
 80029da:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80029dc:	f7fe fc84 	bl	80012e8 <HAL_GetTick>
 80029e0:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	6833      	ldr	r3, [r6, #0]
 80029e4:	9a01      	ldr	r2, [sp, #4]
 80029e6:	402b      	ands	r3, r5
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d0c0      	beq.n	800296e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ec:	f7fe fc7c 	bl	80012e8 <HAL_GetTick>
 80029f0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae8 <HAL_RCC_ClockConfig+0x194>)
 80029f2:	1bc0      	subs	r0, r0, r7
 80029f4:	4298      	cmp	r0, r3
 80029f6:	d9f4      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80029f8:	2003      	movs	r0, #3
 80029fa:	e7b0      	b.n	800295e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	20f0      	movs	r0, #240	@ 0xf0
 80029fe:	4935      	ldr	r1, [pc, #212]	@ (8002ad4 <HAL_RCC_ClockConfig+0x180>)
 8002a00:	68cb      	ldr	r3, [r1, #12]
 8002a02:	4383      	bics	r3, r0
 8002a04:	68a0      	ldr	r0, [r4, #8]
 8002a06:	4303      	orrs	r3, r0
 8002a08:	60cb      	str	r3, [r1, #12]
 8002a0a:	e7b3      	b.n	8002974 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0c:	4d31      	ldr	r5, [pc, #196]	@ (8002ad4 <HAL_RCC_ClockConfig+0x180>)
 8002a0e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a10:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a12:	2a02      	cmp	r2, #2
 8002a14:	d118      	bne.n	8002a48 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a16:	039b      	lsls	r3, r3, #14
 8002a18:	d5a0      	bpl.n	800295c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1a:	2103      	movs	r1, #3
 8002a1c:	68eb      	ldr	r3, [r5, #12]
 8002a1e:	438b      	bics	r3, r1
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8002a24:	f7fe fc60 	bl	80012e8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a28:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002a2a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d118      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a30:	220c      	movs	r2, #12
 8002a32:	68eb      	ldr	r3, [r5, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d09e      	beq.n	8002978 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3a:	f7fe fc55 	bl	80012e8 <HAL_GetTick>
 8002a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae8 <HAL_RCC_ClockConfig+0x194>)
 8002a40:	1bc0      	subs	r0, r0, r7
 8002a42:	4298      	cmp	r0, r3
 8002a44:	d9f4      	bls.n	8002a30 <HAL_RCC_ClockConfig+0xdc>
 8002a46:	e7d7      	b.n	80029f8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a48:	2a03      	cmp	r2, #3
 8002a4a:	d102      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a4c:	019b      	lsls	r3, r3, #6
 8002a4e:	d4e4      	bmi.n	8002a1a <HAL_RCC_ClockConfig+0xc6>
 8002a50:	e784      	b.n	800295c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a52:	2a01      	cmp	r2, #1
 8002a54:	d102      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a56:	075b      	lsls	r3, r3, #29
 8002a58:	d4df      	bmi.n	8002a1a <HAL_RCC_ClockConfig+0xc6>
 8002a5a:	e77f      	b.n	800295c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a5c:	059b      	lsls	r3, r3, #22
 8002a5e:	d4dc      	bmi.n	8002a1a <HAL_RCC_ClockConfig+0xc6>
 8002a60:	e77c      	b.n	800295c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d10b      	bne.n	8002a7e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a66:	220c      	movs	r2, #12
 8002a68:	68eb      	ldr	r3, [r5, #12]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d083      	beq.n	8002978 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a70:	f7fe fc3a 	bl	80012e8 <HAL_GetTick>
 8002a74:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae8 <HAL_RCC_ClockConfig+0x194>)
 8002a76:	1bc0      	subs	r0, r0, r7
 8002a78:	4298      	cmp	r0, r3
 8002a7a:	d9f4      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x112>
 8002a7c:	e7bc      	b.n	80029f8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d011      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a82:	220c      	movs	r2, #12
 8002a84:	68eb      	ldr	r3, [r5, #12]
 8002a86:	4213      	tst	r3, r2
 8002a88:	d100      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x138>
 8002a8a:	e775      	b.n	8002978 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7fe fc2c 	bl	80012e8 <HAL_GetTick>
 8002a90:	4b15      	ldr	r3, [pc, #84]	@ (8002ae8 <HAL_RCC_ClockConfig+0x194>)
 8002a92:	1bc0      	subs	r0, r0, r7
 8002a94:	4298      	cmp	r0, r3
 8002a96:	d9f4      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x12e>
 8002a98:	e7ae      	b.n	80029f8 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9a:	f7fe fc25 	bl	80012e8 <HAL_GetTick>
 8002a9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <HAL_RCC_ClockConfig+0x194>)
 8002aa0:	1bc0      	subs	r0, r0, r7
 8002aa2:	4298      	cmp	r0, r3
 8002aa4:	d8a8      	bhi.n	80029f8 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	68eb      	ldr	r3, [r5, #12]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d1f4      	bne.n	8002a9a <HAL_RCC_ClockConfig+0x146>
 8002ab0:	e762      	b.n	8002978 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab2:	f7fe fc19 	bl	80012e8 <HAL_GetTick>
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <HAL_RCC_ClockConfig+0x194>)
 8002ab8:	1bc0      	subs	r0, r0, r7
 8002aba:	4298      	cmp	r0, r3
 8002abc:	d800      	bhi.n	8002ac0 <HAL_RCC_ClockConfig+0x16c>
 8002abe:	e767      	b.n	8002990 <HAL_RCC_ClockConfig+0x3c>
 8002ac0:	e79a      	b.n	80029f8 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac2:	68eb      	ldr	r3, [r5, #12]
 8002ac4:	4909      	ldr	r1, [pc, #36]	@ (8002aec <HAL_RCC_ClockConfig+0x198>)
 8002ac6:	400b      	ands	r3, r1
 8002ac8:	68e1      	ldr	r1, [r4, #12]
 8002aca:	430b      	orrs	r3, r1
 8002acc:	60eb      	str	r3, [r5, #12]
 8002ace:	e768      	b.n	80029a2 <HAL_RCC_ClockConfig+0x4e>
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	ffffc7ff 	.word	0xffffc7ff
 8002adc:	08006645 	.word	0x08006645
 8002ae0:	20000014 	.word	0x20000014
 8002ae4:	2000001c 	.word	0x2000001c
 8002ae8:	00001388 	.word	0x00001388
 8002aec:	fffff8ff 	.word	0xfffff8ff

08002af0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002af0:	4b04      	ldr	r3, [pc, #16]	@ (8002b04 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002af2:	4a05      	ldr	r2, [pc, #20]	@ (8002b08 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	4905      	ldr	r1, [pc, #20]	@ (8002b0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002af8:	055b      	lsls	r3, r3, #21
 8002afa:	0f5b      	lsrs	r3, r3, #29
 8002afc:	5ccb      	ldrb	r3, [r1, r3]
 8002afe:	6810      	ldr	r0, [r2, #0]
 8002b00:	40d8      	lsrs	r0, r3
}
 8002b02:	4770      	bx	lr
 8002b04:	40021000 	.word	0x40021000
 8002b08:	20000014 	.word	0x20000014
 8002b0c:	08006655 	.word	0x08006655

08002b10 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b10:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8002b12:	4a05      	ldr	r2, [pc, #20]	@ (8002b28 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4905      	ldr	r1, [pc, #20]	@ (8002b2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002b18:	049b      	lsls	r3, r3, #18
 8002b1a:	0f5b      	lsrs	r3, r3, #29
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	6810      	ldr	r0, [r2, #0]
 8002b20:	40d8      	lsrs	r0, r3
}
 8002b22:	4770      	bx	lr
 8002b24:	40021000 	.word	0x40021000
 8002b28:	20000014 	.word	0x20000014
 8002b2c:	08006655 	.word	0x08006655

08002b30 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b30:	6803      	ldr	r3, [r0, #0]
{
 8002b32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b34:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b36:	069b      	lsls	r3, r3, #26
 8002b38:	d52c      	bpl.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x64>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3a:	2380      	movs	r3, #128	@ 0x80
  FlagStatus       pwrclkchanged = RESET;
 8002b3c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3e:	4c5f      	ldr	r4, [pc, #380]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002b40:	055b      	lsls	r3, r3, #21
 8002b42:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
  FlagStatus       pwrclkchanged = RESET;
 8002b44:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b46:	421a      	tst	r2, r3
 8002b48:	d104      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 8002b50:	2301      	movs	r3, #1
 8002b52:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	2780      	movs	r7, #128	@ 0x80
 8002b56:	4e5a      	ldr	r6, [pc, #360]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002b58:	007f      	lsls	r7, r7, #1
 8002b5a:	6833      	ldr	r3, [r6, #0]
 8002b5c:	423b      	tst	r3, r7
 8002b5e:	d054      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0xda>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002b60:	20c0      	movs	r0, #192	@ 0xc0
 8002b62:	22c0      	movs	r2, #192	@ 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002b64:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002b66:	686b      	ldr	r3, [r5, #4]
 8002b68:	0380      	lsls	r0, r0, #14
 8002b6a:	4059      	eors	r1, r3
 8002b6c:	0292      	lsls	r2, r2, #10
 8002b6e:	4201      	tst	r1, r0
 8002b70:	d15c      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xfc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b72:	6d20      	ldr	r0, [r4, #80]	@ 0x50

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b74:	6829      	ldr	r1, [r5, #0]
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b76:	0006      	movs	r6, r0
 8002b78:	4016      	ands	r6, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b7a:	4210      	tst	r0, r2
 8002b7c:	d15f      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b7e:	682b      	ldr	r3, [r5, #0]
 8002b80:	069b      	lsls	r3, r3, #26
 8002b82:	d500      	bpl.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b84:	e06f      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b86:	9b00      	ldr	r3, [sp, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d103      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002b8e:	4a4d      	ldr	r2, [pc, #308]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b94:	682b      	ldr	r3, [r5, #0]
 8002b96:	07da      	lsls	r2, r3, #31
 8002b98:	d506      	bpl.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b9a:	2003      	movs	r0, #3
 8002b9c:	4947      	ldr	r1, [pc, #284]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002b9e:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8002ba0:	4382      	bics	r2, r0
 8002ba2:	68a8      	ldr	r0, [r5, #8]
 8002ba4:	4302      	orrs	r2, r0
 8002ba6:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ba8:	079a      	lsls	r2, r3, #30
 8002baa:	d506      	bpl.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bac:	200c      	movs	r0, #12
 8002bae:	4943      	ldr	r1, [pc, #268]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002bb0:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8002bb2:	4382      	bics	r2, r0
 8002bb4:	68e8      	ldr	r0, [r5, #12]
 8002bb6:	4302      	orrs	r2, r0
 8002bb8:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bba:	075a      	lsls	r2, r3, #29
 8002bbc:	d506      	bpl.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bbe:	493f      	ldr	r1, [pc, #252]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002bc0:	4841      	ldr	r0, [pc, #260]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002bc2:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8002bc4:	4002      	ands	r2, r0
 8002bc6:	6928      	ldr	r0, [r5, #16]
 8002bc8:	4302      	orrs	r2, r0
 8002bca:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bcc:	071a      	lsls	r2, r3, #28
 8002bce:	d506      	bpl.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bd0:	493a      	ldr	r1, [pc, #232]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002bd2:	483e      	ldr	r0, [pc, #248]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002bd4:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8002bd6:	4002      	ands	r2, r0
 8002bd8:	6968      	ldr	r0, [r5, #20]
 8002bda:	4302      	orrs	r2, r0
 8002bdc:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bde:	05da      	lsls	r2, r3, #23
 8002be0:	d506      	bpl.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002be2:	4936      	ldr	r1, [pc, #216]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002be4:	483a      	ldr	r0, [pc, #232]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002be6:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8002be8:	4002      	ands	r2, r0
 8002bea:	69a8      	ldr	r0, [r5, #24]
 8002bec:	4302      	orrs	r2, r0
 8002bee:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bf0:	065a      	lsls	r2, r3, #25
 8002bf2:	d506      	bpl.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bf4:	4931      	ldr	r1, [pc, #196]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002bf6:	4837      	ldr	r0, [pc, #220]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bf8:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8002bfa:	4002      	ands	r2, r0
 8002bfc:	6a28      	ldr	r0, [r5, #32]
 8002bfe:	4302      	orrs	r2, r0
 8002c00:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c02:	061b      	lsls	r3, r3, #24
 8002c04:	d452      	bmi.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8002c06:	2000      	movs	r0, #0
 8002c08:	e00f      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0a:	6833      	ldr	r3, [r6, #0]
 8002c0c:	433b      	orrs	r3, r7
 8002c0e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002c10:	f7fe fb6a 	bl	80012e8 <HAL_GetTick>
 8002c14:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	6833      	ldr	r3, [r6, #0]
 8002c18:	423b      	tst	r3, r7
 8002c1a:	d1a1      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1c:	f7fe fb64 	bl	80012e8 <HAL_GetTick>
 8002c20:	9b01      	ldr	r3, [sp, #4]
 8002c22:	1ac0      	subs	r0, r0, r3
 8002c24:	2864      	cmp	r0, #100	@ 0x64
 8002c26:	d9f6      	bls.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          return HAL_TIMEOUT;
 8002c28:	2003      	movs	r0, #3
}
 8002c2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	4011      	ands	r1, r2
 8002c30:	4291      	cmp	r1, r2
 8002c32:	d19e      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002c34:	6821      	ldr	r1, [r4, #0]
          return HAL_ERROR;
 8002c36:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002c38:	0389      	lsls	r1, r1, #14
 8002c3a:	d59a      	bpl.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002c3c:	e7f5      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002c3e:	4013      	ands	r3, r2
 8002c40:	42b3      	cmp	r3, r6
 8002c42:	d09c      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c44:	0689      	lsls	r1, r1, #26
 8002c46:	d59e      	bpl.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c48:	2180      	movs	r1, #128	@ 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002c4a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c4c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002c4e:	0309      	lsls	r1, r1, #12
 8002c50:	4301      	orrs	r1, r0
 8002c52:	6521      	str	r1, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c54:	6d21      	ldr	r1, [r4, #80]	@ 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002c56:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c58:	481f      	ldr	r0, [pc, #124]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002c5a:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c5c:	4001      	ands	r1, r0
 8002c5e:	6521      	str	r1, [r4, #80]	@ 0x50
      RCC->CSR = temp_reg;
 8002c60:	6522      	str	r2, [r4, #80]	@ 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002c62:	05db      	lsls	r3, r3, #23
 8002c64:	d412      	bmi.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c66:	6869      	ldr	r1, [r5, #4]
 8002c68:	23c0      	movs	r3, #192	@ 0xc0
 8002c6a:	000a      	movs	r2, r1
 8002c6c:	029b      	lsls	r3, r3, #10
 8002c6e:	401a      	ands	r2, r3
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d107      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	4819      	ldr	r0, [pc, #100]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c78:	4003      	ands	r3, r0
 8002c7a:	20c0      	movs	r0, #192	@ 0xc0
 8002c7c:	0380      	lsls	r0, r0, #14
 8002c7e:	4001      	ands	r1, r0
 8002c80:	430b      	orrs	r3, r1
 8002c82:	6023      	str	r3, [r4, #0]
 8002c84:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002c86:	431a      	orrs	r2, r3
 8002c88:	6522      	str	r2, [r4, #80]	@ 0x50
 8002c8a:	e77c      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x56>
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fb2c 	bl	80012e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c90:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002c92:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c94:	00bf      	lsls	r7, r7, #2
 8002c96:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002c98:	423b      	tst	r3, r7
 8002c9a:	d000      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002c9c:	e76f      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fe fb23 	bl	80012e8 <HAL_GetTick>
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ca4:	1b80      	subs	r0, r0, r6
 8002ca6:	4298      	cmp	r0, r3
 8002ca8:	d9f5      	bls.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002caa:	e7bd      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002cac:	4a03      	ldr	r2, [pc, #12]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002cae:	490d      	ldr	r1, [pc, #52]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002cb0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002cb2:	400b      	ands	r3, r1
 8002cb4:	69e9      	ldr	r1, [r5, #28]
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cba:	e7a4      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	efffffff 	.word	0xefffffff
 8002cc8:	fffff3ff 	.word	0xfffff3ff
 8002ccc:	ffffcfff 	.word	0xffffcfff
 8002cd0:	fffcffff 	.word	0xfffcffff
 8002cd4:	fbffffff 	.word	0xfbffffff
 8002cd8:	fff7ffff 	.word	0xfff7ffff
 8002cdc:	ffcfffff 	.word	0xffcfffff
 8002ce0:	00001388 	.word	0x00001388
 8002ce4:	fff3ffff 	.word	0xfff3ffff

08002ce8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cea:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002cec:	1c45      	adds	r5, r0, #1
 8002cee:	7feb      	ldrb	r3, [r5, #31]
{
 8002cf0:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8002cf2:	0038      	movs	r0, r7
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d024      	beq.n	8002d42 <HAL_RTC_DeactivateAlarm+0x5a>
 8002cf8:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cfa:	22ca      	movs	r2, #202	@ 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cfc:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 8002cfe:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d00:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d06:	3a77      	subs	r2, #119	@ 0x77
 8002d08:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8002d0a:	32ad      	adds	r2, #173	@ 0xad
 8002d0c:	4291      	cmp	r1, r2
 8002d0e:	d128      	bne.n	8002d62 <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	4920      	ldr	r1, [pc, #128]	@ (8002d94 <HAL_RTC_DeactivateAlarm+0xac>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d14:	27fa      	movs	r7, #250	@ 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002d16:	400a      	ands	r2, r1
 8002d18:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	491e      	ldr	r1, [pc, #120]	@ (8002d98 <HAL_RTC_DeactivateAlarm+0xb0>)
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d1e:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002d20:	400a      	ands	r2, r1
 8002d22:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002d24:	f7fe fae0 	bl	80012e8 <HAL_GetTick>
 8002d28:	9001      	str	r0, [sp, #4]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4213      	tst	r3, r2
 8002d32:	d007      	beq.n	8002d44 <HAL_RTC_DeactivateAlarm+0x5c>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d34:	22ff      	movs	r2, #255	@ 0xff
 8002d36:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d38:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8002d40:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 8002d42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d44:	f7fe fad0 	bl	80012e8 <HAL_GetTick>
 8002d48:	9b01      	ldr	r3, [sp, #4]
 8002d4a:	1ac0      	subs	r0, r0, r3
 8002d4c:	42b8      	cmp	r0, r7
 8002d4e:	d9ec      	bls.n	8002d2a <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d50:	22ff      	movs	r2, #255	@ 0xff
 8002d52:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002d54:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d56:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	77eb      	strb	r3, [r5, #31]
 8002d60:	e7ef      	b.n	8002d42 <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	490d      	ldr	r1, [pc, #52]	@ (8002d9c <HAL_RTC_DeactivateAlarm+0xb4>)
 8002d66:	400a      	ands	r2, r1
 8002d68:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	490c      	ldr	r1, [pc, #48]	@ (8002da0 <HAL_RTC_DeactivateAlarm+0xb8>)
 8002d6e:	400a      	ands	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002d72:	f7fe fab9 	bl	80012e8 <HAL_GetTick>
 8002d76:	9001      	str	r0, [sp, #4]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	423b      	tst	r3, r7
 8002d7e:	d1d9      	bne.n	8002d34 <HAL_RTC_DeactivateAlarm+0x4c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d80:	f7fe fab2 	bl	80012e8 <HAL_GetTick>
 8002d84:	9b01      	ldr	r3, [sp, #4]
 8002d86:	1ac0      	subs	r0, r0, r3
 8002d88:	23fa      	movs	r3, #250	@ 0xfa
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4298      	cmp	r0, r3
 8002d8e:	d9f3      	bls.n	8002d78 <HAL_RTC_DeactivateAlarm+0x90>
 8002d90:	e7de      	b.n	8002d50 <HAL_RTC_DeactivateAlarm+0x68>
 8002d92:	46c0      	nop			@ (mov r8, r8)
 8002d94:	fffffeff 	.word	0xfffffeff
 8002d98:	ffffefff 	.word	0xffffefff
 8002d9c:	fffffdff 	.word	0xfffffdff
 8002da0:	ffffdfff 	.word	0xffffdfff

08002da4 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002da4:	2280      	movs	r2, #128	@ 0x80
 8002da6:	4b13      	ldr	r3, [pc, #76]	@ (8002df4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8002da8:	0292      	lsls	r2, r2, #10
{
 8002daa:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002dac:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002dae:	6803      	ldr	r3, [r0, #0]
{
 8002db0:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	04d2      	lsls	r2, r2, #19
 8002db6:	d509      	bpl.n	8002dcc <HAL_RTC_AlarmIRQHandler+0x28>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	05d2      	lsls	r2, r2, #23
 8002dbc:	d506      	bpl.n	8002dcc <HAL_RTC_AlarmIRQHandler+0x28>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002dbe:	68d9      	ldr	r1, [r3, #12]
 8002dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002df8 <HAL_RTC_AlarmIRQHandler+0x54>)
 8002dc2:	b2c9      	uxtb	r1, r1
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002dc8:	f7fe f947 	bl	800105a <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	0492      	lsls	r2, r2, #18
 8002dd2:	d50a      	bpl.n	8002dea <HAL_RTC_AlarmIRQHandler+0x46>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	0592      	lsls	r2, r2, #22
 8002dd8:	d507      	bpl.n	8002dea <HAL_RTC_AlarmIRQHandler+0x46>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002dda:	68d9      	ldr	r1, [r3, #12]
 8002ddc:	4a07      	ldr	r2, [pc, #28]	@ (8002dfc <HAL_RTC_AlarmIRQHandler+0x58>)
 8002dde:	b2c9      	uxtb	r1, r1
 8002de0:	430a      	orrs	r2, r1

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002de2:	0020      	movs	r0, r4
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002de4:	60da      	str	r2, [r3, #12]
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002de6:	f000 fabb 	bl	8003360 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002dea:	2301      	movs	r3, #1
 8002dec:	3402      	adds	r4, #2
 8002dee:	77e3      	strb	r3, [r4, #31]
}
 8002df0:	bd10      	pop	{r4, pc}
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	40010400 	.word	0x40010400
 8002df8:	fffffe7f 	.word	0xfffffe7f
 8002dfc:	fffffd7f 	.word	0xfffffd7f

08002e00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002e02:	4a0b      	ldr	r2, [pc, #44]	@ (8002e30 <HAL_RTC_WaitForSynchro+0x30>)
 8002e04:	6803      	ldr	r3, [r0, #0]
{
 8002e06:	0004      	movs	r4, r0
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002e08:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e0a:	f7fe fa6d 	bl	80012e8 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e0e:	27fa      	movs	r7, #250	@ 0xfa
  tickstart = HAL_GetTick();
 8002e10:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e12:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e14:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	4233      	tst	r3, r6
 8002e1c:	d001      	beq.n	8002e22 <HAL_RTC_WaitForSynchro+0x22>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002e1e:	2000      	movs	r0, #0
}
 8002e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e22:	f7fe fa61 	bl	80012e8 <HAL_GetTick>
 8002e26:	1b40      	subs	r0, r0, r5
 8002e28:	42b8      	cmp	r0, r7
 8002e2a:	d9f4      	bls.n	8002e16 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8002e2c:	2003      	movs	r0, #3
 8002e2e:	e7f7      	b.n	8002e20 <HAL_RTC_WaitForSynchro+0x20>
 8002e30:	0001ff5f 	.word	0x0001ff5f

08002e34 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002e36:	2640      	movs	r6, #64	@ 0x40
 8002e38:	6803      	ldr	r3, [r0, #0]
{
 8002e3a:	0004      	movs	r4, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002e3c:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3e:	2500      	movs	r5, #0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002e40:	4232      	tst	r2, r6
 8002e42:	d10e      	bne.n	8002e62 <RTC_EnterInitMode+0x2e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e44:	2280      	movs	r2, #128	@ 0x80
 8002e46:	68d9      	ldr	r1, [r3, #12]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e48:	27fa      	movs	r7, #250	@ 0xfa
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002e4e:	f7fe fa4b 	bl	80012e8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e52:	00bf      	lsls	r7, r7, #2
    tickstart = HAL_GetTick();
 8002e54:	9001      	str	r0, [sp, #4]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	4233      	tst	r3, r6
 8002e5c:	d101      	bne.n	8002e62 <RTC_EnterInitMode+0x2e>
 8002e5e:	2d01      	cmp	r5, #1
 8002e60:	d101      	bne.n	8002e66 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
}
 8002e62:	0028      	movs	r0, r5
 8002e64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e66:	f7fe fa3f 	bl	80012e8 <HAL_GetTick>
 8002e6a:	9b01      	ldr	r3, [sp, #4]
 8002e6c:	1ac0      	subs	r0, r0, r3
 8002e6e:	42b8      	cmp	r0, r7
 8002e70:	d9f1      	bls.n	8002e56 <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e72:	2204      	movs	r2, #4
 8002e74:	1ca3      	adds	r3, r4, #2
        status = HAL_ERROR;
 8002e76:	2501      	movs	r5, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e78:	77da      	strb	r2, [r3, #31]
        status = HAL_ERROR;
 8002e7a:	e7ec      	b.n	8002e56 <RTC_EnterInitMode+0x22>

08002e7c <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e7c:	2180      	movs	r1, #128	@ 0x80
 8002e7e:	6803      	ldr	r3, [r0, #0]
{
 8002e80:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e82:	68da      	ldr	r2, [r3, #12]
{
 8002e84:	0004      	movs	r4, r0
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e86:	438a      	bics	r2, r1
 8002e88:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	069b      	lsls	r3, r3, #26
 8002e8e:	d501      	bpl.n	8002e94 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8002e90:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8002e92:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e94:	f7ff ffb4 	bl	8002e00 <HAL_RTC_WaitForSynchro>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	d0f9      	beq.n	8002e90 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	3402      	adds	r4, #2
      status = HAL_ERROR;
 8002ea0:	2001      	movs	r0, #1
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ea2:	77e3      	strb	r3, [r4, #31]
      status = HAL_ERROR;
 8002ea4:	e7f5      	b.n	8002e92 <RTC_ExitInitMode+0x16>
	...

08002ea8 <HAL_RTC_Init>:
{
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002eac:	2001      	movs	r0, #1
  if (hrtc == NULL)
 8002eae:	2c00      	cmp	r4, #0
 8002eb0:	d012      	beq.n	8002ed8 <HAL_RTC_Init+0x30>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002eb2:	1ca5      	adds	r5, r4, #2
 8002eb4:	7feb      	ldrb	r3, [r5, #31]
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d104      	bne.n	8002ec6 <HAL_RTC_Init+0x1e>
    hrtc->Lock = HAL_UNLOCKED;
 8002ebc:	1823      	adds	r3, r4, r0
 8002ebe:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8002ec0:	0020      	movs	r0, r4
 8002ec2:	f7fd fee1 	bl	8000c88 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	77eb      	strb	r3, [r5, #31]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	06d2      	lsls	r2, r2, #27
 8002ed0:	d503      	bpl.n	8002eda <HAL_RTC_Init+0x32>
    hrtc->State = HAL_RTC_STATE_READY;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	77eb      	strb	r3, [r5, #31]
}
 8002ed8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eda:	22ca      	movs	r2, #202	@ 0xca
 8002edc:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ede:	3a77      	subs	r2, #119	@ 0x77
    status = RTC_EnterInitMode(hrtc);
 8002ee0:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8002ee4:	f7ff ffa6 	bl	8002e34 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d123      	bne.n	8002f34 <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	4914      	ldr	r1, [pc, #80]	@ (8002f40 <HAL_RTC_Init+0x98>)
 8002ef0:	689a      	ldr	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ef2:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ef8:	6862      	ldr	r2, [r4, #4]
 8002efa:	6899      	ldr	r1, [r3, #8]
 8002efc:	4302      	orrs	r2, r0
 8002efe:	69a0      	ldr	r0, [r4, #24]
 8002f00:	4302      	orrs	r2, r0
 8002f02:	430a      	orrs	r2, r1
 8002f04:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f06:	68e2      	ldr	r2, [r4, #12]
      status = RTC_ExitInitMode(hrtc);
 8002f08:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f0a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002f0c:	68a2      	ldr	r2, [r4, #8]
 8002f0e:	6919      	ldr	r1, [r3, #16]
 8002f10:	0412      	lsls	r2, r2, #16
 8002f12:	430a      	orrs	r2, r1
 8002f14:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8002f16:	f7ff ffb1 	bl	8002e7c <RTC_ExitInitMode>
    if (status == HAL_OK)
 8002f1a:	2800      	cmp	r0, #0
 8002f1c:	d10a      	bne.n	8002f34 <HAL_RTC_Init+0x8c>
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002f1e:	2103      	movs	r1, #3
 8002f20:	6822      	ldr	r2, [r4, #0]
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002f22:	6966      	ldr	r6, [r4, #20]
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002f24:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002f26:	438b      	bics	r3, r1
 8002f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002f2a:	69e3      	ldr	r3, [r4, #28]
 8002f2c:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8002f2e:	4333      	orrs	r3, r6
 8002f30:	430b      	orrs	r3, r1
 8002f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f34:	22ff      	movs	r2, #255	@ 0xff
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	d0c9      	beq.n	8002ed2 <HAL_RTC_Init+0x2a>
 8002f3e:	e7cb      	b.n	8002ed8 <HAL_RTC_Init+0x30>
 8002f40:	ff8fffbf 	.word	0xff8fffbf

08002f44 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8002f44:	2300      	movs	r3, #0

  while (number >= 10U)
 8002f46:	2809      	cmp	r0, #9
 8002f48:	d803      	bhi.n	8002f52 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	4318      	orrs	r0, r3
 8002f4e:	b2c0      	uxtb	r0, r0
}
 8002f50:	4770      	bx	lr
    number -= 10U;
 8002f52:	380a      	subs	r0, #10
    bcdhigh++;
 8002f54:	3301      	adds	r3, #1
    number -= 10U;
 8002f56:	b2c0      	uxtb	r0, r0
 8002f58:	e7f5      	b.n	8002f46 <RTC_ByteToBcd2+0x2>
	...

08002f5c <HAL_RTC_SetTime>:
{
 8002f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002f5e:	1c43      	adds	r3, r0, #1
 8002f60:	9300      	str	r3, [sp, #0]
{
 8002f62:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8002f64:	7fd9      	ldrb	r1, [r3, #31]
 8002f66:	2302      	movs	r3, #2
{
 8002f68:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	2901      	cmp	r1, #1
 8002f6e:	d048      	beq.n	8003002 <HAL_RTC_SetTime+0xa6>
 8002f70:	2101      	movs	r1, #1
 8002f72:	1868      	adds	r0, r5, r1
 8002f74:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f76:	18e9      	adds	r1, r5, r3
 8002f78:	77cb      	strb	r3, [r1, #31]
 8002f7a:	9101      	str	r1, [sp, #4]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f7c:	682f      	ldr	r7, [r5, #0]
 8002f7e:	7820      	ldrb	r0, [r4, #0]
 8002f80:	7866      	ldrb	r6, [r4, #1]
 8002f82:	333e      	adds	r3, #62	@ 0x3e
  if (Format == RTC_FORMAT_BIN)
 8002f84:	2a00      	cmp	r2, #0
 8002f86:	d13d      	bne.n	8003004 <HAL_RTC_SetTime+0xa8>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	0011      	movs	r1, r2
 8002f8c:	4019      	ands	r1, r3
 8002f8e:	421a      	tst	r2, r3
 8002f90:	d100      	bne.n	8002f94 <HAL_RTC_SetTime+0x38>
      sTime->TimeFormat = 0x00U;
 8002f92:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f94:	f7ff ffd6 	bl	8002f44 <RTC_ByteToBcd2>
 8002f98:	9001      	str	r0, [sp, #4]
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f9a:	0030      	movs	r0, r6
 8002f9c:	f7ff ffd2 	bl	8002f44 <RTC_ByteToBcd2>
 8002fa0:	0006      	movs	r6, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002fa2:	78a0      	ldrb	r0, [r4, #2]
 8002fa4:	f7ff ffce 	bl	8002f44 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002fa8:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002faa:	9a01      	ldr	r2, [sp, #4]
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002fac:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002fae:	4303      	orrs	r3, r0
 8002fb0:	0412      	lsls	r2, r2, #16
 8002fb2:	4313      	orrs	r3, r2
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fb4:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fb6:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fb8:	23ca      	movs	r3, #202	@ 0xca
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fbc:	3b77      	subs	r3, #119	@ 0x77
  status = RTC_EnterInitMode(hrtc);
 8002fbe:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8002fc2:	f7ff ff37 	bl	8002e34 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d115      	bne.n	8002ff6 <HAL_RTC_SetTime+0x9a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002fca:	4a15      	ldr	r2, [pc, #84]	@ (8003020 <HAL_RTC_SetTime+0xc4>)
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	4016      	ands	r6, r2
 8002fd0:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	4913      	ldr	r1, [pc, #76]	@ (8003024 <HAL_RTC_SetTime+0xc8>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002fd6:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002fd8:	400a      	ands	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002fdc:	68e2      	ldr	r2, [r4, #12]
 8002fde:	6899      	ldr	r1, [r3, #8]
 8002fe0:	4302      	orrs	r2, r0
 8002fe2:	430a      	orrs	r2, r1
    status = RTC_ExitInitMode(hrtc);
 8002fe4:	0028      	movs	r0, r5
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002fe6:	609a      	str	r2, [r3, #8]
    status = RTC_ExitInitMode(hrtc);
 8002fe8:	f7ff ff48 	bl	8002e7c <RTC_ExitInitMode>
  if (status == HAL_OK)
 8002fec:	2800      	cmp	r0, #0
 8002fee:	d102      	bne.n	8002ff6 <HAL_RTC_SetTime+0x9a>
    hrtc->State = HAL_RTC_STATE_READY;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	1caa      	adds	r2, r5, #2
 8002ff4:	77d3      	strb	r3, [r2, #31]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ff6:	22ff      	movs	r2, #255	@ 0xff
 8002ff8:	682b      	ldr	r3, [r5, #0]
 8002ffa:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	9a00      	ldr	r2, [sp, #0]
 8003000:	77d3      	strb	r3, [r2, #31]
}
 8003002:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	0011      	movs	r1, r2
 8003008:	4019      	ands	r1, r3
 800300a:	421a      	tst	r2, r3
 800300c:	d100      	bne.n	8003010 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 800300e:	70e1      	strb	r1, [r4, #3]
              ((uint32_t) sTime->Seconds)                       | \
 8003010:	78a3      	ldrb	r3, [r4, #2]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003012:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003014:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003016:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003018:	431e      	orrs	r6, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800301a:	78e3      	ldrb	r3, [r4, #3]
 800301c:	059b      	lsls	r3, r3, #22
 800301e:	e7ca      	b.n	8002fb6 <HAL_RTC_SetTime+0x5a>
 8003020:	007f7f7f 	.word	0x007f7f7f
 8003024:	fffbffff 	.word	0xfffbffff

08003028 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8003028:	2302      	movs	r3, #2
{
 800302a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800302c:	1c46      	adds	r6, r0, #1
{
 800302e:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8003030:	7ff1      	ldrb	r1, [r6, #31]
{
 8003032:	0004      	movs	r4, r0
 8003034:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8003036:	0018      	movs	r0, r3
 8003038:	2901      	cmp	r1, #1
 800303a:	d02c      	beq.n	8003096 <HAL_RTC_SetDate+0x6e>
 800303c:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800303e:	18e7      	adds	r7, r4, r3
  __HAL_LOCK(hrtc);
 8003040:	77f1      	strb	r1, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003042:	77fb      	strb	r3, [r7, #31]
                  ((uint32_t) sDate->Date)                      | \
 8003044:	78a9      	ldrb	r1, [r5, #2]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003046:	78e8      	ldrb	r0, [r5, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003048:	786b      	ldrb	r3, [r5, #1]
                  ((uint32_t) sDate->Date)                      | \
 800304a:	9101      	str	r1, [sp, #4]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800304c:	7829      	ldrb	r1, [r5, #0]
 800304e:	0349      	lsls	r1, r1, #13
 8003050:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003052:	2a00      	cmp	r2, #0
 8003054:	d021      	beq.n	800309a <HAL_RTC_SetDate+0x72>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003056:	9a01      	ldr	r2, [sp, #4]
 8003058:	0405      	lsls	r5, r0, #16
 800305a:	430d      	orrs	r5, r1
 800305c:	4315      	orrs	r5, r2
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800305e:	021b      	lsls	r3, r3, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003060:	22ca      	movs	r2, #202	@ 0xca
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003062:	431d      	orrs	r5, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003064:	6823      	ldr	r3, [r4, #0]
  status = RTC_EnterInitMode(hrtc);
 8003066:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003068:	625a      	str	r2, [r3, #36]	@ 0x24
 800306a:	3a77      	subs	r2, #119	@ 0x77
 800306c:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 800306e:	f7ff fee1 	bl	8002e34 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8003072:	2800      	cmp	r0, #0
 8003074:	d10a      	bne.n	800308c <HAL_RTC_SetDate+0x64>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003076:	4a14      	ldr	r2, [pc, #80]	@ (80030c8 <HAL_RTC_SetDate+0xa0>)
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	4015      	ands	r5, r2
    status = RTC_ExitInitMode(hrtc);
 800307c:	0020      	movs	r0, r4
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800307e:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8003080:	f7ff fefc 	bl	8002e7c <RTC_ExitInitMode>
  if (status == HAL_OK)
 8003084:	2800      	cmp	r0, #0
 8003086:	d101      	bne.n	800308c <HAL_RTC_SetDate+0x64>
    hrtc->State = HAL_RTC_STATE_READY;
 8003088:	2301      	movs	r3, #1
 800308a:	77fb      	strb	r3, [r7, #31]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800308c:	22ff      	movs	r2, #255	@ 0xff
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8003092:	2300      	movs	r3, #0
 8003094:	77f3      	strb	r3, [r6, #31]
}
 8003096:	b005      	add	sp, #20
 8003098:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800309a:	2210      	movs	r2, #16
 800309c:	4213      	tst	r3, r2
 800309e:	d002      	beq.n	80030a6 <HAL_RTC_SetDate+0x7e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80030a0:	4393      	bics	r3, r2
 80030a2:	330a      	adds	r3, #10
 80030a4:	706b      	strb	r3, [r5, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030a6:	f7ff ff4d 	bl	8002f44 <RTC_ByteToBcd2>
 80030aa:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030ac:	7868      	ldrb	r0, [r5, #1]
 80030ae:	f7ff ff49 	bl	8002f44 <RTC_ByteToBcd2>
 80030b2:	0005      	movs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80030b4:	9801      	ldr	r0, [sp, #4]
 80030b6:	f7ff ff45 	bl	8002f44 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030ba:	9b03      	ldr	r3, [sp, #12]
 80030bc:	9a02      	ldr	r2, [sp, #8]
 80030be:	041b      	lsls	r3, r3, #16
 80030c0:	4310      	orrs	r0, r2
 80030c2:	4303      	orrs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030c4:	022d      	lsls	r5, r5, #8
 80030c6:	e7cb      	b.n	8003060 <HAL_RTC_SetDate+0x38>
 80030c8:	00ffff3f 	.word	0x00ffff3f

080030cc <HAL_RTC_SetAlarm_IT>:
{
 80030cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ce:	000d      	movs	r5, r1
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80030d0:	21fa      	movs	r1, #250	@ 0xfa
 80030d2:	4b60      	ldr	r3, [pc, #384]	@ (8003254 <HAL_RTC_SetAlarm_IT+0x188>)
{
 80030d4:	b087      	sub	sp, #28
 80030d6:	0006      	movs	r6, r0
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80030d8:	01c9      	lsls	r1, r1, #7
 80030da:	6818      	ldr	r0, [r3, #0]
{
 80030dc:	9202      	str	r2, [sp, #8]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80030de:	f7fd f825 	bl	800012c <__udivsi3>
 80030e2:	23fa      	movs	r3, #250	@ 0xfa
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4343      	muls	r3, r0
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	9305      	str	r3, [sp, #20]
  __HAL_LOCK(hrtc);
 80030ec:	2302      	movs	r3, #2
 80030ee:	1c72      	adds	r2, r6, #1
 80030f0:	7fd1      	ldrb	r1, [r2, #31]
 80030f2:	0018      	movs	r0, r3
 80030f4:	2901      	cmp	r1, #1
 80030f6:	d054      	beq.n	80031a2 <HAL_RTC_SetAlarm_IT+0xd6>
 80030f8:	2101      	movs	r1, #1
 80030fa:	77d1      	strb	r1, [r2, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030fc:	18f2      	adds	r2, r6, r3
 80030fe:	77d3      	strb	r3, [r2, #31]
  if (Format == RTC_FORMAT_BIN)
 8003100:	78aa      	ldrb	r2, [r5, #2]
 8003102:	786f      	ldrb	r7, [r5, #1]
 8003104:	9201      	str	r2, [sp, #4]
 8003106:	9a02      	ldr	r2, [sp, #8]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003108:	6834      	ldr	r4, [r6, #0]
 800310a:	7828      	ldrb	r0, [r5, #0]
 800310c:	333e      	adds	r3, #62	@ 0x3e
  if (Format == RTC_FORMAT_BIN)
 800310e:	2a00      	cmp	r2, #0
 8003110:	d149      	bne.n	80031a6 <HAL_RTC_SetAlarm_IT+0xda>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003112:	68a2      	ldr	r2, [r4, #8]
 8003114:	0011      	movs	r1, r2
 8003116:	4019      	ands	r1, r3
 8003118:	421a      	tst	r2, r3
 800311a:	d100      	bne.n	800311e <HAL_RTC_SetAlarm_IT+0x52>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800311c:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800311e:	f7ff ff11 	bl	8002f44 <RTC_ByteToBcd2>
 8003122:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003124:	0038      	movs	r0, r7
 8003126:	f7ff ff0d 	bl	8002f44 <RTC_ByteToBcd2>
 800312a:	9003      	str	r0, [sp, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800312c:	9801      	ldr	r0, [sp, #4]
 800312e:	f7ff ff09 	bl	8002f44 <RTC_ByteToBcd2>
 8003132:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003134:	1c6b      	adds	r3, r5, #1
 8003136:	7fd8      	ldrb	r0, [r3, #31]
 8003138:	f7ff ff04 	bl	8002f44 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800313c:	696a      	ldr	r2, [r5, #20]
 800313e:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003140:	0600      	lsls	r0, r0, #24
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003142:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003144:	78ea      	ldrb	r2, [r5, #3]
 8003146:	0592      	lsls	r2, r2, #22
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003148:	4313      	orrs	r3, r2
 800314a:	9a02      	ldr	r2, [sp, #8]
 800314c:	433b      	orrs	r3, r7
 800314e:	0412      	lsls	r2, r2, #16
 8003150:	4313      	orrs	r3, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003152:	9a03      	ldr	r2, [sp, #12]
 8003154:	0212      	lsls	r2, r2, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003156:	4313      	orrs	r3, r2
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003158:	69aa      	ldr	r2, [r5, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800315a:	4318      	orrs	r0, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800315c:	686b      	ldr	r3, [r5, #4]
  if (sAlarm->Alarm == RTC_ALARM_A)
 800315e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003160:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003162:	22ca      	movs	r2, #202	@ 0xca
 8003164:	6262      	str	r2, [r4, #36]	@ 0x24
 8003166:	3a77      	subs	r2, #119	@ 0x77
 8003168:	6262      	str	r2, [r4, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800316a:	32ad      	adds	r2, #173	@ 0xad
 800316c:	4291      	cmp	r1, r2
 800316e:	d151      	bne.n	8003214 <HAL_RTC_SetAlarm_IT+0x148>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003170:	68a2      	ldr	r2, [r4, #8]
 8003172:	4939      	ldr	r1, [pc, #228]	@ (8003258 <HAL_RTC_SetAlarm_IT+0x18c>)
 8003174:	400a      	ands	r2, r1
 8003176:	60a2      	str	r2, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003178:	68e1      	ldr	r1, [r4, #12]
 800317a:	4a38      	ldr	r2, [pc, #224]	@ (800325c <HAL_RTC_SetAlarm_IT+0x190>)
 800317c:	b2c9      	uxtb	r1, r1
 800317e:	430a      	orrs	r2, r1
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8003180:	2101      	movs	r1, #1
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003182:	60e2      	str	r2, [r4, #12]
      count = count - 1U;
 8003184:	9a05      	ldr	r2, [sp, #20]
 8003186:	3a01      	subs	r2, #1
 8003188:	9205      	str	r2, [sp, #20]
      if (count == 0U)
 800318a:	9a05      	ldr	r2, [sp, #20]
 800318c:	2a00      	cmp	r2, #0
 800318e:	d120      	bne.n	80031d2 <HAL_RTC_SetAlarm_IT+0x106>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003190:	23ff      	movs	r3, #255	@ 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003192:	3203      	adds	r2, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003194:	6263      	str	r3, [r4, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003196:	1cb3      	adds	r3, r6, #2
 8003198:	77da      	strb	r2, [r3, #31]
        __HAL_UNLOCK(hrtc);
 800319a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800319c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hrtc);
 800319e:	3601      	adds	r6, #1
 80031a0:	77f3      	strb	r3, [r6, #31]
}
 80031a2:	b007      	add	sp, #28
 80031a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031a6:	68a2      	ldr	r2, [r4, #8]
 80031a8:	0011      	movs	r1, r2
 80031aa:	4019      	ands	r1, r3
 80031ac:	421a      	tst	r2, r3
 80031ae:	d100      	bne.n	80031b2 <HAL_RTC_SetAlarm_IT+0xe6>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80031b0:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80031b2:	696a      	ldr	r2, [r5, #20]
 80031b4:	69eb      	ldr	r3, [r5, #28]
 80031b6:	0400      	lsls	r0, r0, #16
 80031b8:	4313      	orrs	r3, r2
 80031ba:	9a01      	ldr	r2, [sp, #4]
 80031bc:	4313      	orrs	r3, r2
 80031be:	4318      	orrs	r0, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80031c0:	023b      	lsls	r3, r7, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80031c2:	4318      	orrs	r0, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80031c4:	78eb      	ldrb	r3, [r5, #3]
 80031c6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80031c8:	4318      	orrs	r0, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80031ca:	1c6b      	adds	r3, r5, #1
 80031cc:	7fdb      	ldrb	r3, [r3, #31]
 80031ce:	061b      	lsls	r3, r3, #24
 80031d0:	e7c2      	b.n	8003158 <HAL_RTC_SetAlarm_IT+0x8c>
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80031d2:	68e2      	ldr	r2, [r4, #12]
 80031d4:	420a      	tst	r2, r1
 80031d6:	d0d5      	beq.n	8003184 <HAL_RTC_SetAlarm_IT+0xb8>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80031d8:	61e0      	str	r0, [r4, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80031da:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80031dc:	2380      	movs	r3, #128	@ 0x80
 80031de:	68a2      	ldr	r2, [r4, #8]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80031e6:	2380      	movs	r3, #128	@ 0x80
 80031e8:	68a2      	ldr	r2, [r4, #8]
 80031ea:	015b      	lsls	r3, r3, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80031ec:	4313      	orrs	r3, r2
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80031ee:	2280      	movs	r2, #128	@ 0x80
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80031f0:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80031f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003260 <HAL_RTC_SetAlarm_IT+0x194>)
 80031f4:	0292      	lsls	r2, r2, #10
 80031f6:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 80031f8:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80031fa:	4311      	orrs	r1, r2
 80031fc:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80031fe:	6899      	ldr	r1, [r3, #8]
 8003200:	430a      	orrs	r2, r1
 8003202:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003204:	23ff      	movs	r3, #255	@ 0xff
  hrtc->State = HAL_RTC_STATE_READY;
 8003206:	2201      	movs	r2, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003208:	6263      	str	r3, [r4, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800320a:	1cb3      	adds	r3, r6, #2
  __HAL_UNLOCK(hrtc);
 800320c:	18b6      	adds	r6, r6, r2
  hrtc->State = HAL_RTC_STATE_READY;
 800320e:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8003210:	77f0      	strb	r0, [r6, #31]
  return HAL_OK;
 8003212:	e7c6      	b.n	80031a2 <HAL_RTC_SetAlarm_IT+0xd6>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003214:	68a2      	ldr	r2, [r4, #8]
 8003216:	4913      	ldr	r1, [pc, #76]	@ (8003264 <HAL_RTC_SetAlarm_IT+0x198>)
 8003218:	400a      	ands	r2, r1
 800321a:	60a2      	str	r2, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800321c:	68e1      	ldr	r1, [r4, #12]
 800321e:	4a12      	ldr	r2, [pc, #72]	@ (8003268 <HAL_RTC_SetAlarm_IT+0x19c>)
 8003220:	b2c9      	uxtb	r1, r1
 8003222:	430a      	orrs	r2, r1
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003224:	2102      	movs	r1, #2
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003226:	60e2      	str	r2, [r4, #12]
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003228:	9a00      	ldr	r2, [sp, #0]
 800322a:	9205      	str	r2, [sp, #20]
      count = count - 1U;
 800322c:	9a05      	ldr	r2, [sp, #20]
 800322e:	3a01      	subs	r2, #1
 8003230:	9205      	str	r2, [sp, #20]
      if (count == 0U)
 8003232:	9a05      	ldr	r2, [sp, #20]
 8003234:	2a00      	cmp	r2, #0
 8003236:	d0ab      	beq.n	8003190 <HAL_RTC_SetAlarm_IT+0xc4>
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003238:	68e2      	ldr	r2, [r4, #12]
 800323a:	420a      	tst	r2, r1
 800323c:	d0f6      	beq.n	800322c <HAL_RTC_SetAlarm_IT+0x160>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800323e:	6220      	str	r0, [r4, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003240:	64a3      	str	r3, [r4, #72]	@ 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003242:	2380      	movs	r3, #128	@ 0x80
 8003244:	68a2      	ldr	r2, [r4, #8]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4313      	orrs	r3, r2
 800324a:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800324c:	2380      	movs	r3, #128	@ 0x80
 800324e:	68a2      	ldr	r2, [r4, #8]
 8003250:	019b      	lsls	r3, r3, #6
 8003252:	e7cb      	b.n	80031ec <HAL_RTC_SetAlarm_IT+0x120>
 8003254:	20000014 	.word	0x20000014
 8003258:	fffffeff 	.word	0xfffffeff
 800325c:	fffffe7f 	.word	0xfffffe7f
 8003260:	40010400 	.word	0x40010400
 8003264:	fffffdff 	.word	0xfffffdff
 8003268:	fffffd7f 	.word	0xfffffd7f

0800326c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800326c:	0903      	lsrs	r3, r0, #4
{
 800326e:	0002      	movs	r2, r0
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003270:	200a      	movs	r0, #10
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003272:	210f      	movs	r1, #15
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003274:	4358      	muls	r0, r3
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003276:	400a      	ands	r2, r1
 8003278:	1880      	adds	r0, r0, r2
 800327a:	b2c0      	uxtb	r0, r0
}
 800327c:	4770      	bx	lr
	...

08003280 <HAL_RTC_GetTime>:
{
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003284:	6801      	ldr	r1, [r0, #0]
 8003286:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8003288:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800328a:	690b      	ldr	r3, [r1, #16]
 800328c:	045b      	lsls	r3, r3, #17
 800328e:	0c5b      	lsrs	r3, r3, #17
 8003290:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003292:	680b      	ldr	r3, [r1, #0]
 8003294:	490d      	ldr	r1, [pc, #52]	@ (80032cc <HAL_RTC_GetTime+0x4c>)
 8003296:	400b      	ands	r3, r1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003298:	0298      	lsls	r0, r3, #10
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800329a:	0a1d      	lsrs	r5, r3, #8
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800329c:	b2de      	uxtb	r6, r3
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800329e:	0e80      	lsrs	r0, r0, #26
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80032a0:	b2ed      	uxtb	r5, r5
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80032a2:	0d9b      	lsrs	r3, r3, #22
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80032a4:	7020      	strb	r0, [r4, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80032a6:	7065      	strb	r5, [r4, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80032a8:	70a6      	strb	r6, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80032aa:	70e3      	strb	r3, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 80032ac:	2a00      	cmp	r2, #0
 80032ae:	d10a      	bne.n	80032c6 <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80032b0:	f7ff ffdc 	bl	800326c <RTC_Bcd2ToByte>
 80032b4:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80032b6:	0028      	movs	r0, r5
 80032b8:	f7ff ffd8 	bl	800326c <RTC_Bcd2ToByte>
 80032bc:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80032be:	0030      	movs	r0, r6
 80032c0:	f7ff ffd4 	bl	800326c <RTC_Bcd2ToByte>
 80032c4:	70a0      	strb	r0, [r4, #2]
}
 80032c6:	2000      	movs	r0, #0
 80032c8:	bd70      	pop	{r4, r5, r6, pc}
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	007f7f7f 	.word	0x007f7f7f

080032d0 <HAL_RTC_GetDate>:
{
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80032d4:	6803      	ldr	r3, [r0, #0]
 80032d6:	490e      	ldr	r1, [pc, #56]	@ (8003310 <HAL_RTC_GetDate+0x40>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	400b      	ands	r3, r1
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80032dc:	0c18      	lsrs	r0, r3, #16
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80032de:	04dd      	lsls	r5, r3, #19
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80032e0:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80032e2:	041b      	lsls	r3, r3, #16
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80032e4:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80032e6:	0f5b      	lsrs	r3, r3, #29
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80032e8:	70e0      	strb	r0, [r4, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80032ea:	7065      	strb	r5, [r4, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80032ec:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80032ee:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 80032f0:	2a00      	cmp	r2, #0
 80032f2:	d10a      	bne.n	800330a <HAL_RTC_GetDate+0x3a>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80032f4:	f7ff ffba 	bl	800326c <RTC_Bcd2ToByte>
 80032f8:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80032fa:	0028      	movs	r0, r5
 80032fc:	f7ff ffb6 	bl	800326c <RTC_Bcd2ToByte>
 8003300:	7060      	strb	r0, [r4, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003302:	0030      	movs	r0, r6
 8003304:	f7ff ffb2 	bl	800326c <RTC_Bcd2ToByte>
 8003308:	70a0      	strb	r0, [r4, #2]
}
 800330a:	2000      	movs	r0, #0
 800330c:	bd70      	pop	{r4, r5, r6, pc}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	00ffff3f 	.word	0x00ffff3f

08003314 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003314:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8003316:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003318:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);
 800331a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800331c:	600a      	str	r2, [r1, #0]
}
 800331e:	4770      	bx	lr

08003320 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003320:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8003322:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003324:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);
 8003326:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003328:	6808      	ldr	r0, [r1, #0]
}
 800332a:	4770      	bx	lr

0800332c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800332c:	2202      	movs	r2, #2
{
 800332e:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8003330:	1c41      	adds	r1, r0, #1
 8003332:	7fcc      	ldrb	r4, [r1, #31]
{
 8003334:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8003336:	0010      	movs	r0, r2
 8003338:	2c01      	cmp	r4, #1
 800333a:	d010      	beq.n	800335e <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 800333c:	1898      	adds	r0, r3, r2
 800333e:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	32c8      	adds	r2, #200	@ 0xc8
 8003344:	625a      	str	r2, [r3, #36]	@ 0x24
 8003346:	3a77      	subs	r2, #119	@ 0x77
 8003348:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800334a:	689c      	ldr	r4, [r3, #8]
 800334c:	3a33      	subs	r2, #51	@ 0x33
 800334e:	4322      	orrs	r2, r4
 8003350:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003352:	22ff      	movs	r2, #255	@ 0xff
 8003354:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003356:	2301      	movs	r3, #1
 8003358:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800335a:	2000      	movs	r0, #0
 800335c:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 800335e:	bd10      	pop	{r4, pc}

08003360 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
 8003360:	4770      	bx	lr
	...

08003364 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003366:	001f      	movs	r7, r3
 8003368:	b085      	sub	sp, #20
 800336a:	000e      	movs	r6, r1
 800336c:	9201      	str	r2, [sp, #4]
 800336e:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003370:	f7fd ffba 	bl	80012e8 <HAL_GetTick>
 8003374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003376:	19dd      	adds	r5, r3, r7
 8003378:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800337a:	f7fd ffb5 	bl	80012e8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800337e:	4b28      	ldr	r3, [pc, #160]	@ (8003420 <SPI_WaitFlagStateUntilTimeout+0xbc>)
  tmp_tickstart = HAL_GetTick();
 8003380:	9000      	str	r0, [sp, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	015b      	lsls	r3, r3, #5
 8003386:	0d1b      	lsrs	r3, r3, #20
 8003388:	436b      	muls	r3, r5
 800338a:	9303      	str	r3, [sp, #12]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800338c:	6822      	ldr	r2, [r4, #0]
 800338e:	6893      	ldr	r3, [r2, #8]
 8003390:	4033      	ands	r3, r6
 8003392:	1b9b      	subs	r3, r3, r6
 8003394:	4259      	negs	r1, r3
 8003396:	414b      	adcs	r3, r1
 8003398:	9901      	ldr	r1, [sp, #4]
 800339a:	428b      	cmp	r3, r1
 800339c:	d101      	bne.n	80033a2 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800339e:	2000      	movs	r0, #0
 80033a0:	e032      	b.n	8003408 <SPI_WaitFlagStateUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	1c7b      	adds	r3, r7, #1
 80033a4:	d0f3      	beq.n	800338e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033a6:	f7fd ff9f 	bl	80012e8 <HAL_GetTick>
 80033aa:	9b00      	ldr	r3, [sp, #0]
 80033ac:	1ac0      	subs	r0, r0, r3
 80033ae:	42a8      	cmp	r0, r5
 80033b0:	d32c      	bcc.n	800340c <SPI_WaitFlagStateUntilTimeout+0xa8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033b2:	21e0      	movs	r1, #224	@ 0xe0
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	438a      	bics	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033bc:	2282      	movs	r2, #130	@ 0x82
 80033be:	6861      	ldr	r1, [r4, #4]
 80033c0:	0052      	lsls	r2, r2, #1
 80033c2:	4291      	cmp	r1, r2
 80033c4:	d10c      	bne.n	80033e0 <SPI_WaitFlagStateUntilTimeout+0x7c>
 80033c6:	2180      	movs	r1, #128	@ 0x80
 80033c8:	68a2      	ldr	r2, [r4, #8]
 80033ca:	0209      	lsls	r1, r1, #8
 80033cc:	428a      	cmp	r2, r1
 80033ce:	d003      	beq.n	80033d8 <SPI_WaitFlagStateUntilTimeout+0x74>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033d0:	2180      	movs	r1, #128	@ 0x80
 80033d2:	00c9      	lsls	r1, r1, #3
 80033d4:	428a      	cmp	r2, r1
 80033d6:	d103      	bne.n	80033e0 <SPI_WaitFlagStateUntilTimeout+0x7c>
          __HAL_SPI_DISABLE(hspi);
 80033d8:	2140      	movs	r1, #64	@ 0x40
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	438a      	bics	r2, r1
 80033de:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033e0:	2180      	movs	r1, #128	@ 0x80
 80033e2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80033e4:	0189      	lsls	r1, r1, #6
 80033e6:	428a      	cmp	r2, r1
 80033e8:	d106      	bne.n	80033f8 <SPI_WaitFlagStateUntilTimeout+0x94>
          SPI_RESET_CRC(hspi);
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	480d      	ldr	r0, [pc, #52]	@ (8003424 <SPI_WaitFlagStateUntilTimeout+0xc0>)
 80033ee:	4001      	ands	r1, r0
 80033f0:	6019      	str	r1, [r3, #0]
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80033f8:	0023      	movs	r3, r4
 80033fa:	2201      	movs	r2, #1
 80033fc:	3351      	adds	r3, #81	@ 0x51
 80033fe:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8003400:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003402:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8003404:	3450      	adds	r4, #80	@ 0x50
 8003406:	7023      	strb	r3, [r4, #0]
}
 8003408:	b005      	add	sp, #20
 800340a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 800340c:	9b03      	ldr	r3, [sp, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d000      	beq.n	8003414 <SPI_WaitFlagStateUntilTimeout+0xb0>
 8003412:	002b      	movs	r3, r5
      count--;
 8003414:	9a03      	ldr	r2, [sp, #12]
 8003416:	001d      	movs	r5, r3
 8003418:	3a01      	subs	r2, #1
 800341a:	9203      	str	r2, [sp, #12]
 800341c:	e7b6      	b.n	800338c <SPI_WaitFlagStateUntilTimeout+0x28>
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	20000014 	.word	0x20000014
 8003424:	ffffdfff 	.word	0xffffdfff

08003428 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003428:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800342a:	4b17      	ldr	r3, [pc, #92]	@ (8003488 <SPI_EndRxTxTransaction+0x60>)
{
 800342c:	0004      	movs	r4, r0
 800342e:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	4916      	ldr	r1, [pc, #88]	@ (800348c <SPI_EndRxTxTransaction+0x64>)
{
 8003434:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003436:	f7fc fe79 	bl	800012c <__udivsi3>
 800343a:	23fa      	movs	r3, #250	@ 0xfa
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4343      	muls	r3, r0
 8003440:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003442:	2382      	movs	r3, #130	@ 0x82
 8003444:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003446:	2280      	movs	r2, #128	@ 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4299      	cmp	r1, r3
 800344c:	d10f      	bne.n	800346e <SPI_EndRxTxTransaction+0x46>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800344e:	002b      	movs	r3, r5
 8003450:	2200      	movs	r2, #0
 8003452:	2180      	movs	r1, #128	@ 0x80
 8003454:	0020      	movs	r0, r4
 8003456:	9600      	str	r6, [sp, #0]
 8003458:	f7ff ff84 	bl	8003364 <SPI_WaitFlagStateUntilTimeout>
 800345c:	2800      	cmp	r0, #0
 800345e:	d010      	beq.n	8003482 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003460:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8003462:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003464:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003466:	4313      	orrs	r3, r2
 8003468:	6563      	str	r3, [r4, #84]	@ 0x54
  }

  return HAL_OK;
}
 800346a:	b004      	add	sp, #16
 800346c:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 800346e:	9b03      	ldr	r3, [sp, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d006      	beq.n	8003482 <SPI_EndRxTxTransaction+0x5a>
      count--;
 8003474:	9b03      	ldr	r3, [sp, #12]
 8003476:	3b01      	subs	r3, #1
 8003478:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	4213      	tst	r3, r2
 8003480:	d1f5      	bne.n	800346e <SPI_EndRxTxTransaction+0x46>
  return HAL_OK;
 8003482:	2000      	movs	r0, #0
 8003484:	e7f1      	b.n	800346a <SPI_EndRxTxTransaction+0x42>
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	20000014 	.word	0x20000014
 800348c:	016e3600 	.word	0x016e3600

08003490 <HAL_SPI_MspInit>:
}
 8003490:	4770      	bx	lr
	...

08003494 <HAL_SPI_Init>:
{
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003498:	2001      	movs	r0, #1
  if (hspi == NULL)
 800349a:	2c00      	cmp	r4, #0
 800349c:	d05a      	beq.n	8003554 <HAL_SPI_Init+0xc0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800349e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d158      	bne.n	8003556 <HAL_SPI_Init+0xc2>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a4:	2282      	movs	r2, #130	@ 0x82
 80034a6:	6861      	ldr	r1, [r4, #4]
 80034a8:	0052      	lsls	r2, r2, #1
 80034aa:	4291      	cmp	r1, r2
 80034ac:	d000      	beq.n	80034b0 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ae:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80034b0:	0025      	movs	r5, r4
 80034b2:	3551      	adds	r5, #81	@ 0x51
 80034b4:	782b      	ldrb	r3, [r5, #0]
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <HAL_SPI_Init+0x34>
    hspi->Lock = HAL_UNLOCKED;
 80034bc:	0023      	movs	r3, r4
 80034be:	3350      	adds	r3, #80	@ 0x50
    HAL_SPI_MspInit(hspi);
 80034c0:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80034c2:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80034c4:	f7ff ffe4 	bl	8003490 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80034c8:	2702      	movs	r7, #2
  __HAL_SPI_DISABLE(hspi);
 80034ca:	2240      	movs	r2, #64	@ 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034cc:	2682      	movs	r6, #130	@ 0x82
  hspi->State = HAL_SPI_STATE_BUSY;
 80034ce:	702f      	strb	r7, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d0:	2784      	movs	r7, #132	@ 0x84
  __HAL_SPI_DISABLE(hspi);
 80034d2:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d4:	0076      	lsls	r6, r6, #1
  __HAL_SPI_DISABLE(hspi);
 80034d6:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d8:	023f      	lsls	r7, r7, #8
  __HAL_SPI_DISABLE(hspi);
 80034da:	4393      	bics	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034de:	6863      	ldr	r3, [r4, #4]
 80034e0:	69a2      	ldr	r2, [r4, #24]
 80034e2:	4033      	ands	r3, r6
 80034e4:	68a6      	ldr	r6, [r4, #8]
 80034e6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80034e8:	403e      	ands	r6, r7
 80034ea:	2780      	movs	r7, #128	@ 0x80
 80034ec:	4333      	orrs	r3, r6
 80034ee:	68e6      	ldr	r6, [r4, #12]
 80034f0:	013f      	lsls	r7, r7, #4
 80034f2:	403e      	ands	r6, r7
 80034f4:	2702      	movs	r7, #2
 80034f6:	4333      	orrs	r3, r6
 80034f8:	6926      	ldr	r6, [r4, #16]
 80034fa:	403e      	ands	r6, r7
 80034fc:	4333      	orrs	r3, r6
 80034fe:	6966      	ldr	r6, [r4, #20]
 8003500:	3f01      	subs	r7, #1
 8003502:	403e      	ands	r6, r7
 8003504:	4333      	orrs	r3, r6
 8003506:	2680      	movs	r6, #128	@ 0x80
 8003508:	00b6      	lsls	r6, r6, #2
 800350a:	4016      	ands	r6, r2
 800350c:	4333      	orrs	r3, r6
 800350e:	69e6      	ldr	r6, [r4, #28]
 8003510:	3737      	adds	r7, #55	@ 0x37
 8003512:	403e      	ands	r6, r7
 8003514:	4333      	orrs	r3, r6
 8003516:	6a26      	ldr	r6, [r4, #32]
 8003518:	3748      	adds	r7, #72	@ 0x48
 800351a:	403e      	ands	r6, r7
 800351c:	4333      	orrs	r3, r6
 800351e:	2680      	movs	r6, #128	@ 0x80
 8003520:	0007      	movs	r7, r0
 8003522:	01b6      	lsls	r6, r6, #6
 8003524:	4037      	ands	r7, r6
 8003526:	433b      	orrs	r3, r7
 8003528:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800352a:	2304      	movs	r3, #4
 800352c:	2710      	movs	r7, #16
 800352e:	0c12      	lsrs	r2, r2, #16
 8003530:	401a      	ands	r2, r3
 8003532:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003534:	403b      	ands	r3, r7
 8003536:	431a      	orrs	r2, r3
 8003538:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800353a:	42b0      	cmp	r0, r6
 800353c:	d102      	bne.n	8003544 <HAL_SPI_Init+0xb0>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800353e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003540:	b29b      	uxth	r3, r3
 8003542:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003544:	69cb      	ldr	r3, [r1, #28]
 8003546:	4a06      	ldr	r2, [pc, #24]	@ (8003560 <HAL_SPI_Init+0xcc>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003548:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800354a:	4013      	ands	r3, r2
 800354c:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800354e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003550:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003552:	702b      	strb	r3, [r5, #0]
}
 8003554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003556:	2300      	movs	r3, #0
 8003558:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800355a:	6163      	str	r3, [r4, #20]
 800355c:	e7a8      	b.n	80034b0 <HAL_SPI_Init+0x1c>
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	fffff7ff 	.word	0xfffff7ff

08003564 <HAL_SPI_TransmitReceive>:
{
 8003564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003566:	001e      	movs	r6, r3
  __IO uint32_t tmpreg = 0U;
 8003568:	2300      	movs	r3, #0
{
 800356a:	b087      	sub	sp, #28
  __IO uint32_t tmpreg = 0U;
 800356c:	9304      	str	r3, [sp, #16]
  __HAL_LOCK(hspi);
 800356e:	0003      	movs	r3, r0
{
 8003570:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hspi);
 8003572:	3350      	adds	r3, #80	@ 0x50
 8003574:	781a      	ldrb	r2, [r3, #0]
{
 8003576:	0004      	movs	r4, r0
 8003578:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 800357a:	2702      	movs	r7, #2
 800357c:	2a01      	cmp	r2, #1
 800357e:	d100      	bne.n	8003582 <HAL_SPI_TransmitReceive+0x1e>
 8003580:	e0bb      	b.n	80036fa <HAL_SPI_TransmitReceive+0x196>
 8003582:	2201      	movs	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003586:	f7fd feaf 	bl	80012e8 <HAL_GetTick>
  tmp_state           = hspi->State;
 800358a:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 800358c:	9002      	str	r0, [sp, #8]
  tmp_state           = hspi->State;
 800358e:	3351      	adds	r3, #81	@ 0x51
 8003590:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003592:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8003594:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003596:	2b01      	cmp	r3, #1
 8003598:	d00b      	beq.n	80035b2 <HAL_SPI_TransmitReceive+0x4e>
 800359a:	2382      	movs	r3, #130	@ 0x82
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4299      	cmp	r1, r3
 80035a0:	d000      	beq.n	80035a4 <HAL_SPI_TransmitReceive+0x40>
 80035a2:	e0a7      	b.n	80036f4 <HAL_SPI_TransmitReceive+0x190>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035a4:	68a3      	ldr	r3, [r4, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d000      	beq.n	80035ac <HAL_SPI_TransmitReceive+0x48>
 80035aa:	e0a3      	b.n	80036f4 <HAL_SPI_TransmitReceive+0x190>
 80035ac:	2a04      	cmp	r2, #4
 80035ae:	d000      	beq.n	80035b2 <HAL_SPI_TransmitReceive+0x4e>
 80035b0:	e0a0      	b.n	80036f4 <HAL_SPI_TransmitReceive+0x190>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035b2:	2d00      	cmp	r5, #0
 80035b4:	d100      	bne.n	80035b8 <HAL_SPI_TransmitReceive+0x54>
 80035b6:	e113      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x27c>
 80035b8:	9b03      	ldr	r3, [sp, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d100      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x5c>
 80035be:	e10f      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x27c>
 80035c0:	2e00      	cmp	r6, #0
 80035c2:	d100      	bne.n	80035c6 <HAL_SPI_TransmitReceive+0x62>
 80035c4:	e10c      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x27c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035c6:	0023      	movs	r3, r4
 80035c8:	3351      	adds	r3, #81	@ 0x51
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	2a04      	cmp	r2, #4
 80035ce:	d001      	beq.n	80035d4 <HAL_SPI_TransmitReceive+0x70>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035d0:	2205      	movs	r2, #5
 80035d2:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035d4:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035d6:	2080      	movs	r0, #128	@ 0x80
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035d8:	9a03      	ldr	r2, [sp, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035da:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035dc:	63a2      	str	r2, [r4, #56]	@ 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035de:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  hspi->RxXferCount = Size;
 80035e0:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80035e2:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80035e4:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxXferSize  = Size;
 80035e6:	87a6      	strh	r6, [r4, #60]	@ 0x3c
    SPI_RESET_CRC(hspi);
 80035e8:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035ea:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80035ec:	86e6      	strh	r6, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80035ee:	86a6      	strh	r6, [r4, #52]	@ 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035f0:	0180      	lsls	r0, r0, #6
 80035f2:	4282      	cmp	r2, r0
 80035f4:	d106      	bne.n	8003604 <HAL_SPI_TransmitReceive+0xa0>
    SPI_RESET_CRC(hspi);
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	4f83      	ldr	r7, [pc, #524]	@ (8003808 <HAL_SPI_TransmitReceive+0x2a4>)
 80035fa:	4038      	ands	r0, r7
 80035fc:	6018      	str	r0, [r3, #0]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	4302      	orrs	r2, r0
 8003602:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003604:	2240      	movs	r2, #64	@ 0x40
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	4210      	tst	r0, r2
 800360a:	d102      	bne.n	8003612 <HAL_SPI_TransmitReceive+0xae>
    __HAL_SPI_ENABLE(hspi);
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	4302      	orrs	r2, r0
 8003610:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003612:	2280      	movs	r2, #128	@ 0x80
 8003614:	68e0      	ldr	r0, [r4, #12]
 8003616:	0112      	lsls	r2, r2, #4
 8003618:	4290      	cmp	r0, r2
 800361a:	d000      	beq.n	800361e <HAL_SPI_TransmitReceive+0xba>
 800361c:	e070      	b.n	8003700 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800361e:	2900      	cmp	r1, #0
 8003620:	d001      	beq.n	8003626 <HAL_SPI_TransmitReceive+0xc2>
 8003622:	2e01      	cmp	r6, #1
 8003624:	d107      	bne.n	8003636 <HAL_SPI_TransmitReceive+0xd2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003626:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003628:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800362a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800362c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800362e:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003630:	3b01      	subs	r3, #1
 8003632:	b29b      	uxth	r3, r3
 8003634:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003636:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003638:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800363a:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800363c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800363e:	2b00      	cmp	r3, #0
 8003640:	d118      	bne.n	8003674 <HAL_SPI_TransmitReceive+0x110>
 8003642:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003644:	2b00      	cmp	r3, #0
 8003646:	d115      	bne.n	8003674 <HAL_SPI_TransmitReceive+0x110>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003648:	2380      	movs	r3, #128	@ 0x80
 800364a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800364c:	019b      	lsls	r3, r3, #6
 800364e:	429a      	cmp	r2, r3
 8003650:	d000      	beq.n	8003654 <HAL_SPI_TransmitReceive+0xf0>
 8003652:	e0b0      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x252>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003654:	2201      	movs	r2, #1
 8003656:	9b02      	ldr	r3, [sp, #8]
 8003658:	0011      	movs	r1, r2
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	0020      	movs	r0, r4
 800365e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003660:	f7ff fe80 	bl	8003364 <SPI_WaitFlagStateUntilTimeout>
 8003664:	2800      	cmp	r0, #0
 8003666:	d100      	bne.n	800366a <HAL_SPI_TransmitReceive+0x106>
 8003668:	e0a1      	b.n	80037ae <HAL_SPI_TransmitReceive+0x24a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800366a:	2302      	movs	r3, #2
 800366c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800366e:	4313      	orrs	r3, r2
 8003670:	6563      	str	r3, [r4, #84]	@ 0x54
      goto error;
 8003672:	e03e      	b.n	80036f2 <HAL_SPI_TransmitReceive+0x18e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	423a      	tst	r2, r7
 800367a:	d01b      	beq.n	80036b4 <HAL_SPI_TransmitReceive+0x150>
 800367c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800367e:	2a00      	cmp	r2, #0
 8003680:	d018      	beq.n	80036b4 <HAL_SPI_TransmitReceive+0x150>
 8003682:	2d01      	cmp	r5, #1
 8003684:	d115      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x14e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003686:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003688:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800368a:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800368c:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800368e:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003690:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003692:	3a01      	subs	r2, #1
 8003694:	b292      	uxth	r2, r2
 8003696:	86e2      	strh	r2, [r4, #54]	@ 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003698:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800369a:	2a00      	cmp	r2, #0
 800369c:	d109      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x14e>
 800369e:	2280      	movs	r2, #128	@ 0x80
 80036a0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80036a2:	0192      	lsls	r2, r2, #6
 80036a4:	4291      	cmp	r1, r2
 80036a6:	d104      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x14e>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80036a8:	2280      	movs	r2, #128	@ 0x80
 80036aa:	6819      	ldr	r1, [r3, #0]
 80036ac:	0152      	lsls	r2, r2, #5
 80036ae:	430a      	orrs	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]
{
 80036b2:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036b4:	6899      	ldr	r1, [r3, #8]
 80036b6:	000a      	movs	r2, r1
 80036b8:	4032      	ands	r2, r6
 80036ba:	4231      	tst	r1, r6
 80036bc:	d00c      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x174>
 80036be:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80036c0:	2900      	cmp	r1, #0
 80036c2:	d009      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x174>
        txallowed = 1U;
 80036c4:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036c6:	68d9      	ldr	r1, [r3, #12]
 80036c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80036ca:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036cc:	3302      	adds	r3, #2
 80036ce:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80036d0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036d8:	f7fd fe06 	bl	80012e8 <HAL_GetTick>
 80036dc:	9b02      	ldr	r3, [sp, #8]
 80036de:	1ac0      	subs	r0, r0, r3
 80036e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80036e2:	4298      	cmp	r0, r3
 80036e4:	d3aa      	bcc.n	800363c <HAL_SPI_TransmitReceive+0xd8>
 80036e6:	3301      	adds	r3, #1
 80036e8:	d0a8      	beq.n	800363c <HAL_SPI_TransmitReceive+0xd8>
        hspi->State = HAL_SPI_STATE_READY;
 80036ea:	0023      	movs	r3, r4
 80036ec:	2201      	movs	r2, #1
 80036ee:	3351      	adds	r3, #81	@ 0x51
 80036f0:	701a      	strb	r2, [r3, #0]
        errorcode = HAL_TIMEOUT;
 80036f2:	2703      	movs	r7, #3
  __HAL_UNLOCK(hspi);
 80036f4:	2300      	movs	r3, #0
 80036f6:	3450      	adds	r4, #80	@ 0x50
 80036f8:	7023      	strb	r3, [r4, #0]
}
 80036fa:	0038      	movs	r0, r7
 80036fc:	b007      	add	sp, #28
 80036fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003700:	2900      	cmp	r1, #0
 8003702:	d001      	beq.n	8003708 <HAL_SPI_TransmitReceive+0x1a4>
 8003704:	2e01      	cmp	r6, #1
 8003706:	d108      	bne.n	800371a <HAL_SPI_TransmitReceive+0x1b6>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003708:	782a      	ldrb	r2, [r5, #0]
 800370a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800370c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800370e:	3301      	adds	r3, #1
 8003710:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003712:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003714:	3b01      	subs	r3, #1
 8003716:	b29b      	uxth	r3, r3
 8003718:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800371a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800371c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800371e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003720:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003722:	2b00      	cmp	r3, #0
 8003724:	d103      	bne.n	800372e <HAL_SPI_TransmitReceive+0x1ca>
 8003726:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003728:	2b00      	cmp	r3, #0
 800372a:	d100      	bne.n	800372e <HAL_SPI_TransmitReceive+0x1ca>
 800372c:	e78c      	b.n	8003648 <HAL_SPI_TransmitReceive+0xe4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	423a      	tst	r2, r7
 8003734:	d01d      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x20e>
 8003736:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003738:	2a00      	cmp	r2, #0
 800373a:	d01a      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x20e>
 800373c:	2d01      	cmp	r5, #1
 800373e:	d117      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x20c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003740:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003742:	7812      	ldrb	r2, [r2, #0]
 8003744:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003746:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003748:	3301      	adds	r3, #1
 800374a:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800374c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800374e:	3b01      	subs	r3, #1
 8003750:	b29b      	uxth	r3, r3
 8003752:	86e3      	strh	r3, [r4, #54]	@ 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003754:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x20c>
 800375a:	2380      	movs	r3, #128	@ 0x80
 800375c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800375e:	6822      	ldr	r2, [r4, #0]
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003760:	019b      	lsls	r3, r3, #6
 8003762:	4299      	cmp	r1, r3
 8003764:	d104      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x20c>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003766:	2380      	movs	r3, #128	@ 0x80
 8003768:	6811      	ldr	r1, [r2, #0]
 800376a:	015b      	lsls	r3, r3, #5
 800376c:	430b      	orrs	r3, r1
 800376e:	6013      	str	r3, [r2, #0]
        txallowed = 1U;
 8003770:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	6899      	ldr	r1, [r3, #8]
 8003776:	000a      	movs	r2, r1
 8003778:	4032      	ands	r2, r6
 800377a:	4231      	tst	r1, r6
 800377c:	d00d      	beq.n	800379a <HAL_SPI_TransmitReceive+0x236>
 800377e:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8003780:	2900      	cmp	r1, #0
 8003782:	d00a      	beq.n	800379a <HAL_SPI_TransmitReceive+0x236>
        txallowed = 1U;
 8003784:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003786:	68d9      	ldr	r1, [r3, #12]
 8003788:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800378a:	7019      	strb	r1, [r3, #0]
        hspi->pRxBuffPtr++;
 800378c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800378e:	3301      	adds	r3, #1
 8003790:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003792:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003794:	3b01      	subs	r3, #1
 8003796:	b29b      	uxth	r3, r3
 8003798:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800379a:	f7fd fda5 	bl	80012e8 <HAL_GetTick>
 800379e:	9b02      	ldr	r3, [sp, #8]
 80037a0:	1ac0      	subs	r0, r0, r3
 80037a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80037a4:	4298      	cmp	r0, r3
 80037a6:	d3bb      	bcc.n	8003720 <HAL_SPI_TransmitReceive+0x1bc>
 80037a8:	3301      	adds	r3, #1
 80037aa:	d0b9      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x1bc>
 80037ac:	e79d      	b.n	80036ea <HAL_SPI_TransmitReceive+0x186>
    tmpreg = READ_REG(hspi->Instance->DR);
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	9304      	str	r3, [sp, #16]
    UNUSED(tmpreg);
 80037b4:	9b04      	ldr	r3, [sp, #16]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80037b6:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037b8:	2700      	movs	r7, #0
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80037ba:	6893      	ldr	r3, [r2, #8]
 80037bc:	06db      	lsls	r3, r3, #27
 80037be:	d506      	bpl.n	80037ce <HAL_SPI_TransmitReceive+0x26a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80037c0:	2302      	movs	r3, #2
 80037c2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80037c4:	3701      	adds	r7, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80037c6:	430b      	orrs	r3, r1
 80037c8:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80037ca:	4b10      	ldr	r3, [pc, #64]	@ (800380c <HAL_SPI_TransmitReceive+0x2a8>)
 80037cc:	6093      	str	r3, [r2, #8]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ce:	0020      	movs	r0, r4
 80037d0:	9a02      	ldr	r2, [sp, #8]
 80037d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80037d4:	f7ff fe28 	bl	8003428 <SPI_EndRxTxTransaction>
 80037d8:	2800      	cmp	r0, #0
 80037da:	d003      	beq.n	80037e4 <HAL_SPI_TransmitReceive+0x280>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037dc:	2320      	movs	r3, #32
 80037de:	6563      	str	r3, [r4, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80037e0:	2701      	movs	r7, #1
 80037e2:	e787      	b.n	80036f4 <HAL_SPI_TransmitReceive+0x190>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037e4:	68a3      	ldr	r3, [r4, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_SPI_TransmitReceive+0x294>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ea:	9305      	str	r3, [sp, #20]
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	9205      	str	r2, [sp, #20]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	9305      	str	r3, [sp, #20]
 80037f6:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_SPI_TransmitReceive+0x27c>
    hspi->State = HAL_SPI_STATE_READY;
 80037fe:	0023      	movs	r3, r4
 8003800:	2201      	movs	r2, #1
 8003802:	3351      	adds	r3, #81	@ 0x51
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e775      	b.n	80036f4 <HAL_SPI_TransmitReceive+0x190>
 8003808:	ffffdfff 	.word	0xffffdfff
 800380c:	0000ffef 	.word	0x0000ffef

08003810 <HAL_SPI_GetState>:
  return hspi->State;
 8003810:	3051      	adds	r0, #81	@ 0x51
 8003812:	7800      	ldrb	r0, [r0, #0]
 8003814:	b2c0      	uxtb	r0, r0
}
 8003816:	4770      	bx	lr

08003818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003818:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800381a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381e:	2201      	movs	r2, #1
 8003820:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003824:	6801      	ldr	r1, [r0, #0]
 8003826:	4d12      	ldr	r5, [pc, #72]	@ (8003870 <UART_EndRxTransfer+0x58>)
 8003828:	680b      	ldr	r3, [r1, #0]
 800382a:	402b      	ands	r3, r5
 800382c:	600b      	str	r3, [r1, #0]
 800382e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003832:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003836:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383a:	6801      	ldr	r1, [r0, #0]
 800383c:	688b      	ldr	r3, [r1, #8]
 800383e:	4393      	bics	r3, r2
 8003840:	608b      	str	r3, [r1, #8]
 8003842:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003846:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003848:	4293      	cmp	r3, r2
 800384a:	d10a      	bne.n	8003862 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800384c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003850:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003854:	2410      	movs	r4, #16
 8003856:	6802      	ldr	r2, [r0, #0]
 8003858:	6813      	ldr	r3, [r2, #0]
 800385a:	43a3      	bics	r3, r4
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003862:	2220      	movs	r2, #32
 8003864:	1d03      	adds	r3, r0, #4
 8003866:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003868:	2300      	movs	r3, #0
 800386a:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800386c:	6683      	str	r3, [r0, #104]	@ 0x68
}
 800386e:	bd30      	pop	{r4, r5, pc}
 8003870:	fffffedf 	.word	0xfffffedf

08003874 <HAL_UART_Transmit_DMA>:
{
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003878:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
{
 800387a:	0004      	movs	r4, r0
    return HAL_BUSY;
 800387c:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800387e:	2a20      	cmp	r2, #32
 8003880:	d104      	bne.n	800388c <HAL_UART_Transmit_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8003882:	2900      	cmp	r1, #0
 8003884:	d001      	beq.n	800388a <HAL_UART_Transmit_DMA+0x16>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_UART_Transmit_DMA+0x1a>
      return HAL_ERROR;
 800388a:	2001      	movs	r0, #1
}
 800388c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388e:	2280      	movs	r2, #128	@ 0x80
 8003890:	68a0      	ldr	r0, [r4, #8]
 8003892:	0152      	lsls	r2, r2, #5
 8003894:	4290      	cmp	r0, r2
 8003896:	d104      	bne.n	80038a2 <HAL_UART_Transmit_DMA+0x2e>
 8003898:	6922      	ldr	r2, [r4, #16]
 800389a:	2a00      	cmp	r2, #0
 800389c:	d101      	bne.n	80038a2 <HAL_UART_Transmit_DMA+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 800389e:	07ca      	lsls	r2, r1, #31
 80038a0:	d4f3      	bmi.n	800388a <HAL_UART_Transmit_DMA+0x16>
    huart->TxXferSize  = Size;
 80038a2:	0022      	movs	r2, r4
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a4:	0025      	movs	r5, r4
    huart->TxXferSize  = Size;
 80038a6:	3250      	adds	r2, #80	@ 0x50
    huart->pTxBuffPtr  = pData;
 80038a8:	64e1      	str	r1, [r4, #76]	@ 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038aa:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 80038ac:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 80038ae:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038b0:	2221      	movs	r2, #33	@ 0x21
    if (huart->hdmatx != NULL)
 80038b2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	3508      	adds	r5, #8
 80038b6:	67ee      	str	r6, [r5, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038b8:	67e2      	str	r2, [r4, #124]	@ 0x7c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80038ba:	6822      	ldr	r2, [r4, #0]
    if (huart->hdmatx != NULL)
 80038bc:	42b0      	cmp	r0, r6
 80038be:	d010      	beq.n	80038e2 <HAL_UART_Transmit_DMA+0x6e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80038c0:	4f10      	ldr	r7, [pc, #64]	@ (8003904 <HAL_UART_Transmit_DMA+0x90>)
      huart->hdmatx->XferAbortCallback = NULL;
 80038c2:	6386      	str	r6, [r0, #56]	@ 0x38
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80038c4:	62c7      	str	r7, [r0, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80038c6:	4f10      	ldr	r7, [pc, #64]	@ (8003908 <HAL_UART_Transmit_DMA+0x94>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80038c8:	3228      	adds	r2, #40	@ 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80038ca:	6307      	str	r7, [r0, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80038cc:	4f0f      	ldr	r7, [pc, #60]	@ (800390c <HAL_UART_Transmit_DMA+0x98>)
 80038ce:	6347      	str	r7, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80038d0:	f7fe faa0 	bl	8001e14 <HAL_DMA_Start_IT>
 80038d4:	42b0      	cmp	r0, r6
 80038d6:	d004      	beq.n	80038e2 <HAL_UART_Transmit_DMA+0x6e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038d8:	2310      	movs	r3, #16
 80038da:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->gState = HAL_UART_STATE_READY;
 80038dc:	18db      	adds	r3, r3, r3
 80038de:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_ERROR;
 80038e0:	e7d3      	b.n	800388a <HAL_UART_Transmit_DMA+0x16>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80038e2:	2240      	movs	r2, #64	@ 0x40
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ec:	2301      	movs	r3, #1
 80038ee:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038f2:	6822      	ldr	r2, [r4, #0]
 80038f4:	337f      	adds	r3, #127	@ 0x7f
 80038f6:	6890      	ldr	r0, [r2, #8]
 80038f8:	4303      	orrs	r3, r0
 80038fa:	6093      	str	r3, [r2, #8]
 80038fc:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8003900:	2000      	movs	r0, #0
 8003902:	e7c3      	b.n	800388c <HAL_UART_Transmit_DMA+0x18>
 8003904:	08003911 	.word	0x08003911
 8003908:	08003963 	.word	0x08003963
 800390c:	0800396f 	.word	0x0800396f

08003910 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003910:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003912:	681b      	ldr	r3, [r3, #0]
{
 8003914:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	2320      	movs	r3, #32
 800391a:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800391c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800391e:	4019      	ands	r1, r3
 8003920:	421a      	tst	r2, r3
 8003922:	d11a      	bne.n	800395a <UART_DMATransmitCplt+0x4a>
  {
    huart->TxXferCount = 0U;
 8003924:	0003      	movs	r3, r0
 8003926:	3352      	adds	r3, #82	@ 0x52
 8003928:	8019      	strh	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800392a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392e:	2201      	movs	r2, #1
 8003930:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003934:	2580      	movs	r5, #128	@ 0x80
 8003936:	6801      	ldr	r1, [r0, #0]
 8003938:	688b      	ldr	r3, [r1, #8]
 800393a:	43ab      	bics	r3, r5
 800393c:	608b      	str	r3, [r1, #8]
 800393e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003942:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003946:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800394a:	2340      	movs	r3, #64	@ 0x40
 800394c:	6802      	ldr	r2, [r0, #0]
 800394e:	6810      	ldr	r0, [r2, #0]
 8003950:	4303      	orrs	r3, r0
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003958:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_TxCpltCallback(huart);
 800395a:	f7fd fe1f 	bl	800159c <HAL_UART_TxCpltCallback>
}
 800395e:	e7fb      	b.n	8003958 <UART_DMATransmitCplt+0x48>

08003960 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8003960:	4770      	bx	lr

08003962 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003962:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003964:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003966:	f7ff fffb 	bl	8003960 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800396a:	bd10      	pop	{r4, pc}

0800396c <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800396c:	4770      	bx	lr

0800396e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800396e:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003970:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003972:	1d23      	adds	r3, r4, #4
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003974:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003976:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	d513      	bpl.n	80039a8 <UART_DMAError+0x3a>
 8003980:	2a21      	cmp	r2, #33	@ 0x21
 8003982:	d111      	bne.n	80039a8 <UART_DMAError+0x3a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003984:	0023      	movs	r3, r4
 8003986:	2200      	movs	r2, #0
 8003988:	3352      	adds	r3, #82	@ 0x52
 800398a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003990:	2301      	movs	r3, #1
 8003992:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003996:	25c0      	movs	r5, #192	@ 0xc0
 8003998:	6822      	ldr	r2, [r4, #0]
 800399a:	6813      	ldr	r3, [r2, #0]
 800399c:	43ab      	bics	r3, r5
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 80039a4:	2320      	movs	r3, #32
 80039a6:	67e3      	str	r3, [r4, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	065b      	lsls	r3, r3, #25
 80039ae:	d508      	bpl.n	80039c2 <UART_DMAError+0x54>
 80039b0:	2922      	cmp	r1, #34	@ 0x22
 80039b2:	d106      	bne.n	80039c2 <UART_DMAError+0x54>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80039b4:	0023      	movs	r3, r4
 80039b6:	2200      	movs	r2, #0
 80039b8:	335a      	adds	r3, #90	@ 0x5a
    UART_EndRxTransfer(huart);
 80039ba:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 80039bc:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 80039be:	f7ff ff2b 	bl	8003818 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039c2:	0022      	movs	r2, r4
 80039c4:	2310      	movs	r3, #16
 80039c6:	3208      	adds	r2, #8
 80039c8:	6fd1      	ldr	r1, [r2, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039ca:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039cc:	430b      	orrs	r3, r1
 80039ce:	67d3      	str	r3, [r2, #124]	@ 0x7c
  HAL_UART_ErrorCallback(huart);
 80039d0:	f7ff ffcc 	bl	800396c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039d4:	bd70      	pop	{r4, r5, r6, pc}

080039d6 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039d6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	0002      	movs	r2, r0
{
 80039dc:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80039de:	325a      	adds	r2, #90	@ 0x5a
 80039e0:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80039e2:	3a08      	subs	r2, #8
 80039e4:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039e6:	f7ff ffc1 	bl	800396c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039ea:	bd10      	pop	{r4, pc}

080039ec <HAL_UARTEx_RxEventCallback>:
}
 80039ec:	4770      	bx	lr
	...

080039f0 <HAL_UART_IRQHandler>:
{
 80039f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039f2:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039f4:	6800      	ldr	r0, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039f6:	4bab      	ldr	r3, [pc, #684]	@ (8003ca4 <HAL_UART_IRQHandler+0x2b4>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039f8:	69c1      	ldr	r1, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039fa:	6806      	ldr	r6, [r0, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039fc:	6885      	ldr	r5, [r0, #8]
  if (errorflags == 0U)
 80039fe:	4219      	tst	r1, r3
 8003a00:	d10b      	bne.n	8003a1a <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a02:	2320      	movs	r3, #32
 8003a04:	4219      	tst	r1, r3
 8003a06:	d100      	bne.n	8003a0a <HAL_UART_IRQHandler+0x1a>
 8003a08:	e080      	b.n	8003b0c <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a0a:	421e      	tst	r6, r3
 8003a0c:	d100      	bne.n	8003a10 <HAL_UART_IRQHandler+0x20>
 8003a0e:	e07d      	b.n	8003b0c <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 8003a10:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
      huart->TxISR(huart);
 8003a12:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d16f      	bne.n	8003af8 <HAL_UART_IRQHandler+0x108>
 8003a18:	e06f      	b.n	8003afa <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	002f      	movs	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a1e:	4aa2      	ldr	r2, [pc, #648]	@ (8003ca8 <HAL_UART_IRQHandler+0x2b8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a20:	401f      	ands	r7, r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a22:	4032      	ands	r2, r6
 8003a24:	433a      	orrs	r2, r7
 8003a26:	d100      	bne.n	8003a2a <HAL_UART_IRQHandler+0x3a>
 8003a28:	e070      	b.n	8003b0c <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a2a:	0025      	movs	r5, r4
 8003a2c:	3508      	adds	r5, #8
 8003a2e:	4219      	tst	r1, r3
 8003a30:	d005      	beq.n	8003a3e <HAL_UART_IRQHandler+0x4e>
 8003a32:	05f2      	lsls	r2, r6, #23
 8003a34:	d503      	bpl.n	8003a3e <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a36:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a38:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a3e:	2302      	movs	r3, #2
 8003a40:	4219      	tst	r1, r3
 8003a42:	d006      	beq.n	8003a52 <HAL_UART_IRQHandler+0x62>
 8003a44:	2f00      	cmp	r7, #0
 8003a46:	d004      	beq.n	8003a52 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a48:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a4a:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8003a4c:	18db      	adds	r3, r3, r3
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a52:	2304      	movs	r3, #4
 8003a54:	4219      	tst	r1, r3
 8003a56:	d006      	beq.n	8003a66 <HAL_UART_IRQHandler+0x76>
 8003a58:	2f00      	cmp	r7, #0
 8003a5a:	d004      	beq.n	8003a66 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a5c:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a5e:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8003a60:	3b02      	subs	r3, #2
 8003a62:	4313      	orrs	r3, r2
 8003a64:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a66:	2308      	movs	r3, #8
 8003a68:	4219      	tst	r1, r3
 8003a6a:	d007      	beq.n	8003a7c <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	4032      	ands	r2, r6
 8003a70:	433a      	orrs	r2, r7
 8003a72:	d003      	beq.n	8003a7c <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a74:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a76:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a7c:	2380      	movs	r3, #128	@ 0x80
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	4219      	tst	r1, r3
 8003a82:	d006      	beq.n	8003a92 <HAL_UART_IRQHandler+0xa2>
 8003a84:	0172      	lsls	r2, r6, #5
 8003a86:	d504      	bpl.n	8003a92 <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a88:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a92:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d030      	beq.n	8003afa <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a98:	2320      	movs	r3, #32
 8003a9a:	4219      	tst	r1, r3
 8003a9c:	d006      	beq.n	8003aac <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a9e:	421e      	tst	r6, r3
 8003aa0:	d004      	beq.n	8003aac <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 8003aa2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 8003aa8:	0020      	movs	r0, r4
 8003aaa:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aac:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8003aae:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ab0:	2740      	movs	r7, #64	@ 0x40
 8003ab2:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ab4:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ab6:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ab8:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8003aba:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003abc:	431e      	orrs	r6, r3
 8003abe:	d021      	beq.n	8003b04 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8003ac0:	f7ff feaa 	bl	8003818 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	423b      	tst	r3, r7
 8003aca:	d017      	beq.n	8003afc <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003acc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad6:	6822      	ldr	r2, [r4, #0]
 8003ad8:	6893      	ldr	r3, [r2, #8]
 8003ada:	43bb      	bics	r3, r7
 8003adc:	6093      	str	r3, [r2, #8]
 8003ade:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8003ae2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d009      	beq.n	8003afc <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ae8:	4b70      	ldr	r3, [pc, #448]	@ (8003cac <HAL_UART_IRQHandler+0x2bc>)
 8003aea:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aec:	f7fe f9f0 	bl	8001ed0 <HAL_DMA_Abort_IT>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d002      	beq.n	8003afa <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003af4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003af6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003af8:	4798      	blx	r3
}
 8003afa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8003afc:	0020      	movs	r0, r4
 8003afe:	f7ff ff35 	bl	800396c <HAL_UART_ErrorCallback>
 8003b02:	e7fa      	b.n	8003afa <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8003b04:	f7ff ff32 	bl	800396c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b08:	67ee      	str	r6, [r5, #124]	@ 0x7c
 8003b0a:	e7f6      	b.n	8003afa <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b0c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d000      	beq.n	8003b14 <HAL_UART_IRQHandler+0x124>
 8003b12:	e09a      	b.n	8003c4a <HAL_UART_IRQHandler+0x25a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b14:	2210      	movs	r2, #16
 8003b16:	4211      	tst	r1, r2
 8003b18:	d100      	bne.n	8003b1c <HAL_UART_IRQHandler+0x12c>
 8003b1a:	e096      	b.n	8003c4a <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b1c:	4216      	tst	r6, r2
 8003b1e:	d100      	bne.n	8003b22 <HAL_UART_IRQHandler+0x132>
 8003b20:	e093      	b.n	8003c4a <HAL_UART_IRQHandler+0x25a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b22:	6202      	str	r2, [r0, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	6881      	ldr	r1, [r0, #8]
 8003b26:	2640      	movs	r6, #64	@ 0x40
 8003b28:	000f      	movs	r7, r1
 8003b2a:	4037      	ands	r7, r6
 8003b2c:	4231      	tst	r1, r6
 8003b2e:	d053      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x1e8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b30:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8003b32:	6808      	ldr	r0, [r1, #0]
 8003b34:	6841      	ldr	r1, [r0, #4]
 8003b36:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8003b38:	2900      	cmp	r1, #0
 8003b3a:	d0de      	beq.n	8003afa <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b3c:	0025      	movs	r5, r4
 8003b3e:	3558      	adds	r5, #88	@ 0x58
 8003b40:	882d      	ldrh	r5, [r5, #0]
 8003b42:	428d      	cmp	r5, r1
 8003b44:	d9d9      	bls.n	8003afa <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 8003b46:	0025      	movs	r5, r4
 8003b48:	355a      	adds	r5, #90	@ 0x5a
 8003b4a:	8029      	strh	r1, [r5, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b4c:	6801      	ldr	r1, [r0, #0]
 8003b4e:	2020      	movs	r0, #32
 8003b50:	000d      	movs	r5, r1
 8003b52:	4005      	ands	r5, r0
 8003b54:	9501      	str	r5, [sp, #4]
 8003b56:	4201      	tst	r1, r0
 8003b58:	d130      	bne.n	8003bbc <HAL_UART_IRQHandler+0x1cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b5a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b62:	6825      	ldr	r5, [r4, #0]
 8003b64:	4a52      	ldr	r2, [pc, #328]	@ (8003cb0 <HAL_UART_IRQHandler+0x2c0>)
 8003b66:	6829      	ldr	r1, [r5, #0]
 8003b68:	4011      	ands	r1, r2
 8003b6a:	6029      	str	r1, [r5, #0]
 8003b6c:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b70:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b74:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b78:	6825      	ldr	r5, [r4, #0]
 8003b7a:	68a9      	ldr	r1, [r5, #8]
 8003b7c:	4399      	bics	r1, r3
 8003b7e:	60a9      	str	r1, [r5, #8]
 8003b80:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b84:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b88:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b8c:	0021      	movs	r1, r4
 8003b8e:	c980      	ldmia	r1!, {r7}
 8003b90:	68bd      	ldr	r5, [r7, #8]
 8003b92:	43b5      	bics	r5, r6
 8003b94:	60bd      	str	r5, [r7, #8]
 8003b96:	f38c 8810 	msr	PRIMASK, ip
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9a:	9a01      	ldr	r2, [sp, #4]
          huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	67c8      	str	r0, [r1, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	6622      	str	r2, [r4, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba8:	2210      	movs	r2, #16
 8003baa:	6821      	ldr	r1, [r4, #0]
 8003bac:	680b      	ldr	r3, [r1, #0]
 8003bae:	4393      	bics	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]
 8003bb2:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bb6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003bb8:	f7fe f96a 	bl	8001e90 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bbc:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bbe:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bc0:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bc2:	0023      	movs	r3, r4
 8003bc4:	3258      	adds	r2, #88	@ 0x58
 8003bc6:	335a      	adds	r3, #90	@ 0x5a
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	8811      	ldrh	r1, [r2, #0]
 8003bcc:	1ac9      	subs	r1, r1, r3
 8003bce:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bd0:	0020      	movs	r0, r4
 8003bd2:	f7ff ff0b 	bl	80039ec <HAL_UARTEx_RxEventCallback>
 8003bd6:	e790      	b.n	8003afa <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bd8:	0025      	movs	r5, r4
 8003bda:	0021      	movs	r1, r4
 8003bdc:	355a      	adds	r5, #90	@ 0x5a
 8003bde:	8828      	ldrh	r0, [r5, #0]
      if ((huart->RxXferCount > 0U)
 8003be0:	882d      	ldrh	r5, [r5, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003be2:	3158      	adds	r1, #88	@ 0x58
 8003be4:	8809      	ldrh	r1, [r1, #0]
 8003be6:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8003be8:	2d00      	cmp	r5, #0
 8003bea:	d100      	bne.n	8003bee <HAL_UART_IRQHandler+0x1fe>
 8003bec:	e785      	b.n	8003afa <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bee:	1a09      	subs	r1, r1, r0
 8003bf0:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003bf2:	2900      	cmp	r1, #0
 8003bf4:	d100      	bne.n	8003bf8 <HAL_UART_IRQHandler+0x208>
 8003bf6:	e780      	b.n	8003afa <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfc:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c00:	6825      	ldr	r5, [r4, #0]
 8003c02:	4a2c      	ldr	r2, [pc, #176]	@ (8003cb4 <HAL_UART_IRQHandler+0x2c4>)
 8003c04:	6828      	ldr	r0, [r5, #0]
 8003c06:	4010      	ands	r0, r2
 8003c08:	6028      	str	r0, [r5, #0]
 8003c0a:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c0e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c12:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	0020      	movs	r0, r4
 8003c18:	c840      	ldmia	r0!, {r6}
 8003c1a:	68b5      	ldr	r5, [r6, #8]
 8003c1c:	439d      	bics	r5, r3
 8003c1e:	60b5      	str	r5, [r6, #8]
 8003c20:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 8003c24:	2520      	movs	r5, #32
 8003c26:	67c5      	str	r5, [r0, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c28:	6627      	str	r7, [r4, #96]	@ 0x60
        huart->RxISR = NULL;
 8003c2a:	66a7      	str	r7, [r4, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c2c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c30:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c34:	6820      	ldr	r0, [r4, #0]
 8003c36:	3232      	adds	r2, #50	@ 0x32
 8003c38:	6803      	ldr	r3, [r0, #0]
 8003c3a:	32ff      	adds	r2, #255	@ 0xff
 8003c3c:	4393      	bics	r3, r2
 8003c3e:	6003      	str	r3, [r0, #0]
 8003c40:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c44:	2302      	movs	r3, #2
 8003c46:	6663      	str	r3, [r4, #100]	@ 0x64
 8003c48:	e7c2      	b.n	8003bd0 <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c4a:	2380      	movs	r3, #128	@ 0x80
 8003c4c:	035b      	lsls	r3, r3, #13
 8003c4e:	4219      	tst	r1, r3
 8003c50:	d006      	beq.n	8003c60 <HAL_UART_IRQHandler+0x270>
 8003c52:	026d      	lsls	r5, r5, #9
 8003c54:	d504      	bpl.n	8003c60 <HAL_UART_IRQHandler+0x270>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c56:	6203      	str	r3, [r0, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003c58:	0020      	movs	r0, r4
 8003c5a:	f000 fbe3 	bl	8004424 <HAL_UARTEx_WakeupCallback>
    return;
 8003c5e:	e74c      	b.n	8003afa <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c60:	2380      	movs	r3, #128	@ 0x80
 8003c62:	4219      	tst	r1, r3
 8003c64:	d003      	beq.n	8003c6e <HAL_UART_IRQHandler+0x27e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c66:	421e      	tst	r6, r3
 8003c68:	d001      	beq.n	8003c6e <HAL_UART_IRQHandler+0x27e>
    if (huart->TxISR != NULL)
 8003c6a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8003c6c:	e6d1      	b.n	8003a12 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c6e:	2240      	movs	r2, #64	@ 0x40
 8003c70:	4211      	tst	r1, r2
 8003c72:	d100      	bne.n	8003c76 <HAL_UART_IRQHandler+0x286>
 8003c74:	e741      	b.n	8003afa <HAL_UART_IRQHandler+0x10a>
 8003c76:	4216      	tst	r6, r2
 8003c78:	d100      	bne.n	8003c7c <HAL_UART_IRQHandler+0x28c>
 8003c7a:	e73e      	b.n	8003afa <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c80:	2301      	movs	r3, #1
 8003c82:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c86:	6821      	ldr	r1, [r4, #0]
 8003c88:	680b      	ldr	r3, [r1, #0]
 8003c8a:	4393      	bics	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]
 8003c8e:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c92:	2320      	movs	r3, #32
 8003c94:	67e3      	str	r3, [r4, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c96:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c98:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8003c9a:	66e3      	str	r3, [r4, #108]	@ 0x6c
  HAL_UART_TxCpltCallback(huart);
 8003c9c:	f7fd fc7e 	bl	800159c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ca0:	e72b      	b.n	8003afa <HAL_UART_IRQHandler+0x10a>
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	0000080f 	.word	0x0000080f
 8003ca8:	04000120 	.word	0x04000120
 8003cac:	080039d7 	.word	0x080039d7
 8003cb0:	fffffeff 	.word	0xfffffeff
 8003cb4:	fffffedf 	.word	0xfffffedf

08003cb8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t uhMask = huart->Mask;
 8003cba:	0003      	movs	r3, r0
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cbc:	1d01      	adds	r1, r0, #4
 8003cbe:	6fcc      	ldr	r4, [r1, #124]	@ 0x7c
  uint16_t uhMask = huart->Mask;
 8003cc0:	335c      	adds	r3, #92	@ 0x5c
 8003cc2:	881a      	ldrh	r2, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cc4:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cc6:	2c22      	cmp	r4, #34	@ 0x22
 8003cc8:	d15a      	bne.n	8003d80 <UART_RxISR_8BIT+0xc8>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ccc:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8003cce:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8003cd0:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cd2:	7023      	strb	r3, [r4, #0]
    huart->pRxBuffPtr++;
 8003cd4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8003cd6:	325a      	adds	r2, #90	@ 0x5a
    huart->pRxBuffPtr++;
 8003cd8:	3301      	adds	r3, #1
 8003cda:	6543      	str	r3, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8003cdc:	8813      	ldrh	r3, [r2, #0]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8003ce4:	8813      	ldrh	r3, [r2, #0]
 8003ce6:	b29c      	uxth	r4, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d145      	bne.n	8003d78 <UART_RxISR_8BIT+0xc0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cec:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf6:	6805      	ldr	r5, [r0, #0]
 8003cf8:	4f24      	ldr	r7, [pc, #144]	@ (8003d8c <UART_RxISR_8BIT+0xd4>)
 8003cfa:	682a      	ldr	r2, [r5, #0]
 8003cfc:	403a      	ands	r2, r7
 8003cfe:	602a      	str	r2, [r5, #0]
 8003d00:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d04:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d08:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0c:	6805      	ldr	r5, [r0, #0]
 8003d0e:	68aa      	ldr	r2, [r5, #8]
 8003d10:	439a      	bics	r2, r3
 8003d12:	60aa      	str	r2, [r5, #8]
 8003d14:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d18:	2220      	movs	r2, #32
 8003d1a:	67ca      	str	r2, [r1, #124]	@ 0x7c
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d1c:	6802      	ldr	r2, [r0, #0]
 8003d1e:	491c      	ldr	r1, [pc, #112]	@ (8003d90 <UART_RxISR_8BIT+0xd8>)
      huart->RxISR = NULL;
 8003d20:	6684      	str	r4, [r0, #104]	@ 0x68
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d22:	6644      	str	r4, [r0, #100]	@ 0x64
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d24:	428a      	cmp	r2, r1
 8003d26:	d00d      	beq.n	8003d44 <UART_RxISR_8BIT+0x8c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d28:	6852      	ldr	r2, [r2, #4]
 8003d2a:	0212      	lsls	r2, r2, #8
 8003d2c:	d50a      	bpl.n	8003d44 <UART_RxISR_8BIT+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d32:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d36:	6802      	ldr	r2, [r0, #0]
 8003d38:	4c16      	ldr	r4, [pc, #88]	@ (8003d94 <UART_RxISR_8BIT+0xdc>)
 8003d3a:	6813      	ldr	r3, [r2, #0]
 8003d3c:	4023      	ands	r3, r4
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d44:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d117      	bne.n	8003d7a <UART_RxISR_8BIT+0xc2>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	6602      	str	r2, [r0, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d4e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d52:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d56:	6801      	ldr	r1, [r0, #0]
 8003d58:	330f      	adds	r3, #15
 8003d5a:	680a      	ldr	r2, [r1, #0]
 8003d5c:	439a      	bics	r2, r3
 8003d5e:	600a      	str	r2, [r1, #0]
 8003d60:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d64:	6802      	ldr	r2, [r0, #0]
 8003d66:	69d1      	ldr	r1, [r2, #28]
 8003d68:	4219      	tst	r1, r3
 8003d6a:	d000      	beq.n	8003d6e <UART_RxISR_8BIT+0xb6>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d6c:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d6e:	0003      	movs	r3, r0
 8003d70:	3358      	adds	r3, #88	@ 0x58
 8003d72:	8819      	ldrh	r1, [r3, #0]
 8003d74:	f7ff fe3a 	bl	80039ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8003d7a:	f7fd fc17 	bl	80015ac <HAL_UART_RxCpltCallback>
 8003d7e:	e7fb      	b.n	8003d78 <UART_RxISR_8BIT+0xc0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d80:	2208      	movs	r2, #8
 8003d82:	6999      	ldr	r1, [r3, #24]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	619a      	str	r2, [r3, #24]
}
 8003d88:	e7f6      	b.n	8003d78 <UART_RxISR_8BIT+0xc0>
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	fffffedf 	.word	0xfffffedf
 8003d90:	40004800 	.word	0x40004800
 8003d94:	fbffffff 	.word	0xfbffffff

08003d98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d9a:	0003      	movs	r3, r0
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d9c:	1d02      	adds	r2, r0, #4
 8003d9e:	6fd1      	ldr	r1, [r2, #124]	@ 0x7c
  uint16_t uhMask = huart->Mask;
 8003da0:	335c      	adds	r3, #92	@ 0x5c
 8003da2:	881c      	ldrh	r4, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003da4:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003da6:	2922      	cmp	r1, #34	@ 0x22
 8003da8:	d159      	bne.n	8003e5e <UART_RxISR_16BIT+0xc6>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003daa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003dac:	6d43      	ldr	r3, [r0, #84]	@ 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8003dae:	4021      	ands	r1, r4
 8003db0:	8019      	strh	r1, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8003db2:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 8003db4:	3302      	adds	r3, #2
 8003db6:	6543      	str	r3, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8003db8:	315a      	adds	r1, #90	@ 0x5a
 8003dba:	880b      	ldrh	r3, [r1, #0]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	800b      	strh	r3, [r1, #0]

    if (huart->RxXferCount == 0U)
 8003dc2:	880b      	ldrh	r3, [r1, #0]
 8003dc4:	b29c      	uxth	r4, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d145      	bne.n	8003e56 <UART_RxISR_16BIT+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dca:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dce:	3301      	adds	r3, #1
 8003dd0:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd4:	6805      	ldr	r5, [r0, #0]
 8003dd6:	4f24      	ldr	r7, [pc, #144]	@ (8003e68 <UART_RxISR_16BIT+0xd0>)
 8003dd8:	6829      	ldr	r1, [r5, #0]
 8003dda:	4039      	ands	r1, r7
 8003ddc:	6029      	str	r1, [r5, #0]
 8003dde:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de6:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dea:	6805      	ldr	r5, [r0, #0]
 8003dec:	68a9      	ldr	r1, [r5, #8]
 8003dee:	4399      	bics	r1, r3
 8003df0:	60a9      	str	r1, [r5, #8]
 8003df2:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003df6:	2120      	movs	r1, #32
 8003df8:	67d1      	str	r1, [r2, #124]	@ 0x7c
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003dfa:	6802      	ldr	r2, [r0, #0]
 8003dfc:	491b      	ldr	r1, [pc, #108]	@ (8003e6c <UART_RxISR_16BIT+0xd4>)
      huart->RxISR = NULL;
 8003dfe:	6684      	str	r4, [r0, #104]	@ 0x68
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e00:	6644      	str	r4, [r0, #100]	@ 0x64
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e02:	428a      	cmp	r2, r1
 8003e04:	d00d      	beq.n	8003e22 <UART_RxISR_16BIT+0x8a>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e06:	6852      	ldr	r2, [r2, #4]
 8003e08:	0212      	lsls	r2, r2, #8
 8003e0a:	d50a      	bpl.n	8003e22 <UART_RxISR_16BIT+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e10:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e14:	6802      	ldr	r2, [r0, #0]
 8003e16:	4c16      	ldr	r4, [pc, #88]	@ (8003e70 <UART_RxISR_16BIT+0xd8>)
 8003e18:	6813      	ldr	r3, [r2, #0]
 8003e1a:	4023      	ands	r3, r4
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e22:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d117      	bne.n	8003e58 <UART_RxISR_16BIT+0xc0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e28:	2200      	movs	r2, #0
 8003e2a:	6602      	str	r2, [r0, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e2c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e30:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e34:	6801      	ldr	r1, [r0, #0]
 8003e36:	330f      	adds	r3, #15
 8003e38:	680a      	ldr	r2, [r1, #0]
 8003e3a:	439a      	bics	r2, r3
 8003e3c:	600a      	str	r2, [r1, #0]
 8003e3e:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e42:	6802      	ldr	r2, [r0, #0]
 8003e44:	69d1      	ldr	r1, [r2, #28]
 8003e46:	4219      	tst	r1, r3
 8003e48:	d000      	beq.n	8003e4c <UART_RxISR_16BIT+0xb4>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e4a:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	3358      	adds	r3, #88	@ 0x58
 8003e50:	8819      	ldrh	r1, [r3, #0]
 8003e52:	f7ff fdcb 	bl	80039ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8003e58:	f7fd fba8 	bl	80015ac <HAL_UART_RxCpltCallback>
 8003e5c:	e7fb      	b.n	8003e56 <UART_RxISR_16BIT+0xbe>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e5e:	2208      	movs	r2, #8
 8003e60:	6999      	ldr	r1, [r3, #24]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	619a      	str	r2, [r3, #24]
}
 8003e66:	e7f6      	b.n	8003e56 <UART_RxISR_16BIT+0xbe>
 8003e68:	fffffedf 	.word	0xfffffedf
 8003e6c:	40004800 	.word	0x40004800
 8003e70:	fbffffff 	.word	0xfbffffff

08003e74 <UART_SetConfig>:
{
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e78:	6925      	ldr	r5, [r4, #16]
 8003e7a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e7c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e7e:	4329      	orrs	r1, r5
 8003e80:	6965      	ldr	r5, [r4, #20]
 8003e82:	69c3      	ldr	r3, [r0, #28]
 8003e84:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e86:	6810      	ldr	r0, [r2, #0]
 8003e88:	4d6e      	ldr	r5, [pc, #440]	@ (8004044 <UART_SetConfig+0x1d0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e8a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e8c:	4028      	ands	r0, r5
 8003e8e:	4301      	orrs	r1, r0
 8003e90:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e92:	6851      	ldr	r1, [r2, #4]
 8003e94:	486c      	ldr	r0, [pc, #432]	@ (8004048 <UART_SetConfig+0x1d4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e96:	4d6d      	ldr	r5, [pc, #436]	@ (800404c <UART_SetConfig+0x1d8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e98:	4001      	ands	r1, r0
 8003e9a:	68e0      	ldr	r0, [r4, #12]
 8003e9c:	4301      	orrs	r1, r0
 8003e9e:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ea0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ea2:	42aa      	cmp	r2, r5
 8003ea4:	d001      	beq.n	8003eaa <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8003ea6:	6a21      	ldr	r1, [r4, #32]
 8003ea8:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eaa:	6891      	ldr	r1, [r2, #8]
 8003eac:	4e68      	ldr	r6, [pc, #416]	@ (8004050 <UART_SetConfig+0x1dc>)
 8003eae:	4031      	ands	r1, r6
 8003eb0:	4301      	orrs	r1, r0
 8003eb2:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eb4:	4967      	ldr	r1, [pc, #412]	@ (8004054 <UART_SetConfig+0x1e0>)
 8003eb6:	428a      	cmp	r2, r1
 8003eb8:	d114      	bne.n	8003ee4 <UART_SetConfig+0x70>
 8003eba:	2103      	movs	r1, #3
 8003ebc:	2080      	movs	r0, #128	@ 0x80
 8003ebe:	4a66      	ldr	r2, [pc, #408]	@ (8004058 <UART_SetConfig+0x1e4>)
 8003ec0:	0200      	lsls	r0, r0, #8
 8003ec2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	2a02      	cmp	r2, #2
 8003ec8:	d100      	bne.n	8003ecc <UART_SetConfig+0x58>
 8003eca:	e079      	b.n	8003fc0 <UART_SetConfig+0x14c>
 8003ecc:	428a      	cmp	r2, r1
 8003ece:	d100      	bne.n	8003ed2 <UART_SetConfig+0x5e>
 8003ed0:	e09d      	b.n	800400e <UART_SetConfig+0x19a>
 8003ed2:	2a01      	cmp	r2, #1
 8003ed4:	d100      	bne.n	8003ed8 <UART_SetConfig+0x64>
 8003ed6:	e093      	b.n	8004000 <UART_SetConfig+0x18c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed8:	4283      	cmp	r3, r0
 8003eda:	d100      	bne.n	8003ede <UART_SetConfig+0x6a>
 8003edc:	e09a      	b.n	8004014 <UART_SetConfig+0x1a0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ede:	f7fe fe17 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
        break;
 8003ee2:	e063      	b.n	8003fac <UART_SetConfig+0x138>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ee4:	495d      	ldr	r1, [pc, #372]	@ (800405c <UART_SetConfig+0x1e8>)
 8003ee6:	428a      	cmp	r2, r1
 8003ee8:	d117      	bne.n	8003f1a <UART_SetConfig+0xa6>
 8003eea:	210c      	movs	r1, #12
 8003eec:	4a5a      	ldr	r2, [pc, #360]	@ (8004058 <UART_SetConfig+0x1e4>)
 8003eee:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	2a08      	cmp	r2, #8
 8003ef4:	d100      	bne.n	8003ef8 <UART_SetConfig+0x84>
 8003ef6:	e090      	b.n	800401a <UART_SetConfig+0x1a6>
 8003ef8:	d80a      	bhi.n	8003f10 <UART_SetConfig+0x9c>
 8003efa:	2a00      	cmp	r2, #0
 8003efc:	d159      	bne.n	8003fb2 <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003efe:	2280      	movs	r2, #128	@ 0x80
 8003f00:	0212      	lsls	r2, r2, #8
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d150      	bne.n	8003fa8 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f06:	f7fe fdf3 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8003f0a:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8003f0c:	d047      	beq.n	8003f9e <UART_SetConfig+0x12a>
 8003f0e:	e061      	b.n	8003fd4 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f10:	2a0c      	cmp	r2, #12
 8003f12:	d100      	bne.n	8003f16 <UART_SetConfig+0xa2>
 8003f14:	e079      	b.n	800400a <UART_SetConfig+0x196>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f16:	2001      	movs	r0, #1
 8003f18:	e042      	b.n	8003fa0 <UART_SetConfig+0x12c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f1a:	4951      	ldr	r1, [pc, #324]	@ (8004060 <UART_SetConfig+0x1ec>)
 8003f1c:	428a      	cmp	r2, r1
 8003f1e:	d0ee      	beq.n	8003efe <UART_SetConfig+0x8a>
 8003f20:	4950      	ldr	r1, [pc, #320]	@ (8004064 <UART_SetConfig+0x1f0>)
 8003f22:	428a      	cmp	r2, r1
 8003f24:	d0eb      	beq.n	8003efe <UART_SetConfig+0x8a>
 8003f26:	42aa      	cmp	r2, r5
 8003f28:	d1f5      	bne.n	8003f16 <UART_SetConfig+0xa2>
 8003f2a:	21c0      	movs	r1, #192	@ 0xc0
 8003f2c:	2080      	movs	r0, #128	@ 0x80
 8003f2e:	4a4a      	ldr	r2, [pc, #296]	@ (8004058 <UART_SetConfig+0x1e4>)
 8003f30:	0109      	lsls	r1, r1, #4
 8003f32:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8003f34:	0100      	lsls	r0, r0, #4
 8003f36:	400b      	ands	r3, r1
 8003f38:	4283      	cmp	r3, r0
 8003f3a:	d00a      	beq.n	8003f52 <UART_SetConfig+0xde>
 8003f3c:	d804      	bhi.n	8003f48 <UART_SetConfig+0xd4>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d129      	bne.n	8003f96 <UART_SetConfig+0x122>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f42:	f7fe fdd5 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
        break;
 8003f46:	e028      	b.n	8003f9a <UART_SetConfig+0x126>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f48:	428b      	cmp	r3, r1
 8003f4a:	d1e4      	bne.n	8003f16 <UART_SetConfig+0xa2>
 8003f4c:	2080      	movs	r0, #128	@ 0x80
 8003f4e:	0200      	lsls	r0, r0, #8
 8003f50:	e006      	b.n	8003f60 <UART_SetConfig+0xec>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f52:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 8003f54:	4b44      	ldr	r3, [pc, #272]	@ (8004068 <UART_SetConfig+0x1f4>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f56:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8003f58:	17c0      	asrs	r0, r0, #31
 8003f5a:	4018      	ands	r0, r3
 8003f5c:	4b43      	ldr	r3, [pc, #268]	@ (800406c <UART_SetConfig+0x1f8>)
 8003f5e:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f60:	2303      	movs	r3, #3
 8003f62:	6862      	ldr	r2, [r4, #4]
 8003f64:	4353      	muls	r3, r2
 8003f66:	4283      	cmp	r3, r0
 8003f68:	d8d5      	bhi.n	8003f16 <UART_SetConfig+0xa2>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f6a:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f6c:	4283      	cmp	r3, r0
 8003f6e:	d3d2      	bcc.n	8003f16 <UART_SetConfig+0xa2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f70:	2100      	movs	r1, #0
 8003f72:	0e07      	lsrs	r7, r0, #24
 8003f74:	0206      	lsls	r6, r0, #8
 8003f76:	0850      	lsrs	r0, r2, #1
 8003f78:	1836      	adds	r6, r6, r0
 8003f7a:	414f      	adcs	r7, r1
 8003f7c:	000b      	movs	r3, r1
 8003f7e:	0030      	movs	r0, r6
 8003f80:	0039      	movs	r1, r7
 8003f82:	f7fc fa49 	bl	8000418 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f86:	4b3a      	ldr	r3, [pc, #232]	@ (8004070 <UART_SetConfig+0x1fc>)
 8003f88:	18c2      	adds	r2, r0, r3
 8003f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8004074 <UART_SetConfig+0x200>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d8c2      	bhi.n	8003f16 <UART_SetConfig+0xa2>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	60d8      	str	r0, [r3, #12]
 8003f94:	e003      	b.n	8003f9e <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003f96:	f7fe fa09 	bl	80023ac <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d1e0      	bne.n	8003f60 <UART_SetConfig+0xec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f9e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8003fa4:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8003fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa8:	f7fe fda2 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003fac:	2800      	cmp	r0, #0
 8003fae:	d0f6      	beq.n	8003f9e <UART_SetConfig+0x12a>
 8003fb0:	e03f      	b.n	8004032 <UART_SetConfig+0x1be>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fb2:	2280      	movs	r2, #128	@ 0x80
 8003fb4:	0212      	lsls	r2, r2, #8
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d124      	bne.n	8004004 <UART_SetConfig+0x190>
        pclk = HAL_RCC_GetSysClockFreq();
 8003fba:	f7fe f9f7 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8003fbe:	e7a4      	b.n	8003f0a <UART_SetConfig+0x96>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fc0:	4283      	cmp	r3, r0
 8003fc2:	d12e      	bne.n	8004022 <UART_SetConfig+0x1ae>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fc4:	4b24      	ldr	r3, [pc, #144]	@ (8004058 <UART_SetConfig+0x1e4>)
          pclk = (uint32_t) HSI_VALUE;
 8003fc6:	4a28      	ldr	r2, [pc, #160]	@ (8004068 <UART_SetConfig+0x1f4>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	06db      	lsls	r3, r3, #27
          pclk = (uint32_t) HSI_VALUE;
 8003fcc:	17db      	asrs	r3, r3, #31
 8003fce:	4013      	ands	r3, r2
 8003fd0:	4a26      	ldr	r2, [pc, #152]	@ (800406c <UART_SetConfig+0x1f8>)
 8003fd2:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fd4:	6861      	ldr	r1, [r4, #4]
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	0848      	lsrs	r0, r1, #1
 8003fda:	1818      	adds	r0, r3, r0
 8003fdc:	f7fc f8a6 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe0:	0002      	movs	r2, r0
 8003fe2:	4b25      	ldr	r3, [pc, #148]	@ (8004078 <UART_SetConfig+0x204>)
 8003fe4:	3a10      	subs	r2, #16
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d900      	bls.n	8003fec <UART_SetConfig+0x178>
 8003fea:	e794      	b.n	8003f16 <UART_SetConfig+0xa2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fec:	230f      	movs	r3, #15
 8003fee:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ff0:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ff2:	439a      	bics	r2, r3
 8003ff4:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ff6:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8003ff8:	6822      	ldr	r2, [r4, #0]
 8003ffa:	4303      	orrs	r3, r0
 8003ffc:	60d3      	str	r3, [r2, #12]
 8003ffe:	e7ce      	b.n	8003f9e <UART_SetConfig+0x12a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004000:	4283      	cmp	r3, r0
 8004002:	d0da      	beq.n	8003fba <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 8004004:	f7fe f9d2 	bl	80023ac <HAL_RCC_GetSysClockFreq>
        break;
 8004008:	e7d0      	b.n	8003fac <UART_SetConfig+0x138>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800400a:	2080      	movs	r0, #128	@ 0x80
 800400c:	0200      	lsls	r0, r0, #8
 800400e:	4283      	cmp	r3, r0
 8004010:	d0e0      	beq.n	8003fd4 <UART_SetConfig+0x160>
 8004012:	e00e      	b.n	8004032 <UART_SetConfig+0x1be>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004014:	f7fe fd7c 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 8004018:	e777      	b.n	8003f0a <UART_SetConfig+0x96>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800401a:	2280      	movs	r2, #128	@ 0x80
 800401c:	0212      	lsls	r2, r2, #8
 800401e:	4293      	cmp	r3, r2
 8004020:	d0d0      	beq.n	8003fc4 <UART_SetConfig+0x150>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004022:	4b0d      	ldr	r3, [pc, #52]	@ (8004058 <UART_SetConfig+0x1e4>)
 8004024:	6818      	ldr	r0, [r3, #0]
          pclk = (uint32_t) HSI_VALUE;
 8004026:	4b10      	ldr	r3, [pc, #64]	@ (8004068 <UART_SetConfig+0x1f4>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004028:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 800402a:	17c0      	asrs	r0, r0, #31
 800402c:	4018      	ands	r0, r3
 800402e:	4b0f      	ldr	r3, [pc, #60]	@ (800406c <UART_SetConfig+0x1f8>)
 8004030:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004032:	6861      	ldr	r1, [r4, #4]
 8004034:	084b      	lsrs	r3, r1, #1
 8004036:	1818      	adds	r0, r3, r0
 8004038:	f7fc f878 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800403c:	0002      	movs	r2, r0
 800403e:	4b0e      	ldr	r3, [pc, #56]	@ (8004078 <UART_SetConfig+0x204>)
 8004040:	3a10      	subs	r2, #16
 8004042:	e7a3      	b.n	8003f8c <UART_SetConfig+0x118>
 8004044:	efff69f3 	.word	0xefff69f3
 8004048:	ffffcfff 	.word	0xffffcfff
 800404c:	40004800 	.word	0x40004800
 8004050:	fffff4ff 	.word	0xfffff4ff
 8004054:	40013800 	.word	0x40013800
 8004058:	40021000 	.word	0x40021000
 800405c:	40004400 	.word	0x40004400
 8004060:	40004c00 	.word	0x40004c00
 8004064:	40005000 	.word	0x40005000
 8004068:	ff48e500 	.word	0xff48e500
 800406c:	00f42400 	.word	0x00f42400
 8004070:	fffffd00 	.word	0xfffffd00
 8004074:	000ffcff 	.word	0x000ffcff
 8004078:	0000ffef 	.word	0x0000ffef

0800407c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800407c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 800407e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004080:	07da      	lsls	r2, r3, #31
 8004082:	d506      	bpl.n	8004092 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004084:	6801      	ldr	r1, [r0, #0]
 8004086:	4c28      	ldr	r4, [pc, #160]	@ (8004128 <UART_AdvFeatureConfig+0xac>)
 8004088:	684a      	ldr	r2, [r1, #4]
 800408a:	4022      	ands	r2, r4
 800408c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800408e:	4322      	orrs	r2, r4
 8004090:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004092:	079a      	lsls	r2, r3, #30
 8004094:	d506      	bpl.n	80040a4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004096:	6801      	ldr	r1, [r0, #0]
 8004098:	4c24      	ldr	r4, [pc, #144]	@ (800412c <UART_AdvFeatureConfig+0xb0>)
 800409a:	684a      	ldr	r2, [r1, #4]
 800409c:	4022      	ands	r2, r4
 800409e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80040a0:	4322      	orrs	r2, r4
 80040a2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040a4:	075a      	lsls	r2, r3, #29
 80040a6:	d506      	bpl.n	80040b6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040a8:	6801      	ldr	r1, [r0, #0]
 80040aa:	4c21      	ldr	r4, [pc, #132]	@ (8004130 <UART_AdvFeatureConfig+0xb4>)
 80040ac:	684a      	ldr	r2, [r1, #4]
 80040ae:	4022      	ands	r2, r4
 80040b0:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80040b2:	4322      	orrs	r2, r4
 80040b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040b6:	071a      	lsls	r2, r3, #28
 80040b8:	d506      	bpl.n	80040c8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040ba:	6801      	ldr	r1, [r0, #0]
 80040bc:	4c1d      	ldr	r4, [pc, #116]	@ (8004134 <UART_AdvFeatureConfig+0xb8>)
 80040be:	684a      	ldr	r2, [r1, #4]
 80040c0:	4022      	ands	r2, r4
 80040c2:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80040c4:	4322      	orrs	r2, r4
 80040c6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040c8:	06da      	lsls	r2, r3, #27
 80040ca:	d506      	bpl.n	80040da <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040cc:	6801      	ldr	r1, [r0, #0]
 80040ce:	4c1a      	ldr	r4, [pc, #104]	@ (8004138 <UART_AdvFeatureConfig+0xbc>)
 80040d0:	688a      	ldr	r2, [r1, #8]
 80040d2:	4022      	ands	r2, r4
 80040d4:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80040d6:	4322      	orrs	r2, r4
 80040d8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040da:	069a      	lsls	r2, r3, #26
 80040dc:	d506      	bpl.n	80040ec <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040de:	6801      	ldr	r1, [r0, #0]
 80040e0:	4c16      	ldr	r4, [pc, #88]	@ (800413c <UART_AdvFeatureConfig+0xc0>)
 80040e2:	688a      	ldr	r2, [r1, #8]
 80040e4:	4022      	ands	r2, r4
 80040e6:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80040e8:	4322      	orrs	r2, r4
 80040ea:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040ec:	065a      	lsls	r2, r3, #25
 80040ee:	d510      	bpl.n	8004112 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040f0:	6801      	ldr	r1, [r0, #0]
 80040f2:	4d13      	ldr	r5, [pc, #76]	@ (8004140 <UART_AdvFeatureConfig+0xc4>)
 80040f4:	684a      	ldr	r2, [r1, #4]
 80040f6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80040f8:	402a      	ands	r2, r5
 80040fa:	4322      	orrs	r2, r4
 80040fc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040fe:	2280      	movs	r2, #128	@ 0x80
 8004100:	0352      	lsls	r2, r2, #13
 8004102:	4294      	cmp	r4, r2
 8004104:	d105      	bne.n	8004112 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004106:	684a      	ldr	r2, [r1, #4]
 8004108:	4c0e      	ldr	r4, [pc, #56]	@ (8004144 <UART_AdvFeatureConfig+0xc8>)
 800410a:	4022      	ands	r2, r4
 800410c:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800410e:	4322      	orrs	r2, r4
 8004110:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	d506      	bpl.n	8004124 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004116:	6802      	ldr	r2, [r0, #0]
 8004118:	490b      	ldr	r1, [pc, #44]	@ (8004148 <UART_AdvFeatureConfig+0xcc>)
 800411a:	6853      	ldr	r3, [r2, #4]
 800411c:	400b      	ands	r3, r1
 800411e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004120:	430b      	orrs	r3, r1
 8004122:	6053      	str	r3, [r2, #4]
}
 8004124:	bd30      	pop	{r4, r5, pc}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	fffdffff 	.word	0xfffdffff
 800412c:	fffeffff 	.word	0xfffeffff
 8004130:	fffbffff 	.word	0xfffbffff
 8004134:	ffff7fff 	.word	0xffff7fff
 8004138:	ffffefff 	.word	0xffffefff
 800413c:	ffffdfff 	.word	0xffffdfff
 8004140:	ffefffff 	.word	0xffefffff
 8004144:	ff9fffff 	.word	0xff9fffff
 8004148:	fff7ffff 	.word	0xfff7ffff

0800414c <UART_WaitOnFlagUntilTimeout>:
{
 800414c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800414e:	0004      	movs	r4, r0
 8004150:	000d      	movs	r5, r1
 8004152:	0017      	movs	r7, r2
 8004154:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004156:	6822      	ldr	r2, [r4, #0]
 8004158:	69d3      	ldr	r3, [r2, #28]
 800415a:	402b      	ands	r3, r5
 800415c:	1b5b      	subs	r3, r3, r5
 800415e:	4259      	negs	r1, r3
 8004160:	414b      	adcs	r3, r1
 8004162:	42bb      	cmp	r3, r7
 8004164:	d001      	beq.n	800416a <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8004166:	2000      	movs	r0, #0
 8004168:	e020      	b.n	80041ac <UART_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800416a:	9b08      	ldr	r3, [sp, #32]
 800416c:	3301      	adds	r3, #1
 800416e:	d0f3      	beq.n	8004158 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004170:	f7fd f8ba 	bl	80012e8 <HAL_GetTick>
 8004174:	9b00      	ldr	r3, [sp, #0]
 8004176:	1ac0      	subs	r0, r0, r3
 8004178:	9b08      	ldr	r3, [sp, #32]
 800417a:	4298      	cmp	r0, r3
 800417c:	d827      	bhi.n	80041ce <UART_WaitOnFlagUntilTimeout+0x82>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d025      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0x82>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	0752      	lsls	r2, r2, #29
 8004188:	d5e5      	bpl.n	8004156 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	2608      	movs	r6, #8
 800418e:	0011      	movs	r1, r2
 8004190:	4031      	ands	r1, r6
 8004192:	9101      	str	r1, [sp, #4]
 8004194:	4232      	tst	r2, r6
 8004196:	d00a      	beq.n	80041ae <UART_WaitOnFlagUntilTimeout+0x62>
           UART_EndRxTransfer(huart);
 8004198:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800419a:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 800419c:	f7ff fb3c 	bl	8003818 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041a0:	19a3      	adds	r3, r4, r6
 80041a2:	67de      	str	r6, [r3, #124]	@ 0x7c
           __HAL_UNLOCK(huart);
 80041a4:	2300      	movs	r3, #0
           return HAL_ERROR;
 80041a6:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 80041a8:	3478      	adds	r4, #120	@ 0x78
 80041aa:	7023      	strb	r3, [r4, #0]
}
 80041ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041ae:	2280      	movs	r2, #128	@ 0x80
 80041b0:	69d9      	ldr	r1, [r3, #28]
 80041b2:	0112      	lsls	r2, r2, #4
 80041b4:	4211      	tst	r1, r2
 80041b6:	d0ce      	beq.n	8004156 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041b8:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80041ba:	0020      	movs	r0, r4
 80041bc:	f7ff fb2c 	bl	8003818 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041c0:	0023      	movs	r3, r4
 80041c2:	2220      	movs	r2, #32
 80041c4:	3308      	adds	r3, #8
 80041c6:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 80041c8:	9b01      	ldr	r3, [sp, #4]
 80041ca:	3478      	adds	r4, #120	@ 0x78
 80041cc:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80041ce:	2003      	movs	r0, #3
 80041d0:	e7ec      	b.n	80041ac <UART_WaitOnFlagUntilTimeout+0x60>
	...

080041d4 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d4:	0003      	movs	r3, r0
{
 80041d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d8:	2500      	movs	r5, #0
{
 80041da:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041dc:	3308      	adds	r3, #8
 80041de:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 80041e0:	f7fd f882 	bl	80012e8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041e4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80041e6:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	071b      	lsls	r3, r3, #28
 80041ec:	d51d      	bpl.n	800422a <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ee:	2180      	movs	r1, #128	@ 0x80
 80041f0:	4b26      	ldr	r3, [pc, #152]	@ (800428c <UART_CheckIdleState+0xb8>)
 80041f2:	002a      	movs	r2, r5
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	0389      	lsls	r1, r1, #14
 80041f8:	0003      	movs	r3, r0
 80041fa:	0020      	movs	r0, r4
 80041fc:	f7ff ffa6 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 8004200:	42a8      	cmp	r0, r5
 8004202:	d012      	beq.n	800422a <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004204:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004208:	2301      	movs	r3, #1
 800420a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800420e:	2080      	movs	r0, #128	@ 0x80
 8004210:	6822      	ldr	r2, [r4, #0]
 8004212:	6813      	ldr	r3, [r2, #0]
 8004214:	4383      	bics	r3, r0
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800421c:	2320      	movs	r3, #32
 800421e:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8004220:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8004222:	2300      	movs	r3, #0
 8004224:	3478      	adds	r4, #120	@ 0x78
 8004226:	7023      	strb	r3, [r4, #0]
}
 8004228:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800422a:	0025      	movs	r5, r4
 800422c:	cd08      	ldmia	r5!, {r3}
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	075b      	lsls	r3, r3, #29
 8004232:	d523      	bpl.n	800427c <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004234:	2180      	movs	r1, #128	@ 0x80
 8004236:	4b15      	ldr	r3, [pc, #84]	@ (800428c <UART_CheckIdleState+0xb8>)
 8004238:	2200      	movs	r2, #0
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	0020      	movs	r0, r4
 800423e:	0033      	movs	r3, r6
 8004240:	03c9      	lsls	r1, r1, #15
 8004242:	f7ff ff83 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 8004246:	2800      	cmp	r0, #0
 8004248:	d018      	beq.n	800427c <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800424a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424e:	2201      	movs	r2, #1
 8004250:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004254:	6821      	ldr	r1, [r4, #0]
 8004256:	4e0e      	ldr	r6, [pc, #56]	@ (8004290 <UART_CheckIdleState+0xbc>)
 8004258:	680b      	ldr	r3, [r1, #0]
 800425a:	4033      	ands	r3, r6
 800425c:	600b      	str	r3, [r1, #0]
 800425e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004262:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004266:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426a:	6821      	ldr	r1, [r4, #0]
 800426c:	688b      	ldr	r3, [r1, #8]
 800426e:	4393      	bics	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
 8004272:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004276:	2320      	movs	r3, #32
 8004278:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800427a:	e7d1      	b.n	8004220 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 800427c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004280:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004282:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004284:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004286:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8004288:	e7cb      	b.n	8004222 <UART_CheckIdleState+0x4e>
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	01ffffff 	.word	0x01ffffff
 8004290:	fffffedf 	.word	0xfffffedf

08004294 <HAL_UART_Init>:
{
 8004294:	b510      	push	{r4, lr}
 8004296:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004298:	d101      	bne.n	800429e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800429a:	2001      	movs	r0, #1
}
 800429c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800429e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d104      	bne.n	80042ae <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80042a4:	0002      	movs	r2, r0
 80042a6:	3278      	adds	r2, #120	@ 0x78
 80042a8:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80042aa:	f7fd f87b 	bl	80013a4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80042ae:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80042b0:	2101      	movs	r1, #1
 80042b2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80042b4:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80042b6:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042b8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80042ba:	438b      	bics	r3, r1
 80042bc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042be:	f7ff fdd9 	bl	8003e74 <UART_SetConfig>
 80042c2:	2801      	cmp	r0, #1
 80042c4:	d0e9      	beq.n	800429a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80042cc:	0020      	movs	r0, r4
 80042ce:	f7ff fed5 	bl	800407c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	4907      	ldr	r1, [pc, #28]	@ (80042f4 <HAL_UART_Init+0x60>)
 80042d6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80042d8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042da:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042dc:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	438a      	bics	r2, r1
 80042e4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80042e6:	2201      	movs	r2, #1
 80042e8:	6819      	ldr	r1, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80042ee:	f7ff ff71 	bl	80041d4 <UART_CheckIdleState>
 80042f2:	e7d3      	b.n	800429c <HAL_UART_Init+0x8>
 80042f4:	ffffb7ff 	.word	0xffffb7ff

080042f8 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 80042f8:	0003      	movs	r3, r0
 80042fa:	3358      	adds	r3, #88	@ 0x58
{
 80042fc:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 80042fe:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004300:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8004302:	805a      	strh	r2, [r3, #2]
  UART_MASK_COMPUTATION(huart);
 8004304:	2180      	movs	r1, #128	@ 0x80
  huart->RxISR       = NULL;
 8004306:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 8004308:	6882      	ldr	r2, [r0, #8]
  huart->RxISR       = NULL;
 800430a:	6683      	str	r3, [r0, #104]	@ 0x68
  UART_MASK_COMPUTATION(huart);
 800430c:	0149      	lsls	r1, r1, #5
 800430e:	428a      	cmp	r2, r1
 8004310:	d136      	bne.n	8004380 <UART_Start_Receive_IT+0x88>
 8004312:	6903      	ldr	r3, [r0, #16]
 8004314:	425a      	negs	r2, r3
 8004316:	4153      	adcs	r3, r2
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	33ff      	adds	r3, #255	@ 0xff
 800431c:	0002      	movs	r2, r0
 800431e:	325c      	adds	r2, #92	@ 0x5c
 8004320:	8013      	strh	r3, [r2, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004322:	0003      	movs	r3, r0
 8004324:	2200      	movs	r2, #0
 8004326:	3308      	adds	r3, #8
 8004328:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800432a:	1d03      	adds	r3, r0, #4
 800432c:	3222      	adds	r2, #34	@ 0x22
 800432e:	67da      	str	r2, [r3, #124]	@ 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004330:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004334:	2301      	movs	r3, #1
 8004336:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433a:	6802      	ldr	r2, [r0, #0]
 800433c:	6894      	ldr	r4, [r2, #8]
 800433e:	4323      	orrs	r3, r4
 8004340:	6093      	str	r3, [r2, #8]
 8004342:	f381 8810 	msr	PRIMASK, r1
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004346:	2180      	movs	r1, #128	@ 0x80
 8004348:	6884      	ldr	r4, [r0, #8]
 800434a:	6902      	ldr	r2, [r0, #16]
    huart->RxISR = UART_RxISR_8BIT;
 800434c:	4b19      	ldr	r3, [pc, #100]	@ (80043b4 <UART_Start_Receive_IT+0xbc>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800434e:	0149      	lsls	r1, r1, #5
 8004350:	428c      	cmp	r4, r1
 8004352:	d103      	bne.n	800435c <UART_Start_Receive_IT+0x64>
    huart->RxISR = UART_RxISR_16BIT;
 8004354:	4b18      	ldr	r3, [pc, #96]	@ (80043b8 <UART_Start_Receive_IT+0xc0>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004356:	2a00      	cmp	r2, #0
 8004358:	d000      	beq.n	800435c <UART_Start_Receive_IT+0x64>
    huart->RxISR = UART_RxISR_8BIT;
 800435a:	4b16      	ldr	r3, [pc, #88]	@ (80043b4 <UART_Start_Receive_IT+0xbc>)
 800435c:	6683      	str	r3, [r0, #104]	@ 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 800435e:	2301      	movs	r3, #1
 8004360:	2a00      	cmp	r2, #0
 8004362:	d01f      	beq.n	80043a4 <UART_Start_Receive_IT+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004364:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004368:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800436c:	6802      	ldr	r2, [r0, #0]
 800436e:	3320      	adds	r3, #32
 8004370:	6810      	ldr	r0, [r2, #0]
 8004372:	33ff      	adds	r3, #255	@ 0xff
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004374:	4303      	orrs	r3, r0
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	f381 8810 	msr	PRIMASK, r1
}
 800437c:	2000      	movs	r0, #0
 800437e:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8004380:	2a00      	cmp	r2, #0
 8004382:	d105      	bne.n	8004390 <UART_Start_Receive_IT+0x98>
 8004384:	6902      	ldr	r2, [r0, #16]
 8004386:	23ff      	movs	r3, #255	@ 0xff
 8004388:	2a00      	cmp	r2, #0
 800438a:	d0c7      	beq.n	800431c <UART_Start_Receive_IT+0x24>
 800438c:	3b80      	subs	r3, #128	@ 0x80
 800438e:	e7c5      	b.n	800431c <UART_Start_Receive_IT+0x24>
 8004390:	2180      	movs	r1, #128	@ 0x80
 8004392:	0549      	lsls	r1, r1, #21
 8004394:	428a      	cmp	r2, r1
 8004396:	d1c1      	bne.n	800431c <UART_Start_Receive_IT+0x24>
 8004398:	6902      	ldr	r2, [r0, #16]
 800439a:	237f      	movs	r3, #127	@ 0x7f
 800439c:	2a00      	cmp	r2, #0
 800439e:	d0bd      	beq.n	800431c <UART_Start_Receive_IT+0x24>
 80043a0:	3b40      	subs	r3, #64	@ 0x40
 80043a2:	e7bb      	b.n	800431c <UART_Start_Receive_IT+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a8:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80043ac:	6802      	ldr	r2, [r0, #0]
 80043ae:	2320      	movs	r3, #32
 80043b0:	6810      	ldr	r0, [r2, #0]
 80043b2:	e7df      	b.n	8004374 <UART_Start_Receive_IT+0x7c>
 80043b4:	08003cb9 	.word	0x08003cb9
 80043b8:	08003d99 	.word	0x08003d99

080043bc <HAL_UART_Receive_IT>:
{
 80043bc:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80043be:	3004      	adds	r0, #4
{
 80043c0:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80043c2:	6fc4      	ldr	r4, [r0, #124]	@ 0x7c
    return HAL_BUSY;
 80043c4:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80043c6:	2c20      	cmp	r4, #32
 80043c8:	d128      	bne.n	800441c <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 80043ca:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80043cc:	2900      	cmp	r1, #0
 80043ce:	d025      	beq.n	800441c <HAL_UART_Receive_IT+0x60>
 80043d0:	2a00      	cmp	r2, #0
 80043d2:	d023      	beq.n	800441c <HAL_UART_Receive_IT+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d4:	2080      	movs	r0, #128	@ 0x80
 80043d6:	689c      	ldr	r4, [r3, #8]
 80043d8:	0140      	lsls	r0, r0, #5
 80043da:	4284      	cmp	r4, r0
 80043dc:	d105      	bne.n	80043ea <HAL_UART_Receive_IT+0x2e>
 80043de:	6918      	ldr	r0, [r3, #16]
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d102      	bne.n	80043ea <HAL_UART_Receive_IT+0x2e>
      return HAL_ERROR;
 80043e4:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 80043e6:	4201      	tst	r1, r0
 80043e8:	d118      	bne.n	800441c <HAL_UART_Receive_IT+0x60>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ea:	2000      	movs	r0, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043ec:	4c0c      	ldr	r4, [pc, #48]	@ (8004420 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ee:	6618      	str	r0, [r3, #96]	@ 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	42a0      	cmp	r0, r4
 80043f4:	d00f      	beq.n	8004416 <HAL_UART_Receive_IT+0x5a>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043f6:	6840      	ldr	r0, [r0, #4]
 80043f8:	0200      	lsls	r0, r0, #8
 80043fa:	d50c      	bpl.n	8004416 <HAL_UART_Receive_IT+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043fc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004400:	2001      	movs	r0, #1
 8004402:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004406:	2080      	movs	r0, #128	@ 0x80
 8004408:	681c      	ldr	r4, [r3, #0]
 800440a:	04c0      	lsls	r0, r0, #19
 800440c:	6826      	ldr	r6, [r4, #0]
 800440e:	4330      	orrs	r0, r6
 8004410:	6020      	str	r0, [r4, #0]
 8004412:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004416:	0018      	movs	r0, r3
 8004418:	f7ff ff6e 	bl	80042f8 <UART_Start_Receive_IT>
}
 800441c:	bd70      	pop	{r4, r5, r6, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	40004800 	.word	0x40004800

08004424 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004424:	4770      	bx	lr
	...

08004428 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8004428:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800442a:	0005      	movs	r5, r0
{
 800442c:	b085      	sub	sp, #20
 800442e:	9102      	str	r1, [sp, #8]
 8004430:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(huart);
 8004432:	3578      	adds	r5, #120	@ 0x78
 8004434:	782b      	ldrb	r3, [r5, #0]
{
 8004436:	0004      	movs	r4, r0
 8004438:	000f      	movs	r7, r1
  __HAL_LOCK(huart);
 800443a:	2002      	movs	r0, #2
{
 800443c:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 800443e:	2b01      	cmp	r3, #1
 8004440:	d030      	beq.n	80044a4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>

  huart->gState = HAL_UART_STATE_BUSY;
 8004442:	2324      	movs	r3, #36	@ 0x24
  __HAL_LOCK(huart);
 8004444:	3801      	subs	r0, #1
 8004446:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004448:	67e3      	str	r3, [r4, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	6819      	ldr	r1, [r3, #0]
 800444e:	4381      	bics	r1, r0
 8004450:	6019      	str	r1, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8004452:	6899      	ldr	r1, [r3, #8]
 8004454:	4815      	ldr	r0, [pc, #84]	@ (80044ac <HAL_UARTEx_StopModeWakeUpSourceConfig+0x84>)
 8004456:	4001      	ands	r1, r0
 8004458:	4339      	orrs	r1, r7
 800445a:	6099      	str	r1, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800445c:	2f00      	cmp	r7, #0
 800445e:	d10c      	bne.n	800447a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x52>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8004460:	2010      	movs	r0, #16
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	79b1      	ldrb	r1, [r6, #6]
 8004466:	4382      	bics	r2, r0
 8004468:	88b0      	ldrh	r0, [r6, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800446a:	0609      	lsls	r1, r1, #24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800446c:	4302      	orrs	r2, r0
 800446e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	0212      	lsls	r2, r2, #8
 8004474:	0a12      	lsrs	r2, r2, #8
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 800447a:	2201      	movs	r2, #1
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004482:	f7fc ff31 	bl	80012e8 <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004486:	2180      	movs	r1, #128	@ 0x80
 8004488:	4a09      	ldr	r2, [pc, #36]	@ (80044b0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x88>)
  tickstart = HAL_GetTick();
 800448a:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800448c:	9200      	str	r2, [sp, #0]
 800448e:	0020      	movs	r0, r4
 8004490:	2200      	movs	r2, #0
 8004492:	03c9      	lsls	r1, r1, #15
 8004494:	f7ff fe5a 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 8004498:	2800      	cmp	r0, #0
 800449a:	d105      	bne.n	80044a8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x80>
    huart->gState = HAL_UART_STATE_READY;
 800449c:	2320      	movs	r3, #32
 800449e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UNLOCK(huart);
 80044a0:	2300      	movs	r3, #0
 80044a2:	702b      	strb	r3, [r5, #0]
}
 80044a4:	b005      	add	sp, #20
 80044a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_TIMEOUT;
 80044a8:	2003      	movs	r0, #3
 80044aa:	e7f9      	b.n	80044a0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x78>
 80044ac:	ffcfffff 	.word	0xffcfffff
 80044b0:	01ffffff 	.word	0x01ffffff

080044b4 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80044b4:	0002      	movs	r2, r0
{
 80044b6:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 80044b8:	3278      	adds	r2, #120	@ 0x78
 80044ba:	7811      	ldrb	r1, [r2, #0]
{
 80044bc:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 80044be:	2002      	movs	r0, #2
 80044c0:	2901      	cmp	r1, #1
 80044c2:	d00e      	beq.n	80044e2 <HAL_UARTEx_EnableStopMode+0x2e>
 80044c4:	2101      	movs	r1, #1
 80044c6:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044c8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044cc:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80044d0:	6819      	ldr	r1, [r3, #0]
 80044d2:	2302      	movs	r3, #2
 80044d4:	680c      	ldr	r4, [r1, #0]
 80044d6:	4323      	orrs	r3, r4
 80044d8:	600b      	str	r3, [r1, #0]
 80044da:	f380 8810 	msr	PRIMASK, r0
  __HAL_UNLOCK(huart);
 80044de:	2000      	movs	r0, #0
 80044e0:	7010      	strb	r0, [r2, #0]
}
 80044e2:	bd10      	pop	{r4, pc}

080044e4 <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 80044e4:	4b01      	ldr	r3, [pc, #4]	@ (80044ec <SX1276GetStatus+0x8>)
 80044e6:	7918      	ldrb	r0, [r3, #4]
}
 80044e8:	4770      	bx	lr
 80044ea:	46c0      	nop			@ (mov r8, r8)
 80044ec:	20000464 	.word	0x20000464

080044f0 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80044f0:	4a09      	ldr	r2, [pc, #36]	@ (8004518 <GetFskBandwidthRegValue+0x28>)
{
 80044f2:	2300      	movs	r3, #0
 80044f4:	0011      	movs	r1, r2
 80044f6:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80044f8:	6814      	ldr	r4, [r2, #0]
 80044fa:	4284      	cmp	r4, r0
 80044fc:	d802      	bhi.n	8004504 <GetFskBandwidthRegValue+0x14>
 80044fe:	6894      	ldr	r4, [r2, #8]
 8004500:	4284      	cmp	r4, r0
 8004502:	d804      	bhi.n	800450e <GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8004504:	3301      	adds	r3, #1
 8004506:	3208      	adds	r2, #8
 8004508:	2b15      	cmp	r3, #21
 800450a:	d1f5      	bne.n	80044f8 <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 800450c:	e7fe      	b.n	800450c <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	18c9      	adds	r1, r1, r3
 8004512:	7908      	ldrb	r0, [r1, #4]
}
 8004514:	bd10      	pop	{r4, pc}
 8004516:	46c0      	nop			@ (mov r8, r8)
 8004518:	0800669c 	.word	0x0800669c

0800451c <SX1276GetTimeOnAir>:
{
 800451c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800451e:	000d      	movs	r5, r1
 8004520:	0019      	movs	r1, r3
 8004522:	ab08      	add	r3, sp, #32
 8004524:	881e      	ldrh	r6, [r3, #0]
 8004526:	ab09      	add	r3, sp, #36	@ 0x24
 8004528:	781f      	ldrb	r7, [r3, #0]
 800452a:	ab0a      	add	r3, sp, #40	@ 0x28
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	0014      	movs	r4, r2
 8004530:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004532:	469c      	mov	ip, r3
 8004534:	7812      	ldrb	r2, [r2, #0]
    switch( modem )
 8004536:	2800      	cmp	r0, #0
 8004538:	d009      	beq.n	800454e <SX1276GetTimeOnAir+0x32>
 800453a:	2801      	cmp	r0, #1
 800453c:	d014      	beq.n	8004568 <SX1276GetTimeOnAir+0x4c>
 800453e:	2401      	movs	r4, #1
 8004540:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 8004542:	1900      	adds	r0, r0, r4
 8004544:	0021      	movs	r1, r4
 8004546:	3801      	subs	r0, #1
 8004548:	f7fb fdf0 	bl	800012c <__udivsi3>
}
 800454c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                                                 uint8_t payloadLen, bool crcOn )
{
    const uint8_t syncWordLength = 3;

    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
 800454e:	2101      	movs	r1, #1
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8004550:	20fa      	movs	r0, #250	@ 0xfa
           ( ( fixLen == false ) ? 8 : 0 ) +
 8004552:	4079      	eors	r1, r7
    return ( preambleLen << 3 ) +
 8004554:	1871      	adds	r1, r6, r1
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 8004556:	0052      	lsls	r2, r2, #1
    return ( preambleLen << 3 ) +
 8004558:	00c9      	lsls	r1, r1, #3
               ( 0 ) + // Address filter size
 800455a:	4462      	add	r2, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 800455c:	3118      	adds	r1, #24
               ) << 3 
 800455e:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 8004560:	188a      	adds	r2, r1, r2
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8004562:	0080      	lsls	r0, r0, #2
 8004564:	4350      	muls	r0, r2
        break;
 8004566:	e7ec      	b.n	8004542 <SX1276GetTimeOnAir+0x26>
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 8004568:	1d0b      	adds	r3, r1, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800456a:	1f61      	subs	r1, r4, #5
    int32_t crDenom           = coderate + 4;
 800456c:	9300      	str	r3, [sp, #0]
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800456e:	2901      	cmp	r1, #1
 8004570:	d804      	bhi.n	800457c <SX1276GetTimeOnAir+0x60>
    {
        if( preambleLen < 12 )
 8004572:	1c31      	adds	r1, r6, #0
 8004574:	2e0c      	cmp	r6, #12
 8004576:	d200      	bcs.n	800457a <SX1276GetTimeOnAir+0x5e>
 8004578:	210c      	movs	r1, #12
 800457a:	b28e      	uxth	r6, r1
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800457c:	2d00      	cmp	r5, #0
 800457e:	d138      	bne.n	80045f2 <SX1276GetTimeOnAir+0xd6>
 8004580:	0021      	movs	r1, r4
 8004582:	2001      	movs	r0, #1
 8004584:	002b      	movs	r3, r5
 8004586:	390b      	subs	r1, #11
 8004588:	4288      	cmp	r0, r1
 800458a:	416b      	adcs	r3, r5
 800458c:	0018      	movs	r0, r3
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800458e:	b2c0      	uxtb	r0, r0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004590:	4663      	mov	r3, ip
                            ( crcOn ? 16 : 0 ) -
 8004592:	0112      	lsls	r2, r2, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	189a      	adds	r2, r3, r2
                            ( 4 * datarate ) +
 8004598:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 800459a:	1a53      	subs	r3, r2, r1
                            ( fixLen ? 0 : 20 );
 800459c:	003a      	movs	r2, r7
 800459e:	4257      	negs	r7, r2
 80045a0:	4157      	adcs	r7, r2
                            ( crcOn ? 16 : 0 ) -
 80045a2:	9301      	str	r3, [sp, #4]
                            ( fixLen ? 0 : 20 );
 80045a4:	2314      	movs	r3, #20
 80045a6:	427f      	negs	r7, r7
                            ( 4 * datarate ) +
 80045a8:	9a01      	ldr	r2, [sp, #4]
                            ( fixLen ? 0 : 20 );
 80045aa:	403b      	ands	r3, r7
                            ( 4 * datarate ) +
 80045ac:	18d3      	adds	r3, r2, r3
    {
        ceilNumerator += 8;

        if( lowDatareOptimize == true )
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80045ae:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 80045b0:	2c06      	cmp	r4, #6
 80045b2:	d903      	bls.n	80045bc <SX1276GetTimeOnAir+0xa0>
        ceilNumerator += 8;
 80045b4:	3308      	adds	r3, #8
        if( lowDatareOptimize == true )
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d000      	beq.n	80045bc <SX1276GetTimeOnAir+0xa0>
            ceilDenominator = 4 * ( datarate - 2 );
 80045ba:	00b9      	lsls	r1, r7, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 80045bc:	43da      	mvns	r2, r3
 80045be:	17d2      	asrs	r2, r2, #31
 80045c0:	4013      	ands	r3, r2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80045c2:	1858      	adds	r0, r3, r1
 80045c4:	3801      	subs	r0, #1
 80045c6:	f7fb fe3b 	bl	8000240 <__divsi3>
 80045ca:	9b00      	ldr	r3, [sp, #0]
 80045cc:	4343      	muls	r3, r0
 80045ce:	1998      	adds	r0, r3, r6

    if( datarate <= 6 )
    {
        intermediate += 2;
 80045d0:	0003      	movs	r3, r0
 80045d2:	330e      	adds	r3, #14
    if( datarate <= 6 )
 80045d4:	2c06      	cmp	r4, #6
 80045d6:	d900      	bls.n	80045da <SX1276GetTimeOnAir+0xbe>
    int32_t intermediate =
 80045d8:	3b02      	subs	r3, #2
    switch( bw )
 80045da:	2d02      	cmp	r5, #2
 80045dc:	d811      	bhi.n	8004602 <SX1276GetTimeOnAir+0xe6>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80045de:	009b      	lsls	r3, r3, #2
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 80045e0:	20fa      	movs	r0, #250	@ 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80045e2:	3301      	adds	r3, #1
 80045e4:	40bb      	lsls	r3, r7
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 80045e6:	0080      	lsls	r0, r0, #2
 80045e8:	4358      	muls	r0, r3
 80045ea:	4b06      	ldr	r3, [pc, #24]	@ (8004604 <SX1276GetTimeOnAir+0xe8>)
 80045ec:	00ad      	lsls	r5, r5, #2
 80045ee:	58ec      	ldr	r4, [r5, r3]
 80045f0:	e7a7      	b.n	8004542 <SX1276GetTimeOnAir+0x26>
    bool    lowDatareOptimize = false;
 80045f2:	2000      	movs	r0, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80045f4:	2d01      	cmp	r5, #1
 80045f6:	d1cb      	bne.n	8004590 <SX1276GetTimeOnAir+0x74>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80045f8:	0020      	movs	r0, r4
 80045fa:	380c      	subs	r0, #12
 80045fc:	4241      	negs	r1, r0
 80045fe:	4148      	adcs	r0, r1
 8004600:	e7c5      	b.n	800458e <SX1276GetTimeOnAir+0x72>
    return ( numerator + denominator - 1 ) / denominator;
 8004602:	deff      	udf	#255	@ 0xff
 8004604:	08006660 	.word	0x08006660

08004608 <SX1276GetWakeupTime>:
{
 8004608:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800460a:	f7fd f8f7 	bl	80017fc <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800460e:	3002      	adds	r0, #2
}
 8004610:	bd10      	pop	{r4, pc}

08004612 <SX1276WriteBuffer>:
{
 8004612:	b570      	push	{r4, r5, r6, lr}
 8004614:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 8004616:	2000      	movs	r0, #0
{
 8004618:	000c      	movs	r4, r1
 800461a:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 800461c:	f7fd fac4 	bl	8001ba8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 8004620:	2080      	movs	r0, #128	@ 0x80
 8004622:	4330      	orrs	r0, r6
 8004624:	b280      	uxth	r0, r0
 8004626:	f7fd fab1 	bl	8001b8c <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800462a:	1965      	adds	r5, r4, r5
 800462c:	42ac      	cmp	r4, r5
 800462e:	d103      	bne.n	8004638 <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 8004630:	2001      	movs	r0, #1
 8004632:	f7fd fab9 	bl	8001ba8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 8004636:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 8004638:	7820      	ldrb	r0, [r4, #0]
 800463a:	f7fd faa7 	bl	8001b8c <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800463e:	3401      	adds	r4, #1
 8004640:	e7f4      	b.n	800462c <SX1276WriteBuffer+0x1a>

08004642 <SX1276Write>:
{
 8004642:	b507      	push	{r0, r1, r2, lr}
 8004644:	466b      	mov	r3, sp
 8004646:	71d9      	strb	r1, [r3, #7]
 8004648:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 800464a:	2201      	movs	r2, #1
 800464c:	0019      	movs	r1, r3
 800464e:	f7ff ffe0 	bl	8004612 <SX1276WriteBuffer>
}
 8004652:	bd07      	pop	{r0, r1, r2, pc}

08004654 <SX1276SetChannel>:
{
 8004654:	b570      	push	{r4, r5, r6, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8004656:	4911      	ldr	r1, [pc, #68]	@ (800469c <SX1276SetChannel+0x48>)
{
 8004658:	0005      	movs	r5, r0
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800465a:	f7fb fded 	bl	8000238 <__aeabi_uidivmod>
 800465e:	4b10      	ldr	r3, [pc, #64]	@ (80046a0 <SX1276SetChannel+0x4c>)
 8004660:	0208      	lsls	r0, r1, #8
 8004662:	18c0      	adds	r0, r0, r3
 8004664:	490d      	ldr	r1, [pc, #52]	@ (800469c <SX1276SetChannel+0x48>)
 8004666:	f7fb fd61 	bl	800012c <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800466a:	490c      	ldr	r1, [pc, #48]	@ (800469c <SX1276SetChannel+0x48>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800466c:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800466e:	0028      	movs	r0, r5
 8004670:	f7fb fd5c 	bl	800012c <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8004674:	0200      	lsls	r0, r0, #8
 8004676:	1824      	adds	r4, r4, r0
    SX1276.Settings.Channel = freq;
 8004678:	4b0a      	ldr	r3, [pc, #40]	@ (80046a4 <SX1276SetChannel+0x50>)
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800467a:	0c21      	lsrs	r1, r4, #16
 800467c:	2006      	movs	r0, #6
 800467e:	b2c9      	uxtb	r1, r1
    SX1276.Settings.Channel = freq;
 8004680:	609d      	str	r5, [r3, #8]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8004682:	f7ff ffde 	bl	8004642 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8004686:	0a21      	lsrs	r1, r4, #8
 8004688:	2007      	movs	r0, #7
 800468a:	b2c9      	uxtb	r1, r1
 800468c:	f7ff ffd9 	bl	8004642 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8004690:	2008      	movs	r0, #8
 8004692:	b2e1      	uxtb	r1, r4
 8004694:	f7ff ffd5 	bl	8004642 <SX1276Write>
}
 8004698:	bd70      	pop	{r4, r5, r6, pc}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	00003d09 	.word	0x00003d09
 80046a0:	00001e84 	.word	0x00001e84
 80046a4:	20000464 	.word	0x20000464

080046a8 <SX1276ReadBuffer>:
{
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	0005      	movs	r5, r0
    Sx_Board_ChipSelect( 0 );
 80046ac:	2000      	movs	r0, #0
{
 80046ae:	000c      	movs	r4, r1
 80046b0:	0016      	movs	r6, r2
    Sx_Board_ChipSelect( 0 );
 80046b2:	f7fd fa79 	bl	8001ba8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 80046b6:	207f      	movs	r0, #127	@ 0x7f
 80046b8:	4028      	ands	r0, r5
 80046ba:	f7fd fa67 	bl	8001b8c <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 80046be:	19a6      	adds	r6, r4, r6
 80046c0:	42b4      	cmp	r4, r6
 80046c2:	d103      	bne.n	80046cc <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 80046c4:	2001      	movs	r0, #1
 80046c6:	f7fd fa6f 	bl	8001ba8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 80046cc:	2000      	movs	r0, #0
 80046ce:	f7fd fa5d 	bl	8001b8c <CMWX1ZZABZ0XX_RADIO_SendRecv>
 80046d2:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 80046d4:	3401      	adds	r4, #1
 80046d6:	e7f3      	b.n	80046c0 <SX1276ReadBuffer+0x18>

080046d8 <SX1276Read>:
{
 80046d8:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 80046da:	466b      	mov	r3, sp
 80046dc:	1ddc      	adds	r4, r3, #7
 80046de:	2201      	movs	r2, #1
 80046e0:	0021      	movs	r1, r4
 80046e2:	f7ff ffe1 	bl	80046a8 <SX1276ReadBuffer>
    return data;
 80046e6:	7820      	ldrb	r0, [r4, #0]
}
 80046e8:	bd16      	pop	{r1, r2, r4, pc}
	...

080046ec <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void )
{
 80046ec:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80046ee:	4c2c      	ldr	r4, [pc, #176]	@ (80047a0 <SX1276OnDio2Irq+0xb4>)
 80046f0:	7925      	ldrb	r5, [r4, #4]
 80046f2:	2d01      	cmp	r5, #1
 80046f4:	d002      	beq.n	80046fc <SX1276OnDio2Irq+0x10>
 80046f6:	2d02      	cmp	r5, #2
 80046f8:	d049      	beq.n	800478e <SX1276OnDio2Irq+0xa2>
            }
            break;
        default:
            break;
    }
}
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 80046fc:	7963      	ldrb	r3, [r4, #5]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d017      	beq.n	8004732 <SX1276OnDio2Irq+0x46>
 8004702:	2b01      	cmp	r3, #1
 8004704:	d1f9      	bne.n	80046fa <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004706:	3453      	adds	r4, #83	@ 0x53
 8004708:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800470a:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f4      	beq.n	80046fa <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004710:	2012      	movs	r0, #18
 8004712:	f7ff ff96 	bl	8004642 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8004716:	4b23      	ldr	r3, [pc, #140]	@ (80047a4 <SX1276OnDio2Irq+0xb8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0ed      	beq.n	80046fa <SX1276OnDio2Irq+0xe>
 800471e:	695c      	ldr	r4, [r3, #20]
 8004720:	2c00      	cmp	r4, #0
 8004722:	d0ea      	beq.n	80046fa <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8004724:	201c      	movs	r0, #28
 8004726:	f7ff ffd7 	bl	80046d8 <SX1276Read>
 800472a:	233f      	movs	r3, #63	@ 0x3f
 800472c:	4018      	ands	r0, r3
 800472e:	47a0      	blx	r4
}
 8004730:	e7e3      	b.n	80046fa <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8004732:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8004734:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8004736:	3330      	adds	r3, #48	@ 0x30
 8004738:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800473a:	3631      	adds	r6, #49	@ 0x31
 800473c:	7833      	ldrb	r3, [r6, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1db      	bne.n	80046fa <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8004742:	0020      	movs	r0, r4
 8004744:	3068      	adds	r0, #104	@ 0x68
 8004746:	f001 fc99 	bl	800607c <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800474a:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800474c:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800474e:	f7ff ffc3 	bl	80046d8 <SX1276Read>
 8004752:	0023      	movs	r3, r4
 8004754:	0840      	lsrs	r0, r0, #1
 8004756:	3332      	adds	r3, #50	@ 0x32
 8004758:	4240      	negs	r0, r0
 800475a:	7018      	strb	r0, [r3, #0]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800475c:	201b      	movs	r0, #27
 800475e:	f7ff ffbb 	bl	80046d8 <SX1276Read>
 8004762:	0005      	movs	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8004764:	201c      	movs	r0, #28
 8004766:	f7ff ffb7 	bl	80046d8 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800476a:	022d      	lsls	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800476c:	4b0e      	ldr	r3, [pc, #56]	@ (80047a8 <SX1276OnDio2Irq+0xbc>)
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800476e:	4305      	orrs	r5, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8004770:	b2c0      	uxtb	r0, r0
 8004772:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8004774:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8004776:	436b      	muls	r3, r5
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8004778:	3080      	adds	r0, #128	@ 0x80
 800477a:	0a00      	lsrs	r0, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800477c:	18c0      	adds	r0, r0, r3
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800477e:	6360      	str	r0, [r4, #52]	@ 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8004780:	200c      	movs	r0, #12
 8004782:	f7ff ffa9 	bl	80046d8 <SX1276Read>
 8004786:	3438      	adds	r4, #56	@ 0x38
 8004788:	0940      	lsrs	r0, r0, #5
 800478a:	7020      	strb	r0, [r4, #0]
 800478c:	e7b5      	b.n	80046fa <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 800478e:	7963      	ldrb	r3, [r4, #5]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d1b2      	bne.n	80046fa <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004794:	3453      	adds	r4, #83	@ 0x53
 8004796:	7823      	ldrb	r3, [r4, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0ae      	beq.n	80046fa <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800479c:	0029      	movs	r1, r5
 800479e:	e7b7      	b.n	8004710 <SX1276OnDio2Irq+0x24>
 80047a0:	20000464 	.word	0x20000464
 80047a4:	200004e4 	.word	0x200004e4
 80047a8:	00003d09 	.word	0x00003d09

080047ac <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 80047ac:	4b05      	ldr	r3, [pc, #20]	@ (80047c4 <SX1276OnDio4Irq+0x18>)
 80047ae:	795a      	ldrb	r2, [r3, #5]
 80047b0:	2a00      	cmp	r2, #0
 80047b2:	d105      	bne.n	80047c0 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 80047b4:	3330      	adds	r3, #48	@ 0x30
 80047b6:	781a      	ldrb	r2, [r3, #0]
 80047b8:	2a00      	cmp	r2, #0
 80047ba:	d101      	bne.n	80047c0 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80047bc:	3201      	adds	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 80047c0:	4770      	bx	lr
 80047c2:	46c0      	nop			@ (mov r8, r8)
 80047c4:	20000464 	.word	0x20000464

080047c8 <SX1276OnDio3Irq>:
{
 80047c8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 80047ca:	4b12      	ldr	r3, [pc, #72]	@ (8004814 <SX1276OnDio3Irq+0x4c>)
 80047cc:	795c      	ldrb	r4, [r3, #5]
 80047ce:	2c01      	cmp	r4, #1
 80047d0:	d112      	bne.n	80047f8 <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 80047d2:	2012      	movs	r0, #18
 80047d4:	f7ff ff80 	bl	80046d8 <SX1276Read>
 80047d8:	0005      	movs	r5, r0
 80047da:	4e0f      	ldr	r6, [pc, #60]	@ (8004818 <SX1276OnDio3Irq+0x50>)
 80047dc:	4025      	ands	r5, r4
 80047de:	4220      	tst	r0, r4
 80047e0:	d00b      	beq.n	80047fa <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80047e2:	2105      	movs	r1, #5
 80047e4:	2012      	movs	r0, #18
 80047e6:	f7ff ff2c 	bl	8004642 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80047ea:	6833      	ldr	r3, [r6, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <SX1276OnDio3Irq+0x30>
 80047f0:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 80047f2:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10b      	bne.n	8004810 <SX1276OnDio3Irq+0x48>
}
 80047f8:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80047fa:	2104      	movs	r1, #4
 80047fc:	2012      	movs	r0, #18
 80047fe:	f7ff ff20 	bl	8004642 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004802:	6833      	ldr	r3, [r6, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f7      	beq.n	80047f8 <SX1276OnDio3Irq+0x30>
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f4      	beq.n	80047f8 <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 800480e:	0028      	movs	r0, r5
 8004810:	4798      	blx	r3
}
 8004812:	e7f1      	b.n	80047f8 <SX1276OnDio3Irq+0x30>
 8004814:	20000464 	.word	0x20000464
 8004818:	200004e4 	.word	0x200004e4

0800481c <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	0004      	movs	r4, r0
    else if ( opMode == RF_OPMODE_RECEIVER )
 8004820:	2805      	cmp	r0, #5
 8004822:	d111      	bne.n	8004848 <SX1276SetOpMode.part.0+0x2c>
      Sx_Board_SetXO( SET ); 
 8004824:	2001      	movs	r0, #1
 8004826:	f7fc ffeb 	bl	8001800 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 800482a:	2001      	movs	r0, #1
 800482c:	f7fd f95c 	bl	8001ae8 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8004830:	2001      	movs	r0, #1
 8004832:	f7ff ff51 	bl	80046d8 <SX1276Read>
 8004836:	2307      	movs	r3, #7
 8004838:	0001      	movs	r1, r0
 800483a:	4399      	bics	r1, r3
 800483c:	4321      	orrs	r1, r4
 800483e:	b2c9      	uxtb	r1, r1
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8004840:	2001      	movs	r0, #1
 8004842:	f7ff fefe 	bl	8004642 <SX1276Write>
}
 8004846:	bd70      	pop	{r4, r5, r6, pc}
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8004848:	2009      	movs	r0, #9
 800484a:	f7ff ff45 	bl	80046d8 <SX1276Read>
 800484e:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 8004850:	2001      	movs	r0, #1
 8004852:	f7fc ffd5 	bl	8001800 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 8004856:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8004858:	062d      	lsls	r5, r5, #24
 800485a:	d400      	bmi.n	800485e <SX1276SetOpMode.part.0+0x42>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 800485c:	2002      	movs	r0, #2
 800485e:	f7fd f943 	bl	8001ae8 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8004862:	2001      	movs	r0, #1
 8004864:	f7ff ff38 	bl	80046d8 <SX1276Read>
 8004868:	2307      	movs	r3, #7
 800486a:	4398      	bics	r0, r3
 800486c:	4304      	orrs	r4, r0
 800486e:	b2e1      	uxtb	r1, r4
 8004870:	e7e6      	b.n	8004840 <SX1276SetOpMode.part.0+0x24>
	...

08004874 <SX1276SetStby>:
{
 8004874:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8004876:	4c09      	ldr	r4, [pc, #36]	@ (800489c <SX1276SetStby+0x28>)
 8004878:	4809      	ldr	r0, [pc, #36]	@ (80048a0 <SX1276SetStby+0x2c>)
 800487a:	f001 fbff 	bl	800607c <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800487e:	0020      	movs	r0, r4
 8004880:	301c      	adds	r0, #28
 8004882:	f001 fbfb 	bl	800607c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8004886:	4807      	ldr	r0, [pc, #28]	@ (80048a4 <SX1276SetStby+0x30>)
 8004888:	4c07      	ldr	r4, [pc, #28]	@ (80048a8 <SX1276SetStby+0x34>)
 800488a:	f001 fbf7 	bl	800607c <UTIL_TIMER_Stop>
    if( opMode == RF_OPMODE_SLEEP )
 800488e:	2001      	movs	r0, #1
 8004890:	f7ff ffc4 	bl	800481c <SX1276SetOpMode.part.0>
    SX1276.Settings.State = RF_IDLE;
 8004894:	2300      	movs	r3, #0
 8004896:	7123      	strb	r3, [r4, #4]
}
 8004898:	bd10      	pop	{r4, pc}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	200004e4 	.word	0x200004e4
 80048a0:	200004e8 	.word	0x200004e8
 80048a4:	200004cc 	.word	0x200004cc
 80048a8:	20000464 	.word	0x20000464

080048ac <SX1276SetRx>:
{
 80048ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    TimerStop( &TxTimeoutTimer );
 80048ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004a98 <SX1276SetRx+0x1ec>)
{
 80048b0:	0007      	movs	r7, r0
    TimerStop( &TxTimeoutTimer );
 80048b2:	487a      	ldr	r0, [pc, #488]	@ (8004a9c <SX1276SetRx+0x1f0>)
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	f001 fbe1 	bl	800607c <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 80048ba:	4c79      	ldr	r4, [pc, #484]	@ (8004aa0 <SX1276SetRx+0x1f4>)
 80048bc:	7965      	ldrb	r5, [r4, #5]
 80048be:	2d00      	cmp	r5, #0
 80048c0:	d02f      	beq.n	8004922 <SX1276SetRx+0x76>
 80048c2:	2600      	movs	r6, #0
 80048c4:	2d01      	cmp	r5, #1
 80048c6:	d151      	bne.n	800496c <SX1276SetRx+0xc0>
            if( SX1276.Settings.LoRa.IqInverted == true )
 80048c8:	0023      	movs	r3, r4
 80048ca:	3355      	adds	r3, #85	@ 0x55
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2641      	movs	r6, #65	@ 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80048d0:	2033      	movs	r0, #51	@ 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d100      	bne.n	80048d8 <SX1276SetRx+0x2c>
 80048d6:	e06f      	b.n	80049b8 <SX1276SetRx+0x10c>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80048d8:	f7ff fefe 	bl	80046d8 <SX1276Read>
 80048dc:	4330      	orrs	r0, r6
 80048de:	b2c1      	uxtb	r1, r0
 80048e0:	2033      	movs	r0, #51	@ 0x33
 80048e2:	f7ff feae 	bl	8004642 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80048e6:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80048e8:	203b      	movs	r0, #59	@ 0x3b
 80048ea:	f7ff feaa 	bl	8004642 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80048ee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80048f0:	2031      	movs	r0, #49	@ 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d900      	bls.n	80048f8 <SX1276SetRx+0x4c>
 80048f6:	e0b7      	b.n	8004a68 <SX1276SetRx+0x1bc>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80048f8:	f7ff feee 	bl	80046d8 <SX1276Read>
 80048fc:	217f      	movs	r1, #127	@ 0x7f
 80048fe:	4001      	ands	r1, r0
 8004900:	2031      	movs	r0, #49	@ 0x31
 8004902:	f7ff fe9e 	bl	8004642 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8004906:	2030      	movs	r0, #48	@ 0x30
 8004908:	2100      	movs	r1, #0
 800490a:	f7ff fe9a 	bl	8004642 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800490e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004910:	2808      	cmp	r0, #8
 8004912:	d864      	bhi.n	80049de <SX1276SetRx+0x132>
 8004914:	f7fb fc00 	bl	8000118 <__gnu_thumb1_case_uqi>
 8004918:	8e87805a 	.word	0x8e87805a
 800491c:	a3a39c95 	.word	0xa3a39c95
 8004920:	a3          	.byte	0xa3
 8004921:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8004922:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004924:	2040      	movs	r0, #64	@ 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8004926:	7fde      	ldrb	r6, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004928:	f7ff fed6 	bl	80046d8 <SX1276Read>
 800492c:	2303      	movs	r3, #3
 800492e:	210c      	movs	r1, #12
 8004930:	4018      	ands	r0, r3
 8004932:	4301      	orrs	r1, r0
 8004934:	2040      	movs	r0, #64	@ 0x40
 8004936:	f7ff fe84 	bl	8004642 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800493a:	2041      	movs	r0, #65	@ 0x41
 800493c:	f7ff fecc 	bl	80046d8 <SX1276Read>
 8004940:	213f      	movs	r1, #63	@ 0x3f
 8004942:	4249      	negs	r1, r1
 8004944:	4301      	orrs	r1, r0
 8004946:	b2c9      	uxtb	r1, r1
 8004948:	2041      	movs	r0, #65	@ 0x41
 800494a:	f7ff fe7a 	bl	8004642 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800494e:	2035      	movs	r0, #53	@ 0x35
 8004950:	f7ff fec2 	bl	80046d8 <SX1276Read>
 8004954:	233f      	movs	r3, #63	@ 0x3f
 8004956:	4018      	ands	r0, r3
 8004958:	0023      	movs	r3, r4
 800495a:	333e      	adds	r3, #62	@ 0x3e
 800495c:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800495e:	211e      	movs	r1, #30
 8004960:	200d      	movs	r0, #13
 8004962:	f7ff fe6e 	bl	8004642 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004966:	8625      	strh	r5, [r4, #48]	@ 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004968:	87a5      	strh	r5, [r4, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800496a:	8765      	strh	r5, [r4, #58]	@ 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 800496c:	2280      	movs	r2, #128	@ 0x80
 800496e:	2100      	movs	r1, #0
 8004970:	484c      	ldr	r0, [pc, #304]	@ (8004aa4 <SX1276SetRx+0x1f8>)
 8004972:	0052      	lsls	r2, r2, #1
 8004974:	f001 fda6 	bl	80064c4 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8004978:	2301      	movs	r3, #1
 800497a:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 800497c:	2f00      	cmp	r7, #0
 800497e:	d008      	beq.n	8004992 <SX1276SetRx+0xe6>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8004980:	9d01      	ldr	r5, [sp, #4]
 8004982:	0039      	movs	r1, r7
 8004984:	3504      	adds	r5, #4
 8004986:	0028      	movs	r0, r5
 8004988:	f001 fc0a 	bl	80061a0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800498c:	0028      	movs	r0, r5
 800498e:	f001 fbc9 	bl	8006124 <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8004992:	7963      	ldrb	r3, [r4, #5]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d000      	beq.n	800499a <SX1276SetRx+0xee>
 8004998:	e077      	b.n	8004a8a <SX1276SetRx+0x1de>
    if( opMode == RF_OPMODE_SLEEP )
 800499a:	2005      	movs	r0, #5
 800499c:	f7ff ff3e 	bl	800481c <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 80049a0:	2e00      	cmp	r6, #0
 80049a2:	d108      	bne.n	80049b6 <SX1276SetRx+0x10a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 80049a4:	0025      	movs	r5, r4
 80049a6:	3568      	adds	r5, #104	@ 0x68
 80049a8:	0028      	movs	r0, r5
 80049aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80049ac:	f001 fbf8 	bl	80061a0 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 80049b0:	0028      	movs	r0, r5
 80049b2:	f001 fbb7 	bl	8006124 <UTIL_TIMER_Start>
}
 80049b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80049b8:	f7ff fe8e 	bl	80046d8 <SX1276Read>
 80049bc:	43b0      	bics	r0, r6
 80049be:	4305      	orrs	r5, r0
 80049c0:	b2e9      	uxtb	r1, r5
 80049c2:	2033      	movs	r0, #51	@ 0x33
 80049c4:	f7ff fe3d 	bl	8004642 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80049c8:	211d      	movs	r1, #29
 80049ca:	e78d      	b.n	80048e8 <SX1276SetRx+0x3c>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 80049cc:	202f      	movs	r0, #47	@ 0x2f
 80049ce:	2148      	movs	r1, #72	@ 0x48
 80049d0:	f7ff fe37 	bl	8004642 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 80049d4:	68a0      	ldr	r0, [r4, #8]
 80049d6:	4b34      	ldr	r3, [pc, #208]	@ (8004aa8 <SX1276SetRx+0x1fc>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80049d8:	18c0      	adds	r0, r0, r3
 80049da:	f7ff fe3b 	bl	8004654 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80049de:	0023      	movs	r3, r4
 80049e0:	3356      	adds	r3, #86	@ 0x56
 80049e2:	781e      	ldrb	r6, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80049e4:	0023      	movs	r3, r4
 80049e6:	3353      	adds	r3, #83	@ 0x53
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d044      	beq.n	8004a78 <SX1276SetRx+0x1cc>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80049ee:	211d      	movs	r1, #29
 80049f0:	2011      	movs	r0, #17
 80049f2:	f7ff fe26 	bl	8004642 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80049f6:	2040      	movs	r0, #64	@ 0x40
 80049f8:	f7ff fe6e 	bl	80046d8 <SX1276Read>
 80049fc:	2133      	movs	r1, #51	@ 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80049fe:	4001      	ands	r1, r0
 8004a00:	2040      	movs	r0, #64	@ 0x40
 8004a02:	f7ff fe1e 	bl	8004642 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8004a06:	2100      	movs	r1, #0
 8004a08:	200f      	movs	r0, #15
 8004a0a:	f7ff fe1a 	bl	8004642 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8004a0e:	2100      	movs	r1, #0
 8004a10:	200d      	movs	r0, #13
 8004a12:	f7ff fe16 	bl	8004642 <SX1276Write>
        break;
 8004a16:	e7a9      	b.n	800496c <SX1276SetRx+0xc0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004a18:	202f      	movs	r0, #47	@ 0x2f
 8004a1a:	2144      	movs	r1, #68	@ 0x44
 8004a1c:	f7ff fe11 	bl	8004642 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8004a20:	68a0      	ldr	r0, [r4, #8]
 8004a22:	4b22      	ldr	r3, [pc, #136]	@ (8004aac <SX1276SetRx+0x200>)
 8004a24:	e7d8      	b.n	80049d8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004a26:	202f      	movs	r0, #47	@ 0x2f
 8004a28:	2144      	movs	r1, #68	@ 0x44
 8004a2a:	f7ff fe0a 	bl	8004642 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8004a2e:	68a0      	ldr	r0, [r4, #8]
 8004a30:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab0 <SX1276SetRx+0x204>)
 8004a32:	e7d1      	b.n	80049d8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004a34:	202f      	movs	r0, #47	@ 0x2f
 8004a36:	2144      	movs	r1, #68	@ 0x44
 8004a38:	f7ff fe03 	bl	8004642 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8004a3c:	68a0      	ldr	r0, [r4, #8]
 8004a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab4 <SX1276SetRx+0x208>)
 8004a40:	e7ca      	b.n	80049d8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004a42:	202f      	movs	r0, #47	@ 0x2f
 8004a44:	2144      	movs	r1, #68	@ 0x44
 8004a46:	f7ff fdfc 	bl	8004642 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8004a4a:	68a0      	ldr	r0, [r4, #8]
 8004a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab8 <SX1276SetRx+0x20c>)
 8004a4e:	e7c3      	b.n	80049d8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004a50:	202f      	movs	r0, #47	@ 0x2f
 8004a52:	2144      	movs	r1, #68	@ 0x44
 8004a54:	f7ff fdf5 	bl	8004642 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8004a58:	68a0      	ldr	r0, [r4, #8]
 8004a5a:	4b18      	ldr	r3, [pc, #96]	@ (8004abc <SX1276SetRx+0x210>)
 8004a5c:	e7bc      	b.n	80049d8 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8004a5e:	2140      	movs	r1, #64	@ 0x40
 8004a60:	202f      	movs	r0, #47	@ 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8004a62:	f7ff fdee 	bl	8004642 <SX1276Write>
 8004a66:	e7ba      	b.n	80049de <SX1276SetRx+0x132>
 8004a68:	f7ff fe36 	bl	80046d8 <SX1276Read>
 8004a6c:	2180      	movs	r1, #128	@ 0x80
 8004a6e:	4249      	negs	r1, r1
 8004a70:	4301      	orrs	r1, r0
 8004a72:	b2c9      	uxtb	r1, r1
 8004a74:	2031      	movs	r0, #49	@ 0x31
 8004a76:	e7f4      	b.n	8004a62 <SX1276SetRx+0x1b6>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8004a78:	211f      	movs	r1, #31
 8004a7a:	2011      	movs	r0, #17
 8004a7c:	f7ff fde1 	bl	8004642 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8004a80:	2040      	movs	r0, #64	@ 0x40
 8004a82:	f7ff fe29 	bl	80046d8 <SX1276Read>
 8004a86:	213f      	movs	r1, #63	@ 0x3f
 8004a88:	e7b9      	b.n	80049fe <SX1276SetRx+0x152>
        if( rxContinuous == true )
 8004a8a:	2005      	movs	r0, #5
 8004a8c:	2e00      	cmp	r6, #0
 8004a8e:	d100      	bne.n	8004a92 <SX1276SetRx+0x1e6>
    if( opMode == RF_OPMODE_SLEEP )
 8004a90:	2006      	movs	r0, #6
 8004a92:	f7ff fec3 	bl	800481c <SX1276SetOpMode.part.0>
}
 8004a96:	e78e      	b.n	80049b6 <SX1276SetRx+0x10a>
 8004a98:	200004e4 	.word	0x200004e4
 8004a9c:	20000500 	.word	0x20000500
 8004aa0:	20000464 	.word	0x20000464
 8004aa4:	20000518 	.word	0x20000518
 8004aa8:	00001e82 	.word	0x00001e82
 8004aac:	000028b4 	.word	0x000028b4
 8004ab0:	00003d04 	.word	0x00003d04
 8004ab4:	0000515e 	.word	0x0000515e
 8004ab8:	00007a12 	.word	0x00007a12
 8004abc:	0000a2c6 	.word	0x0000a2c6

08004ac0 <SX1276StartCad>:
{
 8004ac0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8004ac2:	4c0b      	ldr	r4, [pc, #44]	@ (8004af0 <SX1276StartCad+0x30>)
 8004ac4:	7963      	ldrb	r3, [r4, #5]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d110      	bne.n	8004aec <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004aca:	21fa      	movs	r1, #250	@ 0xfa
 8004acc:	2011      	movs	r0, #17
 8004ace:	f7ff fdb8 	bl	8004642 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8004ad2:	2040      	movs	r0, #64	@ 0x40
 8004ad4:	f7ff fe00 	bl	80046d8 <SX1276Read>
 8004ad8:	2503      	movs	r5, #3
 8004ada:	43a8      	bics	r0, r5
 8004adc:	b2c1      	uxtb	r1, r0
 8004ade:	2040      	movs	r0, #64	@ 0x40
 8004ae0:	f7ff fdaf 	bl	8004642 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8004ae4:	2007      	movs	r0, #7
 8004ae6:	7125      	strb	r5, [r4, #4]
    if( opMode == RF_OPMODE_SLEEP )
 8004ae8:	f7ff fe98 	bl	800481c <SX1276SetOpMode.part.0>
}
 8004aec:	bd70      	pop	{r4, r5, r6, pc}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	20000464 	.word	0x20000464

08004af4 <SX1276ReadRssi>:
{
 8004af4:	b510      	push	{r4, lr}
    switch( modem )
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d004      	beq.n	8004b04 <SX1276ReadRssi+0x10>
 8004afa:	2801      	cmp	r0, #1
 8004afc:	d00a      	beq.n	8004b14 <SX1276ReadRssi+0x20>
 8004afe:	2001      	movs	r0, #1
 8004b00:	4240      	negs	r0, r0
}
 8004b02:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8004b04:	2011      	movs	r0, #17
 8004b06:	f7ff fde7 	bl	80046d8 <SX1276Read>
 8004b0a:	0840      	lsrs	r0, r0, #1
 8004b0c:	b2c0      	uxtb	r0, r0
 8004b0e:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8004b10:	b200      	sxth	r0, r0
 8004b12:	e7f6      	b.n	8004b02 <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004b14:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <SX1276ReadRssi+0x3c>)
 8004b16:	4a07      	ldr	r2, [pc, #28]	@ (8004b34 <SX1276ReadRssi+0x40>)
 8004b18:	689b      	ldr	r3, [r3, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8004b1a:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d903      	bls.n	8004b28 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8004b20:	f7ff fdda 	bl	80046d8 <SX1276Read>
 8004b24:	389d      	subs	r0, #157	@ 0x9d
 8004b26:	e7f3      	b.n	8004b10 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8004b28:	f7ff fdd6 	bl	80046d8 <SX1276Read>
 8004b2c:	38a4      	subs	r0, #164	@ 0xa4
 8004b2e:	e7ef      	b.n	8004b10 <SX1276ReadRssi+0x1c>
 8004b30:	20000464 	.word	0x20000464
 8004b34:	1f4add40 	.word	0x1f4add40

08004b38 <SX1276SetOpMode.constprop.0>:
static void SX1276SetOpMode( uint8_t opMode )
 8004b38:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	f7ff fdcc 	bl	80046d8 <SX1276Read>
 8004b40:	21f8      	movs	r1, #248	@ 0xf8
 8004b42:	4001      	ands	r1, r0
 8004b44:	2001      	movs	r0, #1
 8004b46:	f7ff fd7c 	bl	8004642 <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7fc ffcc 	bl	8001ae8 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 8004b50:	2000      	movs	r0, #0
 8004b52:	f7fc fe55 	bl	8001800 <CMWX1ZZABZ0XX_RADIO_SetXO>
}
 8004b56:	bd10      	pop	{r4, pc}

08004b58 <SX1276SetModem>:
{
 8004b58:	b510      	push	{r4, lr}
 8004b5a:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	f7ff fdbb 	bl	80046d8 <SX1276Read>
 8004b62:	b2c0      	uxtb	r0, r0
 8004b64:	4b16      	ldr	r3, [pc, #88]	@ (8004bc0 <SX1276SetModem+0x68>)
 8004b66:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 8004b68:	42a0      	cmp	r0, r4
 8004b6a:	d101      	bne.n	8004b70 <SX1276SetModem+0x18>
 8004b6c:	7158      	strb	r0, [r3, #5]
}
 8004b6e:	bd10      	pop	{r4, pc}
    SX1276.Settings.Modem = modem;
 8004b70:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 8004b72:	2c01      	cmp	r4, #1
 8004b74:	d012      	beq.n	8004b9c <SX1276SetModem+0x44>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004b76:	f7ff ffdf 	bl	8004b38 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	f7ff fdac 	bl	80046d8 <SX1276Read>
 8004b80:	217f      	movs	r1, #127	@ 0x7f
 8004b82:	4001      	ands	r1, r0
 8004b84:	2001      	movs	r0, #1
 8004b86:	f7ff fd5c 	bl	8004642 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	2040      	movs	r0, #64	@ 0x40
 8004b8e:	f7ff fd58 	bl	8004642 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8004b92:	2130      	movs	r1, #48	@ 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8004b94:	2041      	movs	r0, #65	@ 0x41
 8004b96:	f7ff fd54 	bl	8004642 <SX1276Write>
        break;
 8004b9a:	e7e8      	b.n	8004b6e <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004b9c:	f7ff ffcc 	bl	8004b38 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8004ba0:	0020      	movs	r0, r4
 8004ba2:	f7ff fd99 	bl	80046d8 <SX1276Read>
 8004ba6:	2180      	movs	r1, #128	@ 0x80
 8004ba8:	4249      	negs	r1, r1
 8004baa:	4301      	orrs	r1, r0
 8004bac:	b2c9      	uxtb	r1, r1
 8004bae:	0020      	movs	r0, r4
 8004bb0:	f7ff fd47 	bl	8004642 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	2040      	movs	r0, #64	@ 0x40
 8004bb8:	f7ff fd43 	bl	8004642 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	e7e9      	b.n	8004b94 <SX1276SetModem+0x3c>
 8004bc0:	20000464 	.word	0x20000464

08004bc4 <SX1276SetMaxPayloadLength>:
{
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	0004      	movs	r4, r0
 8004bc8:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 8004bca:	f7ff ffc5 	bl	8004b58 <SX1276SetModem>
    switch( modem )
 8004bce:	2c00      	cmp	r4, #0
 8004bd0:	d002      	beq.n	8004bd8 <SX1276SetMaxPayloadLength+0x14>
 8004bd2:	2c01      	cmp	r4, #1
 8004bd4:	d009      	beq.n	8004bea <SX1276SetMaxPayloadLength+0x26>
}
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8004bd8:	4b05      	ldr	r3, [pc, #20]	@ (8004bf0 <SX1276SetMaxPayloadLength+0x2c>)
 8004bda:	7fdb      	ldrb	r3, [r3, #31]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1fa      	bne.n	8004bd6 <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8004be0:	0029      	movs	r1, r5
 8004be2:	2032      	movs	r0, #50	@ 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004be4:	f7ff fd2d 	bl	8004642 <SX1276Write>
}
 8004be8:	e7f5      	b.n	8004bd6 <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004bea:	0029      	movs	r1, r5
 8004bec:	2023      	movs	r0, #35	@ 0x23
 8004bee:	e7f9      	b.n	8004be4 <SX1276SetMaxPayloadLength+0x20>
 8004bf0:	20000467 	.word	0x20000467

08004bf4 <SX1276SetPublicNetwork>:
{
 8004bf4:	b510      	push	{r4, lr}
 8004bf6:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	f7ff ffad 	bl	8004b58 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004bfe:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8004c00:	2134      	movs	r1, #52	@ 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004c02:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 8004c04:	2c00      	cmp	r4, #0
 8004c06:	d100      	bne.n	8004c0a <SX1276SetPublicNetwork+0x16>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8004c08:	2112      	movs	r1, #18
 8004c0a:	2039      	movs	r0, #57	@ 0x39
 8004c0c:	f7ff fd19 	bl	8004642 <SX1276Write>
}
 8004c10:	bd10      	pop	{r4, pc}
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	200004c0 	.word	0x200004c0

08004c18 <SX1276SetRxConfig>:
{
 8004c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c1a:	b08b      	sub	sp, #44	@ 0x2c
 8004c1c:	9305      	str	r3, [sp, #20]
 8004c1e:	ab10      	add	r3, sp, #64	@ 0x40
 8004c20:	cb80      	ldmia	r3!, {r7}
 8004c22:	0014      	movs	r4, r2
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	aa0a      	add	r2, sp, #40	@ 0x28
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	ab12      	add	r3, sp, #72	@ 0x48
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	0005      	movs	r5, r0
 8004c30:	9304      	str	r3, [sp, #16]
 8004c32:	ab13      	add	r3, sp, #76	@ 0x4c
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	000e      	movs	r6, r1
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	ab14      	add	r3, sp, #80	@ 0x50
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	9302      	str	r3, [sp, #8]
 8004c40:	ab15      	add	r3, sp, #84	@ 0x54
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	9303      	str	r3, [sp, #12]
 8004c46:	ab16      	add	r3, sp, #88	@ 0x58
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	9308      	str	r3, [sp, #32]
 8004c4c:	ab17      	add	r3, sp, #92	@ 0x5c
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c52:	2319      	movs	r3, #25
 8004c54:	189b      	adds	r3, r3, r2
 8004c56:	7fdb      	ldrb	r3, [r3, #31]
 8004c58:	9306      	str	r3, [sp, #24]
 8004c5a:	231d      	movs	r3, #29
 8004c5c:	189b      	adds	r3, r3, r2
 8004c5e:	7fdb      	ldrb	r3, [r3, #31]
 8004c60:	9307      	str	r3, [sp, #28]
    SX1276SetModem( modem );
 8004c62:	f7ff ff79 	bl	8004b58 <SX1276SetModem>
    switch( modem )
 8004c66:	2d00      	cmp	r5, #0
 8004c68:	d003      	beq.n	8004c72 <SX1276SetRxConfig+0x5a>
 8004c6a:	2d01      	cmp	r5, #1
 8004c6c:	d067      	beq.n	8004d3e <SX1276SetRxConfig+0x126>
}
 8004c6e:	b00b      	add	sp, #44	@ 0x2c
 8004c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8004c72:	20fa      	movs	r0, #250	@ 0xfa
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004c74:	4d9a      	ldr	r5, [pc, #616]	@ (8004ee0 <SX1276SetRxConfig+0x2c8>)
            SX1276.Settings.Fsk.FixLen = fixLen;
 8004c76:	9a01      	ldr	r2, [sp, #4]
 8004c78:	1ceb      	adds	r3, r5, #3
 8004c7a:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8004c7c:	9a02      	ldr	r2, [sp, #8]
 8004c7e:	1d2b      	adds	r3, r5, #4
 8004c80:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8004c82:	9a03      	ldr	r2, [sp, #12]
 8004c84:	1d6b      	adds	r3, r5, #5
 8004c86:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8004c88:	9a06      	ldr	r2, [sp, #24]
 8004c8a:	1dab      	adds	r3, r5, #6
 8004c8c:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8004c8e:	9a07      	ldr	r2, [sp, #28]
 8004c90:	1deb      	adds	r3, r5, #7
 8004c92:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8004c94:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8004c96:	0140      	lsls	r0, r0, #5
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8004c98:	842b      	strh	r3, [r5, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8004c9a:	9b04      	ldr	r3, [sp, #16]
 8004c9c:	0021      	movs	r1, r4
 8004c9e:	4358      	muls	r0, r3
            SX1276.Settings.Fsk.Datarate = datarate;
 8004ca0:	61ec      	str	r4, [r5, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004ca2:	616e      	str	r6, [r5, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8004ca4:	61af      	str	r7, [r5, #24]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8004ca6:	f7fb fa41 	bl	800012c <__udivsi3>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8004caa:	0021      	movs	r1, r4
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8004cac:	62e8      	str	r0, [r5, #44]	@ 0x2c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8004cae:	488d      	ldr	r0, [pc, #564]	@ (8004ee4 <SX1276SetRxConfig+0x2cc>)
 8004cb0:	f7fb fa3c 	bl	800012c <__udivsi3>
 8004cb4:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8004cb6:	0a01      	lsrs	r1, r0, #8
 8004cb8:	b2c9      	uxtb	r1, r1
 8004cba:	2002      	movs	r0, #2
 8004cbc:	f7ff fcc1 	bl	8004642 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8004cc0:	b2e1      	uxtb	r1, r4
 8004cc2:	2003      	movs	r0, #3
 8004cc4:	f7ff fcbd 	bl	8004642 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8004cc8:	0030      	movs	r0, r6
 8004cca:	f7ff fc11 	bl	80044f0 <GetFskBandwidthRegValue>
 8004cce:	0001      	movs	r1, r0
 8004cd0:	2012      	movs	r0, #18
 8004cd2:	f7ff fcb6 	bl	8004642 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8004cd6:	0038      	movs	r0, r7
 8004cd8:	f7ff fc0a 	bl	80044f0 <GetFskBandwidthRegValue>
 8004cdc:	0001      	movs	r1, r0
 8004cde:	2013      	movs	r0, #19
 8004ce0:	f7ff fcaf 	bl	8004642 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8004ce4:	9b00      	ldr	r3, [sp, #0]
 8004ce6:	2025      	movs	r0, #37	@ 0x25
 8004ce8:	0a19      	lsrs	r1, r3, #8
 8004cea:	f7ff fcaa 	bl	8004642 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8004cee:	466b      	mov	r3, sp
 8004cf0:	2026      	movs	r0, #38	@ 0x26
 8004cf2:	7819      	ldrb	r1, [r3, #0]
 8004cf4:	f7ff fca5 	bl	8004642 <SX1276Write>
            if( fixLen == 1 )
 8004cf8:	9b01      	ldr	r3, [sp, #4]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8004cfa:	9902      	ldr	r1, [sp, #8]
            if( fixLen == 1 )
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d100      	bne.n	8004d02 <SX1276SetRxConfig+0xea>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8004d00:	21ff      	movs	r1, #255	@ 0xff
 8004d02:	2032      	movs	r0, #50	@ 0x32
 8004d04:	f7ff fc9d 	bl	8004642 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8004d08:	2030      	movs	r0, #48	@ 0x30
 8004d0a:	f7ff fce5 	bl	80046d8 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004d0e:	2101      	movs	r1, #1
 8004d10:	9b01      	ldr	r3, [sp, #4]
 8004d12:	4059      	eors	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8004d14:	9b03      	ldr	r3, [sp, #12]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004d16:	01c9      	lsls	r1, r1, #7
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8004d18:	011b      	lsls	r3, r3, #4
            SX1276Write( REG_PACKETCONFIG1,
 8004d1a:	4319      	orrs	r1, r3
 8004d1c:	236f      	movs	r3, #111	@ 0x6f
 8004d1e:	4018      	ands	r0, r3
 8004d20:	4301      	orrs	r1, r0
 8004d22:	b2c9      	uxtb	r1, r1
 8004d24:	2030      	movs	r0, #48	@ 0x30
 8004d26:	f7ff fc8c 	bl	8004642 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8004d2a:	2031      	movs	r0, #49	@ 0x31
 8004d2c:	f7ff fcd4 	bl	80046d8 <SX1276Read>
 8004d30:	2140      	movs	r1, #64	@ 0x40
 8004d32:	4301      	orrs	r1, r0
 8004d34:	2031      	movs	r0, #49	@ 0x31
 8004d36:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004d38:	f7ff fc83 	bl	8004642 <SX1276Write>
}
 8004d3c:	e797      	b.n	8004c6e <SX1276SetRxConfig+0x56>
            if( bandwidth > 2 )
 8004d3e:	2e02      	cmp	r6, #2
 8004d40:	d900      	bls.n	8004d44 <SX1276SetRxConfig+0x12c>
                while( 1 );
 8004d42:	e7fe      	b.n	8004d42 <SX1276SetRxConfig+0x12a>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8004d44:	4b66      	ldr	r3, [pc, #408]	@ (8004ee0 <SX1276SetRxConfig+0x2c8>)
            SX1276.Settings.LoRa.Coderate = coderate;
 8004d46:	9905      	ldr	r1, [sp, #20]
 8004d48:	001a      	movs	r2, r3
 8004d4a:	324d      	adds	r2, #77	@ 0x4d
 8004d4c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8004d4e:	001a      	movs	r2, r3
 8004d50:	9900      	ldr	r1, [sp, #0]
 8004d52:	324e      	adds	r2, #78	@ 0x4e
 8004d54:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8004d56:	001a      	movs	r2, r3
 8004d58:	9901      	ldr	r1, [sp, #4]
 8004d5a:	3250      	adds	r2, #80	@ 0x50
 8004d5c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8004d5e:	001a      	movs	r2, r3
 8004d60:	9902      	ldr	r1, [sp, #8]
 8004d62:	3251      	adds	r2, #81	@ 0x51
 8004d64:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8004d66:	001a      	movs	r2, r3
 8004d68:	9903      	ldr	r1, [sp, #12]
 8004d6a:	3252      	adds	r2, #82	@ 0x52
 8004d6c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8004d6e:	001a      	movs	r2, r3
 8004d70:	9908      	ldr	r1, [sp, #32]
 8004d72:	3253      	adds	r2, #83	@ 0x53
 8004d74:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8004d76:	001a      	movs	r2, r3
 8004d78:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d7a:	3254      	adds	r2, #84	@ 0x54
 8004d7c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8004d7e:	001a      	movs	r2, r3
 8004d80:	9906      	ldr	r1, [sp, #24]
 8004d82:	3255      	adds	r2, #85	@ 0x55
            bandwidth += 7;
 8004d84:	1df7      	adds	r7, r6, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8004d86:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8004d88:	9a07      	ldr	r2, [sp, #28]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8004d8a:	645f      	str	r7, [r3, #68]	@ 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8004d8c:	649c      	str	r4, [r3, #72]	@ 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8004d8e:	3356      	adds	r3, #86	@ 0x56
            else if( datarate < 6 )
 8004d90:	0025      	movs	r5, r4
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8004d92:	701a      	strb	r2, [r3, #0]
            else if( datarate < 6 )
 8004d94:	2c06      	cmp	r4, #6
 8004d96:	d300      	bcc.n	8004d9a <SX1276SetRxConfig+0x182>
 8004d98:	e082      	b.n	8004ea0 <SX1276SetRxConfig+0x288>
 8004d9a:	2506      	movs	r5, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004d9c:	2f07      	cmp	r7, #7
 8004d9e:	d000      	beq.n	8004da2 <SX1276SetRxConfig+0x18a>
 8004da0:	e083      	b.n	8004eaa <SX1276SetRxConfig+0x292>
 8004da2:	002a      	movs	r2, r5
 8004da4:	2300      	movs	r3, #0
 8004da6:	2101      	movs	r1, #1
 8004da8:	3a0b      	subs	r2, #11
 8004daa:	4291      	cmp	r1, r2
 8004dac:	415b      	adcs	r3, r3
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	4a4d      	ldr	r2, [pc, #308]	@ (8004ee8 <SX1276SetRxConfig+0x2d0>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8004db2:	201d      	movs	r0, #29
 8004db4:	7013      	strb	r3, [r2, #0]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004db6:	9206      	str	r2, [sp, #24]
 8004db8:	4e49      	ldr	r6, [pc, #292]	@ (8004ee0 <SX1276SetRxConfig+0x2c8>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8004dba:	f7ff fc8d 	bl	80046d8 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8004dbe:	9b05      	ldr	r3, [sp, #20]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004dc0:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8004dc2:	0059      	lsls	r1, r3, #1
 8004dc4:	9b01      	ldr	r3, [sp, #4]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8004dc6:	012d      	lsls	r5, r5, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8004dc8:	4319      	orrs	r1, r3
 8004dca:	013b      	lsls	r3, r7, #4
 8004dcc:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004dce:	b2c9      	uxtb	r1, r1
 8004dd0:	f7ff fc37 	bl	8004642 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8004dd4:	201e      	movs	r0, #30
 8004dd6:	f7ff fc7f 	bl	80046d8 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8004dda:	9b04      	ldr	r3, [sp, #16]
 8004ddc:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8004dde:	9b03      	ldr	r3, [sp, #12]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8004de0:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8004de2:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8004de4:	4319      	orrs	r1, r3
 8004de6:	4329      	orrs	r1, r5
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8004de8:	2508      	movs	r5, #8
 8004dea:	4028      	ands	r0, r5
            SX1276Write( REG_LR_MODEMCONFIG2,
 8004dec:	4301      	orrs	r1, r0
 8004dee:	b2c9      	uxtb	r1, r1
 8004df0:	201e      	movs	r0, #30
 8004df2:	f7ff fc26 	bl	8004642 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8004df6:	2026      	movs	r0, #38	@ 0x26
 8004df8:	f7ff fc6e 	bl	80046d8 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG3,
 8004dfc:	9b06      	ldr	r3, [sp, #24]
 8004dfe:	43a8      	bics	r0, r5
 8004e00:	7819      	ldrb	r1, [r3, #0]
 8004e02:	00c9      	lsls	r1, r1, #3
 8004e04:	4301      	orrs	r1, r0
 8004e06:	b2c9      	uxtb	r1, r1
 8004e08:	2026      	movs	r0, #38	@ 0x26
 8004e0a:	f7ff fc1a 	bl	8004642 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8004e0e:	466b      	mov	r3, sp
 8004e10:	201f      	movs	r0, #31
 8004e12:	7c19      	ldrb	r1, [r3, #16]
 8004e14:	f7ff fc15 	bl	8004642 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8004e18:	9b00      	ldr	r3, [sp, #0]
 8004e1a:	2020      	movs	r0, #32
 8004e1c:	0a19      	lsrs	r1, r3, #8
 8004e1e:	f7ff fc10 	bl	8004642 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8004e22:	466b      	mov	r3, sp
 8004e24:	2021      	movs	r0, #33	@ 0x21
 8004e26:	7819      	ldrb	r1, [r3, #0]
 8004e28:	f7ff fc0b 	bl	8004642 <SX1276Write>
            if( fixLen == 1 )
 8004e2c:	9b01      	ldr	r3, [sp, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <SX1276SetRxConfig+0x222>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8004e32:	2022      	movs	r0, #34	@ 0x22
 8004e34:	9902      	ldr	r1, [sp, #8]
 8004e36:	f7ff fc04 	bl	8004642 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004e3a:	0033      	movs	r3, r6
 8004e3c:	3353      	adds	r3, #83	@ 0x53
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00f      	beq.n	8004e64 <SX1276SetRxConfig+0x24c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8004e44:	2044      	movs	r0, #68	@ 0x44
 8004e46:	f7ff fc47 	bl	80046d8 <SX1276Read>
 8004e4a:	2180      	movs	r1, #128	@ 0x80
 8004e4c:	4249      	negs	r1, r1
 8004e4e:	4301      	orrs	r1, r0
 8004e50:	b2c9      	uxtb	r1, r1
 8004e52:	2044      	movs	r0, #68	@ 0x44
 8004e54:	f7ff fbf5 	bl	8004642 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8004e58:	0033      	movs	r3, r6
 8004e5a:	3354      	adds	r3, #84	@ 0x54
 8004e5c:	2024      	movs	r0, #36	@ 0x24
 8004e5e:	7819      	ldrb	r1, [r3, #0]
 8004e60:	f7ff fbef 	bl	8004642 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8004e64:	2f09      	cmp	r7, #9
 8004e66:	d12d      	bne.n	8004ec4 <SX1276SetRxConfig+0x2ac>
 8004e68:	4b20      	ldr	r3, [pc, #128]	@ (8004eec <SX1276SetRxConfig+0x2d4>)
 8004e6a:	68b2      	ldr	r2, [r6, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8004e6c:	2102      	movs	r1, #2
 8004e6e:	2036      	movs	r0, #54	@ 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d923      	bls.n	8004ebc <SX1276SetRxConfig+0x2a4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8004e74:	f7ff fbe5 	bl	8004642 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8004e78:	2164      	movs	r1, #100	@ 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8004e7a:	203a      	movs	r0, #58	@ 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8004e7c:	f7ff fbe1 	bl	8004642 <SX1276Write>
            if( datarate == 6 )
 8004e80:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004e82:	2031      	movs	r0, #49	@ 0x31
            if( datarate == 6 )
 8004e84:	2c06      	cmp	r4, #6
 8004e86:	d820      	bhi.n	8004eca <SX1276SetRxConfig+0x2b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004e88:	f7ff fc26 	bl	80046d8 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004e8c:	2105      	movs	r1, #5
 8004e8e:	43a8      	bics	r0, r5
 8004e90:	4301      	orrs	r1, r0
 8004e92:	b2c9      	uxtb	r1, r1
 8004e94:	2031      	movs	r0, #49	@ 0x31
 8004e96:	f7ff fbd4 	bl	8004642 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004e9a:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004e9c:	2037      	movs	r0, #55	@ 0x37
 8004e9e:	e74b      	b.n	8004d38 <SX1276SetRxConfig+0x120>
 8004ea0:	2c0c      	cmp	r4, #12
 8004ea2:	d800      	bhi.n	8004ea6 <SX1276SetRxConfig+0x28e>
 8004ea4:	e77a      	b.n	8004d9c <SX1276SetRxConfig+0x184>
 8004ea6:	250c      	movs	r5, #12
 8004ea8:	e778      	b.n	8004d9c <SX1276SetRxConfig+0x184>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8004eaa:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004eac:	2f08      	cmp	r7, #8
 8004eae:	d000      	beq.n	8004eb2 <SX1276SetRxConfig+0x29a>
 8004eb0:	e77e      	b.n	8004db0 <SX1276SetRxConfig+0x198>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8004eb2:	330b      	adds	r3, #11
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	419b      	sbcs	r3, r3
 8004eb8:	425b      	negs	r3, r3
 8004eba:	e779      	b.n	8004db0 <SX1276SetRxConfig+0x198>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8004ebc:	f7ff fbc1 	bl	8004642 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8004ec0:	217f      	movs	r1, #127	@ 0x7f
 8004ec2:	e7da      	b.n	8004e7a <SX1276SetRxConfig+0x262>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8004ec4:	2103      	movs	r1, #3
 8004ec6:	2036      	movs	r0, #54	@ 0x36
 8004ec8:	e7d8      	b.n	8004e7c <SX1276SetRxConfig+0x264>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004eca:	f7ff fc05 	bl	80046d8 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004ece:	2103      	movs	r1, #3
 8004ed0:	43a8      	bics	r0, r5
 8004ed2:	4301      	orrs	r1, r0
 8004ed4:	b2c9      	uxtb	r1, r1
 8004ed6:	2031      	movs	r0, #49	@ 0x31
 8004ed8:	f7ff fbb3 	bl	8004642 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004edc:	210a      	movs	r1, #10
 8004ede:	e7dd      	b.n	8004e9c <SX1276SetRxConfig+0x284>
 8004ee0:	20000464 	.word	0x20000464
 8004ee4:	01e84800 	.word	0x01e84800
 8004ee8:	200004b0 	.word	0x200004b0
 8004eec:	1f4add40 	.word	0x1f4add40

08004ef0 <SX1276SetSleep>:
{
 8004ef0:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8004ef2:	4c0a      	ldr	r4, [pc, #40]	@ (8004f1c <SX1276SetSleep+0x2c>)
 8004ef4:	480a      	ldr	r0, [pc, #40]	@ (8004f20 <SX1276SetSleep+0x30>)
 8004ef6:	f001 f8c1 	bl	800607c <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8004efa:	0020      	movs	r0, r4
 8004efc:	301c      	adds	r0, #28
 8004efe:	f001 f8bd 	bl	800607c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8004f02:	4808      	ldr	r0, [pc, #32]	@ (8004f24 <SX1276SetSleep+0x34>)
 8004f04:	4c08      	ldr	r4, [pc, #32]	@ (8004f28 <SX1276SetSleep+0x38>)
 8004f06:	f001 f8b9 	bl	800607c <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004f0a:	f7ff fe15 	bl	8004b38 <SX1276SetOpMode.constprop.0>
    Sx_Board_SetXO( RESET );
 8004f0e:	2000      	movs	r0, #0
 8004f10:	f7fc fc76 	bl	8001800 <CMWX1ZZABZ0XX_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	7123      	strb	r3, [r4, #4]
}
 8004f18:	bd10      	pop	{r4, pc}
 8004f1a:	46c0      	nop			@ (mov r8, r8)
 8004f1c:	200004e4 	.word	0x200004e4
 8004f20:	200004e8 	.word	0x200004e8
 8004f24:	200004cc 	.word	0x200004cc
 8004f28:	20000464 	.word	0x20000464

08004f2c <SX1276IsChannelFree>:
{
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	0007      	movs	r7, r0
 8004f30:	000c      	movs	r4, r1
 8004f32:	0016      	movs	r6, r2
 8004f34:	001d      	movs	r5, r3
    SX1276SetSleep( );
 8004f36:	f7ff ffdb 	bl	8004ef0 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	f7ff fe0c 	bl	8004b58 <SX1276SetModem>
    SX1276SetChannel( freq );
 8004f40:	0038      	movs	r0, r7
 8004f42:	f7ff fb87 	bl	8004654 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8004f46:	0020      	movs	r0, r4
 8004f48:	f7ff fad2 	bl	80044f0 <GetFskBandwidthRegValue>
 8004f4c:	0004      	movs	r4, r0
 8004f4e:	0001      	movs	r1, r0
 8004f50:	2012      	movs	r0, #18
 8004f52:	f7ff fb76 	bl	8004642 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8004f56:	0021      	movs	r1, r4
 8004f58:	2013      	movs	r0, #19
 8004f5a:	f7ff fb72 	bl	8004642 <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 8004f5e:	2005      	movs	r0, #5
 8004f60:	f7ff fc5c 	bl	800481c <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 8004f64:	2001      	movs	r0, #1
 8004f66:	f7fc f9c3 	bl	80012f0 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8004f6a:	f001 f845 	bl	8005ff8 <UTIL_TIMER_GetCurrentTime>
 8004f6e:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8004f70:	0020      	movs	r0, r4
 8004f72:	f001 f84b 	bl	800600c <UTIL_TIMER_GetElapsedTime>
 8004f76:	42a8      	cmp	r0, r5
 8004f78:	d304      	bcc.n	8004f84 <SX1276IsChannelFree+0x58>
    bool status = true;
 8004f7a:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8004f7c:	f7ff ffb8 	bl	8004ef0 <SX1276SetSleep>
}
 8004f80:	0020      	movs	r0, r4
 8004f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 8004f84:	2000      	movs	r0, #0
 8004f86:	f7ff fdb5 	bl	8004af4 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8004f8a:	42b0      	cmp	r0, r6
 8004f8c:	ddf0      	ble.n	8004f70 <SX1276IsChannelFree+0x44>
            status = false;
 8004f8e:	2400      	movs	r4, #0
 8004f90:	e7f4      	b.n	8004f7c <SX1276IsChannelFree+0x50>

08004f92 <SX1276Random>:
{
 8004f92:	b570      	push	{r4, r5, r6, lr}
 8004f94:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 8004f96:	2001      	movs	r0, #1
 8004f98:	f7ff fdde 	bl	8004b58 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004f9c:	21ff      	movs	r1, #255	@ 0xff
 8004f9e:	2011      	movs	r0, #17
 8004fa0:	f7ff fb4f 	bl	8004642 <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 8004fa4:	2005      	movs	r0, #5
 8004fa6:	f7ff fc39 	bl	800481c <SX1276SetOpMode.part.0>
    uint32_t rnd = 0;
 8004faa:	0025      	movs	r5, r4
        RADIO_DELAY_MS( 1 );
 8004fac:	2601      	movs	r6, #1
 8004fae:	0030      	movs	r0, r6
 8004fb0:	f7fc f99e 	bl	80012f0 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8004fb4:	202c      	movs	r0, #44	@ 0x2c
 8004fb6:	f7ff fb8f 	bl	80046d8 <SX1276Read>
 8004fba:	4030      	ands	r0, r6
 8004fbc:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
 8004fbe:	3401      	adds	r4, #1
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8004fc0:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 8004fc2:	2c20      	cmp	r4, #32
 8004fc4:	d1f3      	bne.n	8004fae <SX1276Random+0x1c>
    SX1276SetSleep( );
 8004fc6:	f7ff ff93 	bl	8004ef0 <SX1276SetSleep>
}
 8004fca:	0028      	movs	r0, r5
 8004fcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004fd0 <SX1276SetTxConfig>:
{
 8004fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd2:	b08d      	sub	sp, #52	@ 0x34
 8004fd4:	9306      	str	r3, [sp, #24]
 8004fd6:	ab12      	add	r3, sp, #72	@ 0x48
 8004fd8:	cb40      	ldmia	r3!, {r6}
 8004fda:	9002      	str	r0, [sp, #8]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	9205      	str	r2, [sp, #20]
 8004fe0:	9307      	str	r3, [sp, #28]
 8004fe2:	ab14      	add	r3, sp, #80	@ 0x50
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	000c      	movs	r4, r1
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	ab15      	add	r3, sp, #84	@ 0x54
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	9303      	str	r3, [sp, #12]
 8004ff0:	ab16      	add	r3, sp, #88	@ 0x58
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	9304      	str	r3, [sp, #16]
 8004ff6:	ab17      	add	r3, sp, #92	@ 0x5c
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	9308      	str	r3, [sp, #32]
 8004ffc:	ab18      	add	r3, sp, #96	@ 0x60
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	930a      	str	r3, [sp, #40]	@ 0x28
 8005002:	ab19      	add	r3, sp, #100	@ 0x64
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	9309      	str	r3, [sp, #36]	@ 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8005008:	4bb6      	ldr	r3, [pc, #728]	@ (80052e4 <SX1276SetTxConfig+0x314>)
 800500a:	791d      	ldrb	r5, [r3, #4]
 800500c:	2d01      	cmp	r5, #1
 800500e:	d106      	bne.n	800501e <SX1276SetTxConfig+0x4e>
 8005010:	2800      	cmp	r0, #0
 8005012:	d104      	bne.n	800501e <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 8005014:	f7ff ff6c 	bl	8004ef0 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 8005018:	0028      	movs	r0, r5
 800501a:	f7fc f969 	bl	80012f0 <HAL_Delay>
    SX1276SetModem( modem );
 800501e:	9802      	ldr	r0, [sp, #8]
 8005020:	f7ff fd9a 	bl	8004b58 <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 8005024:	2009      	movs	r0, #9
 8005026:	f7ff fb57 	bl	80046d8 <SX1276Read>
 800502a:	900b      	str	r0, [sp, #44]	@ 0x2c
    paDac = SX1276Read( REG_PADAC );
 800502c:	204d      	movs	r0, #77	@ 0x4d
 800502e:	f7ff fb53 	bl	80046d8 <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8005032:	4bac      	ldr	r3, [pc, #688]	@ (80052e4 <SX1276SetTxConfig+0x314>)
    paDac = SX1276Read( REG_PADAC );
 8005034:	0007      	movs	r7, r0
 8005036:	0005      	movs	r5, r0
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8005038:	6898      	ldr	r0, [r3, #8]
 800503a:	f7fc fd53 	bl	8001ae4 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 800503e:	2800      	cmp	r0, #0
 8005040:	d02b      	beq.n	800509a <SX1276SetTxConfig+0xca>
 8005042:	2300      	movs	r3, #0
 8005044:	2201      	movs	r2, #1
 8005046:	3802      	subs	r0, #2
 8005048:	b2c0      	uxtb	r0, r0
 800504a:	4282      	cmp	r2, r0
 800504c:	415b      	adcs	r3, r3
 800504e:	217f      	movs	r1, #127	@ 0x7f
 8005050:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        if (power > 14)
 8005052:	01db      	lsls	r3, r3, #7
 8005054:	400a      	ands	r2, r1
 8005056:	0011      	movs	r1, r2
 8005058:	b2db      	uxtb	r3, r3
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800505a:	4319      	orrs	r1, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d02b      	beq.n	80050b8 <SX1276SetTxConfig+0xe8>
        if( power > 17 )
 8005060:	230f      	movs	r3, #15
 8005062:	2507      	movs	r5, #7
 8005064:	4399      	bics	r1, r3
 8005066:	2c11      	cmp	r4, #17
 8005068:	dd1c      	ble.n	80050a4 <SX1276SetTxConfig+0xd4>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800506a:	433d      	orrs	r5, r7
 800506c:	b2ed      	uxtb	r5, r5
            if( power > 20 )
 800506e:	1c23      	adds	r3, r4, #0
 8005070:	2c14      	cmp	r4, #20
 8005072:	dd00      	ble.n	8005076 <SX1276SetTxConfig+0xa6>
 8005074:	2314      	movs	r3, #20
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8005076:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8005078:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 800507a:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800507c:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 800507e:	f7ff fae0 	bl	8004642 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8005082:	0029      	movs	r1, r5
 8005084:	204d      	movs	r0, #77	@ 0x4d
 8005086:	f7ff fadc 	bl	8004642 <SX1276Write>
    switch( modem )
 800508a:	9b02      	ldr	r3, [sp, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d022      	beq.n	80050d6 <SX1276SetTxConfig+0x106>
 8005090:	2b01      	cmp	r3, #1
 8005092:	d100      	bne.n	8005096 <SX1276SetTxConfig+0xc6>
 8005094:	e080      	b.n	8005198 <SX1276SetTxConfig+0x1c8>
}
 8005096:	b00d      	add	sp, #52	@ 0x34
 8005098:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 800509a:	2301      	movs	r3, #1
 800509c:	2c0e      	cmp	r4, #14
 800509e:	dcd6      	bgt.n	800504e <SX1276SetTxConfig+0x7e>
 80050a0:	1c03      	adds	r3, r0, #0
 80050a2:	e7d4      	b.n	800504e <SX1276SetTxConfig+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80050a4:	43af      	bics	r7, r5
 80050a6:	2504      	movs	r5, #4
 80050a8:	433d      	orrs	r5, r7
 80050aa:	b2ed      	uxtb	r5, r5
            if( power < 2 )
 80050ac:	1c23      	adds	r3, r4, #0
 80050ae:	2c02      	cmp	r4, #2
 80050b0:	da00      	bge.n	80050b4 <SX1276SetTxConfig+0xe4>
 80050b2:	2302      	movs	r3, #2
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 80050b4:	3b02      	subs	r3, #2
 80050b6:	e7df      	b.n	8005078 <SX1276SetTxConfig+0xa8>
        if( power > 0 )
 80050b8:	2c00      	cmp	r4, #0
 80050ba:	dd05      	ble.n	80050c8 <SX1276SetTxConfig+0xf8>
            if( power > 15 )
 80050bc:	1c23      	adds	r3, r4, #0
 80050be:	2c0f      	cmp	r4, #15
 80050c0:	dd00      	ble.n	80050c4 <SX1276SetTxConfig+0xf4>
 80050c2:	230f      	movs	r3, #15
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 80050c4:	2170      	movs	r1, #112	@ 0x70
 80050c6:	e7d7      	b.n	8005078 <SX1276SetTxConfig+0xa8>
            if( power < -4 )
 80050c8:	1c21      	adds	r1, r4, #0
 80050ca:	1d23      	adds	r3, r4, #4
 80050cc:	da01      	bge.n	80050d2 <SX1276SetTxConfig+0x102>
 80050ce:	4b86      	ldr	r3, [pc, #536]	@ (80052e8 <SX1276SetTxConfig+0x318>)
 80050d0:	7819      	ldrb	r1, [r3, #0]
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 80050d2:	3104      	adds	r1, #4
 80050d4:	e7d1      	b.n	800507a <SX1276SetTxConfig+0xaa>
            SX1276.Settings.Fsk.Power = power;
 80050d6:	4b83      	ldr	r3, [pc, #524]	@ (80052e4 <SX1276SetTxConfig+0x314>)
            SX1276.Settings.Fsk.Fdev = fdev;
 80050d8:	9a05      	ldr	r2, [sp, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80050da:	9903      	ldr	r1, [sp, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 80050dc:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80050de:	9a06      	ldr	r2, [sp, #24]
            SX1276.Settings.Fsk.Power = power;
 80050e0:	731c      	strb	r4, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80050e2:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80050e4:	9a01      	ldr	r2, [sp, #4]
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 80050e6:	9805      	ldr	r0, [sp, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80050e8:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80050ea:	1cda      	adds	r2, r3, #3
 80050ec:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80050ee:	9904      	ldr	r1, [sp, #16]
 80050f0:	1d5a      	adds	r2, r3, #5
 80050f2:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80050f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80050f6:	1d9a      	adds	r2, r3, #6
 80050f8:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80050fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
            SX1276.Settings.Fsk.Datarate = datarate;
 80050fc:	61de      	str	r6, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80050fe:	629a      	str	r2, [r3, #40]	@ 0x28
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8005100:	497a      	ldr	r1, [pc, #488]	@ (80052ec <SX1276SetTxConfig+0x31c>)
 8005102:	f7fb f899 	bl	8000238 <__aeabi_uidivmod>
 8005106:	4b7a      	ldr	r3, [pc, #488]	@ (80052f0 <SX1276SetTxConfig+0x320>)
 8005108:	0208      	lsls	r0, r1, #8
 800510a:	18c0      	adds	r0, r0, r3
 800510c:	4977      	ldr	r1, [pc, #476]	@ (80052ec <SX1276SetTxConfig+0x31c>)
 800510e:	f7fb f80d 	bl	800012c <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8005112:	4976      	ldr	r1, [pc, #472]	@ (80052ec <SX1276SetTxConfig+0x31c>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8005114:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8005116:	9805      	ldr	r0, [sp, #20]
 8005118:	f7fb f808 	bl	800012c <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800511c:	0200      	lsls	r0, r0, #8
 800511e:	1824      	adds	r4, r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8005120:	0a21      	lsrs	r1, r4, #8
 8005122:	2004      	movs	r0, #4
 8005124:	b2c9      	uxtb	r1, r1
 8005126:	f7ff fa8c 	bl	8004642 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 800512a:	b2e1      	uxtb	r1, r4
 800512c:	2005      	movs	r0, #5
 800512e:	f7ff fa88 	bl	8004642 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8005132:	0031      	movs	r1, r6
 8005134:	486f      	ldr	r0, [pc, #444]	@ (80052f4 <SX1276SetTxConfig+0x324>)
 8005136:	f7fa fff9 	bl	800012c <__udivsi3>
 800513a:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800513c:	0a01      	lsrs	r1, r0, #8
 800513e:	b2c9      	uxtb	r1, r1
 8005140:	2002      	movs	r0, #2
 8005142:	f7ff fa7e 	bl	8004642 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8005146:	2003      	movs	r0, #3
 8005148:	b2e1      	uxtb	r1, r4
 800514a:	f7ff fa7a 	bl	8004642 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800514e:	9b01      	ldr	r3, [sp, #4]
 8005150:	2025      	movs	r0, #37	@ 0x25
 8005152:	0a19      	lsrs	r1, r3, #8
 8005154:	f7ff fa75 	bl	8004642 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8005158:	466b      	mov	r3, sp
 800515a:	2026      	movs	r0, #38	@ 0x26
 800515c:	7919      	ldrb	r1, [r3, #4]
 800515e:	f7ff fa70 	bl	8004642 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8005162:	2030      	movs	r0, #48	@ 0x30
 8005164:	f7ff fab8 	bl	80046d8 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8005168:	2101      	movs	r1, #1
 800516a:	9b03      	ldr	r3, [sp, #12]
 800516c:	4059      	eors	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800516e:	9b04      	ldr	r3, [sp, #16]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8005170:	01c9      	lsls	r1, r1, #7
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8005172:	011b      	lsls	r3, r3, #4
            SX1276Write( REG_PACKETCONFIG1,
 8005174:	4319      	orrs	r1, r3
 8005176:	236f      	movs	r3, #111	@ 0x6f
 8005178:	4018      	ands	r0, r3
 800517a:	4301      	orrs	r1, r0
 800517c:	b2c9      	uxtb	r1, r1
 800517e:	2030      	movs	r0, #48	@ 0x30
 8005180:	f7ff fa5f 	bl	8004642 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8005184:	2031      	movs	r0, #49	@ 0x31
 8005186:	f7ff faa7 	bl	80046d8 <SX1276Read>
 800518a:	2140      	movs	r1, #64	@ 0x40
 800518c:	4301      	orrs	r1, r0
 800518e:	2031      	movs	r0, #49	@ 0x31
 8005190:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8005192:	f7ff fa56 	bl	8004642 <SX1276Write>
}
 8005196:	e77e      	b.n	8005096 <SX1276SetTxConfig+0xc6>
            SX1276.Settings.LoRa.Power = power;
 8005198:	4a57      	ldr	r2, [pc, #348]	@ (80052f8 <SX1276SetTxConfig+0x328>)
 800519a:	4b52      	ldr	r3, [pc, #328]	@ (80052e4 <SX1276SetTxConfig+0x314>)
 800519c:	7014      	strb	r4, [r2, #0]
            if( bandwidth > 2 )
 800519e:	9a06      	ldr	r2, [sp, #24]
 80051a0:	2a02      	cmp	r2, #2
 80051a2:	d900      	bls.n	80051a6 <SX1276SetTxConfig+0x1d6>
                while( 1 );
 80051a4:	e7fe      	b.n	80051a4 <SX1276SetTxConfig+0x1d4>
            SX1276.Settings.LoRa.Coderate = coderate;
 80051a6:	001a      	movs	r2, r3
 80051a8:	9907      	ldr	r1, [sp, #28]
 80051aa:	324d      	adds	r2, #77	@ 0x4d
 80051ac:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80051ae:	001a      	movs	r2, r3
 80051b0:	9901      	ldr	r1, [sp, #4]
 80051b2:	324e      	adds	r2, #78	@ 0x4e
 80051b4:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80051b6:	001a      	movs	r2, r3
 80051b8:	9903      	ldr	r1, [sp, #12]
 80051ba:	3250      	adds	r2, #80	@ 0x50
 80051bc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80051be:	001a      	movs	r2, r3
 80051c0:	9908      	ldr	r1, [sp, #32]
 80051c2:	3253      	adds	r2, #83	@ 0x53
 80051c4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80051c6:	001a      	movs	r2, r3
 80051c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80051ca:	3254      	adds	r2, #84	@ 0x54
 80051cc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80051ce:	001a      	movs	r2, r3
 80051d0:	9904      	ldr	r1, [sp, #16]
 80051d2:	3252      	adds	r2, #82	@ 0x52
 80051d4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80051d6:	001a      	movs	r2, r3
 80051d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80051da:	3255      	adds	r2, #85	@ 0x55
            bandwidth += 7;
 80051dc:	9d06      	ldr	r5, [sp, #24]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80051de:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80051e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
            bandwidth += 7;
 80051e2:	3507      	adds	r5, #7
            else if( datarate < 6 )
 80051e4:	0034      	movs	r4, r6
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80051e6:	645d      	str	r5, [r3, #68]	@ 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80051e8:	649e      	str	r6, [r3, #72]	@ 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80051ea:	659a      	str	r2, [r3, #88]	@ 0x58
            else if( datarate < 6 )
 80051ec:	2e06      	cmp	r6, #6
 80051ee:	d262      	bcs.n	80052b6 <SX1276SetTxConfig+0x2e6>
 80051f0:	2406      	movs	r4, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80051f2:	2d07      	cmp	r5, #7
 80051f4:	d163      	bne.n	80052be <SX1276SetTxConfig+0x2ee>
 80051f6:	0022      	movs	r2, r4
 80051f8:	2300      	movs	r3, #0
 80051fa:	2101      	movs	r1, #1
 80051fc:	3a0b      	subs	r2, #11
 80051fe:	4291      	cmp	r1, r2
 8005200:	415b      	adcs	r3, r3
 8005202:	b2db      	uxtb	r3, r3
 8005204:	4a3d      	ldr	r2, [pc, #244]	@ (80052fc <SX1276SetTxConfig+0x32c>)
 8005206:	4f37      	ldr	r7, [pc, #220]	@ (80052e4 <SX1276SetTxConfig+0x314>)
 8005208:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800520a:	9b08      	ldr	r3, [sp, #32]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00f      	beq.n	8005230 <SX1276SetTxConfig+0x260>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8005210:	2044      	movs	r0, #68	@ 0x44
 8005212:	f7ff fa61 	bl	80046d8 <SX1276Read>
 8005216:	2180      	movs	r1, #128	@ 0x80
 8005218:	4249      	negs	r1, r1
 800521a:	4301      	orrs	r1, r0
 800521c:	b2c9      	uxtb	r1, r1
 800521e:	2044      	movs	r0, #68	@ 0x44
 8005220:	f7ff fa0f 	bl	8004642 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8005224:	003b      	movs	r3, r7
 8005226:	3354      	adds	r3, #84	@ 0x54
 8005228:	2024      	movs	r0, #36	@ 0x24
 800522a:	7819      	ldrb	r1, [r3, #0]
 800522c:	f7ff fa09 	bl	8004642 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8005230:	201d      	movs	r0, #29
 8005232:	f7ff fa51 	bl	80046d8 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8005236:	9b07      	ldr	r3, [sp, #28]
 8005238:	012d      	lsls	r5, r5, #4
 800523a:	0059      	lsls	r1, r3, #1
 800523c:	9b03      	ldr	r3, [sp, #12]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800523e:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8005240:	430b      	orrs	r3, r1
 8005242:	0019      	movs	r1, r3
 8005244:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 8005246:	b2c9      	uxtb	r1, r1
 8005248:	f7ff f9fb 	bl	8004642 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800524c:	201e      	movs	r0, #30
 800524e:	f7ff fa43 	bl	80046d8 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8005252:	9b04      	ldr	r3, [sp, #16]
 8005254:	0124      	lsls	r4, r4, #4
 8005256:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8005258:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 800525a:	230b      	movs	r3, #11
 800525c:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800525e:	4304      	orrs	r4, r0
 8005260:	b2e1      	uxtb	r1, r4
 8005262:	201e      	movs	r0, #30
 8005264:	f7ff f9ed 	bl	8004642 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8005268:	2026      	movs	r0, #38	@ 0x26
 800526a:	f7ff fa35 	bl	80046d8 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG3,
 800526e:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8005270:	374c      	adds	r7, #76	@ 0x4c
            SX1276Write( REG_LR_MODEMCONFIG3,
 8005272:	7839      	ldrb	r1, [r7, #0]
 8005274:	4398      	bics	r0, r3
 8005276:	00c9      	lsls	r1, r1, #3
 8005278:	4301      	orrs	r1, r0
 800527a:	b2c9      	uxtb	r1, r1
 800527c:	2026      	movs	r0, #38	@ 0x26
 800527e:	f7ff f9e0 	bl	8004642 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8005282:	9b01      	ldr	r3, [sp, #4]
 8005284:	2020      	movs	r0, #32
 8005286:	0a19      	lsrs	r1, r3, #8
 8005288:	f7ff f9db 	bl	8004642 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800528c:	466b      	mov	r3, sp
 800528e:	2021      	movs	r0, #33	@ 0x21
 8005290:	7919      	ldrb	r1, [r3, #4]
 8005292:	f7ff f9d6 	bl	8004642 <SX1276Write>
            if( datarate == 6 )
 8005296:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005298:	2031      	movs	r0, #49	@ 0x31
            if( datarate == 6 )
 800529a:	2e06      	cmp	r6, #6
 800529c:	d817      	bhi.n	80052ce <SX1276SetTxConfig+0x2fe>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800529e:	f7ff fa1b 	bl	80046d8 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80052a2:	2105      	movs	r1, #5
 80052a4:	43a0      	bics	r0, r4
 80052a6:	4301      	orrs	r1, r0
 80052a8:	b2c9      	uxtb	r1, r1
 80052aa:	2031      	movs	r0, #49	@ 0x31
 80052ac:	f7ff f9c9 	bl	8004642 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80052b0:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80052b2:	2037      	movs	r0, #55	@ 0x37
 80052b4:	e76d      	b.n	8005192 <SX1276SetTxConfig+0x1c2>
 80052b6:	2e0c      	cmp	r6, #12
 80052b8:	d99b      	bls.n	80051f2 <SX1276SetTxConfig+0x222>
 80052ba:	240c      	movs	r4, #12
 80052bc:	e799      	b.n	80051f2 <SX1276SetTxConfig+0x222>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80052be:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80052c0:	2d08      	cmp	r5, #8
 80052c2:	d19f      	bne.n	8005204 <SX1276SetTxConfig+0x234>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80052c4:	330b      	adds	r3, #11
 80052c6:	42b3      	cmp	r3, r6
 80052c8:	419b      	sbcs	r3, r3
 80052ca:	425b      	negs	r3, r3
 80052cc:	e79a      	b.n	8005204 <SX1276SetTxConfig+0x234>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80052ce:	f7ff fa03 	bl	80046d8 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80052d2:	2103      	movs	r1, #3
 80052d4:	43a0      	bics	r0, r4
 80052d6:	4301      	orrs	r1, r0
 80052d8:	b2c9      	uxtb	r1, r1
 80052da:	2031      	movs	r0, #49	@ 0x31
 80052dc:	f7ff f9b1 	bl	8004642 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80052e0:	210a      	movs	r1, #10
 80052e2:	e7e6      	b.n	80052b2 <SX1276SetTxConfig+0x2e2>
 80052e4:	20000464 	.word	0x20000464
 80052e8:	08006adc 	.word	0x08006adc
 80052ec:	00003d09 	.word	0x00003d09
 80052f0:	00001e84 	.word	0x00001e84
 80052f4:	01e84800 	.word	0x01e84800
 80052f8:	200004a4 	.word	0x200004a4
 80052fc:	200004b0 	.word	0x200004b0

08005300 <SX1276SetTxContinuousWave>:
{
 8005300:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 8005302:	24fa      	movs	r4, #250	@ 0xfa
{
 8005304:	b08b      	sub	sp, #44	@ 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 8005306:	00a4      	lsls	r4, r4, #2
 8005308:	4354      	muls	r4, r2
{
 800530a:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 800530c:	f7ff f9a2 	bl	8004654 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8005310:	2305      	movs	r3, #5
 8005312:	9302      	str	r3, [sp, #8]
 8005314:	2396      	movs	r3, #150	@ 0x96
 8005316:	2000      	movs	r0, #0
 8005318:	015b      	lsls	r3, r3, #5
 800531a:	0002      	movs	r2, r0
 800531c:	0029      	movs	r1, r5
 800531e:	9408      	str	r4, [sp, #32]
 8005320:	9007      	str	r0, [sp, #28]
 8005322:	9006      	str	r0, [sp, #24]
 8005324:	9005      	str	r0, [sp, #20]
 8005326:	9004      	str	r0, [sp, #16]
 8005328:	9003      	str	r0, [sp, #12]
 800532a:	9001      	str	r0, [sp, #4]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	0003      	movs	r3, r0
 8005330:	f7ff fe4e 	bl	8004fd0 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8005334:	2031      	movs	r0, #49	@ 0x31
 8005336:	f7ff f9cf 	bl	80046d8 <SX1276Read>
 800533a:	2540      	movs	r5, #64	@ 0x40
 800533c:	43a8      	bics	r0, r5
 800533e:	b2c1      	uxtb	r1, r0
 8005340:	2031      	movs	r0, #49	@ 0x31
 8005342:	f7ff f97e 	bl	8004642 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8005346:	0028      	movs	r0, r5
 8005348:	21f0      	movs	r1, #240	@ 0xf0
 800534a:	f7ff f97a 	bl	8004642 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800534e:	21a0      	movs	r1, #160	@ 0xa0
 8005350:	2041      	movs	r0, #65	@ 0x41
 8005352:	f7ff f976 	bl	8004642 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8005356:	4b08      	ldr	r3, [pc, #32]	@ (8005378 <SX1276SetTxContinuousWave+0x78>)
 8005358:	0021      	movs	r1, r4
 800535a:	0018      	movs	r0, r3
 800535c:	001c      	movs	r4, r3
 800535e:	f000 ff1f 	bl	80061a0 <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 8005362:	2202      	movs	r2, #2
 8005364:	4b05      	ldr	r3, [pc, #20]	@ (800537c <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 8005366:	0020      	movs	r0, r4
    SX1276.Settings.State = RF_TX_RUNNING;
 8005368:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 800536a:	f000 fedb 	bl	8006124 <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 800536e:	2003      	movs	r0, #3
 8005370:	f7ff fa54 	bl	800481c <SX1276SetOpMode.part.0>
}
 8005374:	b00b      	add	sp, #44	@ 0x2c
 8005376:	bd30      	pop	{r4, r5, pc}
 8005378:	20000500 	.word	0x20000500
 800537c:	20000464 	.word	0x20000464

08005380 <RxChainCalibration>:
{
 8005380:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8005382:	2009      	movs	r0, #9
 8005384:	f7ff f9a8 	bl	80046d8 <SX1276Read>
 8005388:	0005      	movs	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800538a:	2006      	movs	r0, #6
 800538c:	f7ff f9a4 	bl	80046d8 <SX1276Read>
 8005390:	0004      	movs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8005392:	2007      	movs	r0, #7
 8005394:	f7ff f9a0 	bl	80046d8 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005398:	0424      	lsls	r4, r4, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800539a:	0200      	lsls	r0, r0, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800539c:	4304      	orrs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 800539e:	2008      	movs	r0, #8
 80053a0:	f7ff f99a 	bl	80046d8 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80053a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005410 <RxChainCalibration+0x90>)
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80053a6:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80053a8:	b2c0      	uxtb	r0, r0
 80053aa:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 80053ac:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80053ae:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80053b0:	3080      	adds	r0, #128	@ 0x80
 80053b2:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 80053b4:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80053b6:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 80053b8:	2009      	movs	r0, #9
 80053ba:	f7ff f942 	bl	8004642 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80053be:	203b      	movs	r0, #59	@ 0x3b
 80053c0:	f7ff f98a 	bl	80046d8 <SX1276Read>
 80053c4:	2140      	movs	r1, #64	@ 0x40
 80053c6:	4301      	orrs	r1, r0
 80053c8:	b2c9      	uxtb	r1, r1
 80053ca:	203b      	movs	r0, #59	@ 0x3b
 80053cc:	f7ff f939 	bl	8004642 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80053d0:	2620      	movs	r6, #32
 80053d2:	203b      	movs	r0, #59	@ 0x3b
 80053d4:	f7ff f980 	bl	80046d8 <SX1276Read>
 80053d8:	4230      	tst	r0, r6
 80053da:	d1fa      	bne.n	80053d2 <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 80053dc:	480d      	ldr	r0, [pc, #52]	@ (8005414 <RxChainCalibration+0x94>)
 80053de:	f7ff f939 	bl	8004654 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80053e2:	203b      	movs	r0, #59	@ 0x3b
 80053e4:	f7ff f978 	bl	80046d8 <SX1276Read>
 80053e8:	2140      	movs	r1, #64	@ 0x40
 80053ea:	4301      	orrs	r1, r0
 80053ec:	b2c9      	uxtb	r1, r1
 80053ee:	203b      	movs	r0, #59	@ 0x3b
 80053f0:	f7ff f927 	bl	8004642 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80053f4:	2620      	movs	r6, #32
 80053f6:	203b      	movs	r0, #59	@ 0x3b
 80053f8:	f7ff f96e 	bl	80046d8 <SX1276Read>
 80053fc:	4230      	tst	r0, r6
 80053fe:	d1fa      	bne.n	80053f6 <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8005400:	0029      	movs	r1, r5
 8005402:	2009      	movs	r0, #9
 8005404:	f7ff f91d 	bl	8004642 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8005408:	0020      	movs	r0, r4
 800540a:	f7ff f923 	bl	8004654 <SX1276SetChannel>
}
 800540e:	bd70      	pop	{r4, r5, r6, pc}
 8005410:	00003d09 	.word	0x00003d09
 8005414:	33bca100 	.word	0x33bca100

08005418 <SX1276Init>:
{
 8005418:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 800541a:	4e1f      	ldr	r6, [pc, #124]	@ (8005498 <SX1276Init+0x80>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800541c:	2400      	movs	r4, #0
    RadioEvents = events;
 800541e:	6030      	str	r0, [r6, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8005420:	2101      	movs	r1, #1
 8005422:	0030      	movs	r0, r6
 8005424:	4d1d      	ldr	r5, [pc, #116]	@ (800549c <SX1276Init+0x84>)
 8005426:	0022      	movs	r2, r4
 8005428:	002b      	movs	r3, r5
 800542a:	9400      	str	r4, [sp, #0]
 800542c:	4249      	negs	r1, r1
 800542e:	301c      	adds	r0, #28
 8005430:	f000 fdc6 	bl	8005fc0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8005434:	2101      	movs	r1, #1
 8005436:	002b      	movs	r3, r5
 8005438:	0022      	movs	r2, r4
 800543a:	1d30      	adds	r0, r6, #4
 800543c:	9400      	str	r4, [sp, #0]
 800543e:	4249      	negs	r1, r1
 8005440:	f000 fdbe 	bl	8005fc0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8005444:	2101      	movs	r1, #1
 8005446:	002b      	movs	r3, r5
 8005448:	0022      	movs	r2, r4
 800544a:	4249      	negs	r1, r1
 800544c:	9400      	str	r4, [sp, #0]
 800544e:	4814      	ldr	r0, [pc, #80]	@ (80054a0 <SX1276Init+0x88>)
 8005450:	4e14      	ldr	r6, [pc, #80]	@ (80054a4 <SX1276Init+0x8c>)
 8005452:	f000 fdb5 	bl	8005fc0 <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 8005456:	2001      	movs	r0, #1
 8005458:	f7fc f9d2 	bl	8001800 <CMWX1ZZABZ0XX_RADIO_SetXO>
    Sx_Board_Reset();
 800545c:	f7fc fb6c 	bl	8001b38 <CMWX1ZZABZ0XX_RADIO_Reset>
    RxChainCalibration( );
 8005460:	f7ff ff8e 	bl	8005380 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8005464:	f7ff fb68 	bl	8004b38 <SX1276SetOpMode.constprop.0>
    Sx_Board_IoIrqInit( DioIrq );
 8005468:	480f      	ldr	r0, [pc, #60]	@ (80054a8 <SX1276Init+0x90>)
 800546a:	f7fc fb0d 	bl	8001a88 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800546e:	4c0f      	ldr	r4, [pc, #60]	@ (80054ac <SX1276Init+0x94>)
 8005470:	4d0f      	ldr	r5, [pc, #60]	@ (80054b0 <SX1276Init+0x98>)
        SX1276SetModem( RadioRegsInit[i].Modem );
 8005472:	7820      	ldrb	r0, [r4, #0]
 8005474:	f7ff fb70 	bl	8004b58 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8005478:	78a1      	ldrb	r1, [r4, #2]
 800547a:	7860      	ldrb	r0, [r4, #1]
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800547c:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800547e:	f7ff f8e0 	bl	8004642 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8005482:	42ac      	cmp	r4, r5
 8005484:	d1f5      	bne.n	8005472 <SX1276Init+0x5a>
    SX1276SetModem( MODEM_FSK );
 8005486:	2000      	movs	r0, #0
 8005488:	f7ff fb66 	bl	8004b58 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 800548c:	2300      	movs	r3, #0
 800548e:	7133      	strb	r3, [r6, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8005490:	f7fc f9b4 	bl	80017fc <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8005494:	3002      	adds	r0, #2
}
 8005496:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005498:	200004e4 	.word	0x200004e4
 800549c:	080054b5 	.word	0x080054b5
 80054a0:	200004cc 	.word	0x200004cc
 80054a4:	20000464 	.word	0x20000464
 80054a8:	20000020 	.word	0x20000020
 80054ac:	0800666c 	.word	0x0800666c
 80054b0:	0800669c 	.word	0x0800669c

080054b4 <SX1276OnTimeoutIrq>:
{
 80054b4:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80054b6:	4c29      	ldr	r4, [pc, #164]	@ (800555c <SX1276OnTimeoutIrq+0xa8>)
 80054b8:	7923      	ldrb	r3, [r4, #4]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d002      	beq.n	80054c4 <SX1276OnTimeoutIrq+0x10>
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d02a      	beq.n	8005518 <SX1276OnTimeoutIrq+0x64>
}
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 80054c4:	7963      	ldrb	r3, [r4, #5]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d117      	bne.n	80054fa <SX1276OnTimeoutIrq+0x46>
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80054ca:	210b      	movs	r1, #11
 80054cc:	203e      	movs	r0, #62	@ 0x3e
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80054ce:	8623      	strh	r3, [r4, #48]	@ 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80054d0:	87a3      	strh	r3, [r4, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80054d2:	8763      	strh	r3, [r4, #58]	@ 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80054d4:	f7ff f8b5 	bl	8004642 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80054d8:	2110      	movs	r1, #16
 80054da:	203f      	movs	r0, #63	@ 0x3f
 80054dc:	f7ff f8b1 	bl	8004642 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 80054e0:	1de3      	adds	r3, r4, #7
 80054e2:	7fdb      	ldrb	r3, [r3, #31]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d011      	beq.n	800550c <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80054e8:	200d      	movs	r0, #13
 80054ea:	f7ff f8f5 	bl	80046d8 <SX1276Read>
 80054ee:	2140      	movs	r1, #64	@ 0x40
 80054f0:	4301      	orrs	r1, r0
 80054f2:	b2c9      	uxtb	r1, r1
 80054f4:	200d      	movs	r0, #13
 80054f6:	f7ff f8a4 	bl	8004642 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80054fa:	4b19      	ldr	r3, [pc, #100]	@ (8005560 <SX1276OnTimeoutIrq+0xac>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0df      	beq.n	80054c2 <SX1276OnTimeoutIrq+0xe>
 8005502:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0dc      	beq.n	80054c2 <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 8005508:	4798      	blx	r3
}
 800550a:	e7da      	b.n	80054c2 <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800550c:	0020      	movs	r0, r4
 800550e:	3068      	adds	r0, #104	@ 0x68
                SX1276.Settings.State = RF_IDLE;
 8005510:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8005512:	f000 fdb3 	bl	800607c <UTIL_TIMER_Stop>
 8005516:	e7f0      	b.n	80054fa <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 8005518:	f7fc fb0e 	bl	8001b38 <CMWX1ZZABZ0XX_RADIO_Reset>
        RxChainCalibration( );
 800551c:	f7ff ff30 	bl	8005380 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8005520:	f7ff fb0a 	bl	8004b38 <SX1276SetOpMode.constprop.0>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8005524:	4d0f      	ldr	r5, [pc, #60]	@ (8005564 <SX1276OnTimeoutIrq+0xb0>)
 8005526:	4e10      	ldr	r6, [pc, #64]	@ (8005568 <SX1276OnTimeoutIrq+0xb4>)
            SX1276SetModem( RadioRegsInit[i].Modem );
 8005528:	7828      	ldrb	r0, [r5, #0]
 800552a:	f7ff fb15 	bl	8004b58 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800552e:	78a9      	ldrb	r1, [r5, #2]
 8005530:	7868      	ldrb	r0, [r5, #1]
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8005532:	3503      	adds	r5, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8005534:	f7ff f885 	bl	8004642 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8005538:	42b5      	cmp	r5, r6
 800553a:	d1f5      	bne.n	8005528 <SX1276OnTimeoutIrq+0x74>
        SX1276SetModem( MODEM_FSK );
 800553c:	2000      	movs	r0, #0
 800553e:	f7ff fb0b 	bl	8004b58 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8005542:	0023      	movs	r3, r4
 8005544:	335c      	adds	r3, #92	@ 0x5c
 8005546:	7818      	ldrb	r0, [r3, #0]
 8005548:	f7ff fb54 	bl	8004bf4 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800554c:	2300      	movs	r3, #0
 800554e:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8005550:	4b03      	ldr	r3, [pc, #12]	@ (8005560 <SX1276OnTimeoutIrq+0xac>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0b4      	beq.n	80054c2 <SX1276OnTimeoutIrq+0xe>
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	e7d3      	b.n	8005504 <SX1276OnTimeoutIrq+0x50>
 800555c:	20000464 	.word	0x20000464
 8005560:	200004e4 	.word	0x200004e4
 8005564:	0800666c 	.word	0x0800666c
 8005568:	0800669c 	.word	0x0800669c

0800556c <SX1276OnDio0Irq>:
{
 800556c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    volatile uint8_t irqFlags = 0;
 800556e:	466b      	mov	r3, sp
 8005570:	1dde      	adds	r6, r3, #7
 8005572:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 8005574:	4c8c      	ldr	r4, [pc, #560]	@ (80057a8 <SX1276OnDio0Irq+0x23c>)
    volatile uint8_t irqFlags = 0;
 8005576:	7033      	strb	r3, [r6, #0]
    switch( SX1276.Settings.State )
 8005578:	7923      	ldrb	r3, [r4, #4]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d003      	beq.n	8005586 <SX1276OnDio0Irq+0x1a>
 800557e:	2b02      	cmp	r3, #2
 8005580:	d100      	bne.n	8005584 <SX1276OnDio0Irq+0x18>
 8005582:	e0fd      	b.n	8005780 <SX1276OnDio0Irq+0x214>
}
 8005584:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8005586:	7963      	ldrb	r3, [r4, #5]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d023      	beq.n	80055d4 <SX1276OnDio0Irq+0x68>
 800558c:	2b01      	cmp	r3, #1
 800558e:	d1f9      	bne.n	8005584 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8005590:	2140      	movs	r1, #64	@ 0x40
 8005592:	2012      	movs	r0, #18
 8005594:	f7ff f855 	bl	8004642 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8005598:	2012      	movs	r0, #18
 800559a:	f7ff f89d 	bl	80046d8 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800559e:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 80055a0:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80055a2:	7833      	ldrb	r3, [r6, #0]
 80055a4:	4d81      	ldr	r5, [pc, #516]	@ (80057ac <SX1276OnDio0Irq+0x240>)
 80055a6:	420b      	tst	r3, r1
 80055a8:	d100      	bne.n	80055ac <SX1276OnDio0Irq+0x40>
 80055aa:	e08a      	b.n	80056c2 <SX1276OnDio0Irq+0x156>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80055ac:	2012      	movs	r0, #18
 80055ae:	f7ff f848 	bl	8004642 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 80055b2:	0023      	movs	r3, r4
 80055b4:	3356      	adds	r3, #86	@ 0x56
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d100      	bne.n	80055be <SX1276OnDio0Irq+0x52>
                            SX1276.Settings.State = RF_IDLE;
 80055bc:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 80055be:	1d28      	adds	r0, r5, #4
 80055c0:	f000 fd5c 	bl	800607c <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0dc      	beq.n	8005584 <SX1276OnDio0Irq+0x18>
 80055ca:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0d9      	beq.n	8005584 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 80055d0:	4798      	blx	r3
}
 80055d2:	e7d7      	b.n	8005584 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 80055d4:	1d63      	adds	r3, r4, #5
 80055d6:	7fdb      	ldrb	r3, [r3, #31]
 80055d8:	4d74      	ldr	r5, [pc, #464]	@ (80057ac <SX1276OnDio0Irq+0x240>)
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d030      	beq.n	8005640 <SX1276OnDio0Irq+0xd4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80055de:	203f      	movs	r0, #63	@ 0x3f
 80055e0:	f7ff f87a 	bl	80046d8 <SX1276Read>
 80055e4:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80055e6:	7833      	ldrb	r3, [r6, #0]
 80055e8:	079b      	lsls	r3, r3, #30
 80055ea:	d429      	bmi.n	8005640 <SX1276OnDio0Irq+0xd4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80055ec:	210b      	movs	r1, #11
 80055ee:	203e      	movs	r0, #62	@ 0x3e
 80055f0:	f7ff f827 	bl	8004642 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80055f4:	2110      	movs	r1, #16
 80055f6:	203f      	movs	r0, #63	@ 0x3f
 80055f8:	f7ff f823 	bl	8004642 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80055fc:	1d28      	adds	r0, r5, #4
 80055fe:	f000 fd3d 	bl	800607c <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8005602:	1de3      	adds	r3, r4, #7
 8005604:	7fde      	ldrb	r6, [r3, #31]
 8005606:	2e00      	cmp	r6, #0
 8005608:	d110      	bne.n	800562c <SX1276OnDio0Irq+0xc0>
                            TimerStop( &RxTimeoutSyncWord );
 800560a:	0020      	movs	r0, r4
 800560c:	3068      	adds	r0, #104	@ 0x68
 800560e:	f000 fd35 	bl	800607c <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 8005612:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <SX1276OnDio0Irq+0xb6>
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d000      	beq.n	8005622 <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 8005620:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8005622:	2300      	movs	r3, #0
 8005624:	8623      	strh	r3, [r4, #48]	@ 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8005626:	87a3      	strh	r3, [r4, #60]	@ 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8005628:	8763      	strh	r3, [r4, #58]	@ 0x3a
                        break;
 800562a:	e7ab      	b.n	8005584 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800562c:	200d      	movs	r0, #13
 800562e:	f7ff f853 	bl	80046d8 <SX1276Read>
 8005632:	2140      	movs	r1, #64	@ 0x40
 8005634:	4301      	orrs	r1, r0
 8005636:	b2c9      	uxtb	r1, r1
 8005638:	200d      	movs	r0, #13
 800563a:	f7ff f802 	bl	8004642 <SX1276Write>
 800563e:	e7e9      	b.n	8005614 <SX1276OnDio0Irq+0xa8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8005640:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 8005642:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8005644:	0013      	movs	r3, r2
 8005646:	4e5a      	ldr	r6, [pc, #360]	@ (80057b0 <SX1276OnDio0Irq+0x244>)
 8005648:	430b      	orrs	r3, r1
 800564a:	d10a      	bne.n	8005662 <SX1276OnDio0Irq+0xf6>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800564c:	1ce3      	adds	r3, r4, #3
 800564e:	7fd8      	ldrb	r0, [r3, #31]
 8005650:	2800      	cmp	r0, #0
 8005652:	d127      	bne.n	80056a4 <SX1276OnDio0Irq+0x138>
    SX1276ReadBuffer( 0, buffer, size );
 8005654:	0021      	movs	r1, r4
 8005656:	2201      	movs	r2, #1
 8005658:	313a      	adds	r1, #58	@ 0x3a
 800565a:	f7ff f825 	bl	80046a8 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800565e:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8005660:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005662:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8005664:	2000      	movs	r0, #0
 8005666:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005668:	1871      	adds	r1, r6, r1
    SX1276ReadBuffer( 0, buffer, size );
 800566a:	f7ff f81d 	bl	80046a8 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800566e:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
                TimerStop( &RxTimeoutTimer );
 8005670:	1d28      	adds	r0, r5, #4
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005672:	87a3      	strh	r3, [r4, #60]	@ 0x3c
                TimerStop( &RxTimeoutTimer );
 8005674:	f000 fd02 	bl	800607c <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8005678:	1de3      	adds	r3, r4, #7
 800567a:	7fdb      	ldrb	r3, [r3, #31]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d116      	bne.n	80056ae <SX1276OnDio0Irq+0x142>
                    TimerStop( &RxTimeoutSyncWord );
 8005680:	0020      	movs	r0, r4
 8005682:	3068      	adds	r0, #104	@ 0x68
                    SX1276.Settings.State = RF_IDLE;
 8005684:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8005686:	f000 fcf9 	bl	800607c <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800568a:	682b      	ldr	r3, [r5, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0c8      	beq.n	8005622 <SX1276OnDio0Irq+0xb6>
 8005690:	689d      	ldr	r5, [r3, #8]
 8005692:	2d00      	cmp	r5, #0
 8005694:	d0c5      	beq.n	8005622 <SX1276OnDio0Irq+0xb6>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8005696:	2232      	movs	r2, #50	@ 0x32
 8005698:	2300      	movs	r3, #0
 800569a:	0030      	movs	r0, r6
 800569c:	56a2      	ldrsb	r2, [r4, r2]
 800569e:	8f61      	ldrh	r1, [r4, #58]	@ 0x3a
 80056a0:	47a8      	blx	r5
 80056a2:	e7be      	b.n	8005622 <SX1276OnDio0Irq+0xb6>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80056a4:	2032      	movs	r0, #50	@ 0x32
 80056a6:	f7ff f817 	bl	80046d8 <SX1276Read>
 80056aa:	8760      	strh	r0, [r4, #58]	@ 0x3a
 80056ac:	e7d7      	b.n	800565e <SX1276OnDio0Irq+0xf2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80056ae:	200d      	movs	r0, #13
 80056b0:	f7ff f812 	bl	80046d8 <SX1276Read>
 80056b4:	2140      	movs	r1, #64	@ 0x40
 80056b6:	4301      	orrs	r1, r0
 80056b8:	b2c9      	uxtb	r1, r1
 80056ba:	200d      	movs	r0, #13
 80056bc:	f7fe ffc1 	bl	8004642 <SX1276Write>
 80056c0:	e7e3      	b.n	800568a <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80056c2:	2019      	movs	r0, #25
 80056c4:	f7ff f808 	bl	80046d8 <SX1276Read>
 80056c8:	0026      	movs	r6, r4
 80056ca:	b240      	sxtb	r0, r0
 80056cc:	3002      	adds	r0, #2
 80056ce:	1080      	asrs	r0, r0, #2
 80056d0:	3660      	adds	r6, #96	@ 0x60
 80056d2:	7030      	strb	r0, [r6, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80056d4:	201a      	movs	r0, #26
 80056d6:	f7fe ffff 	bl	80046d8 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80056da:	2200      	movs	r2, #0
 80056dc:	56b2      	ldrsb	r2, [r6, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80056de:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80056e0:	4934      	ldr	r1, [pc, #208]	@ (80057b4 <SX1276OnDio0Irq+0x248>)
 80056e2:	111b      	asrs	r3, r3, #4
 80056e4:	2a00      	cmp	r2, #0
 80056e6:	da41      	bge.n	800576c <SX1276OnDio0Irq+0x200>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80056e8:	68a6      	ldr	r6, [r4, #8]
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80056ea:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80056ec:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80056ee:	428e      	cmp	r6, r1
 80056f0:	d937      	bls.n	8005762 <SX1276OnDio0Irq+0x1f6>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80056f2:	3a9d      	subs	r2, #157	@ 0x9d
 80056f4:	1882      	adds	r2, r0, r2
 80056f6:	189a      	adds	r2, r3, r2
 80056f8:	b210      	sxth	r0, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80056fa:	0023      	movs	r3, r4
 80056fc:	3362      	adds	r3, #98	@ 0x62
 80056fe:	8018      	strh	r0, [r3, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8005700:	0026      	movs	r6, r4
 8005702:	2013      	movs	r0, #19
 8005704:	f7fe ffe8 	bl	80046d8 <SX1276Read>
 8005708:	3664      	adds	r6, #100	@ 0x64
 800570a:	7030      	strb	r0, [r6, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800570c:	2010      	movs	r0, #16
 800570e:	f7fe ffe3 	bl	80046d8 <SX1276Read>
 8005712:	0001      	movs	r1, r0
 8005714:	200d      	movs	r0, #13
 8005716:	f7fe ff94 	bl	8004642 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 800571a:	7832      	ldrb	r2, [r6, #0]
 800571c:	4e24      	ldr	r6, [pc, #144]	@ (80057b0 <SX1276OnDio0Irq+0x244>)
 800571e:	2000      	movs	r0, #0
 8005720:	0031      	movs	r1, r6
 8005722:	f7fe ffc1 	bl	80046a8 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8005726:	0023      	movs	r3, r4
 8005728:	3356      	adds	r3, #86	@ 0x56
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d100      	bne.n	8005732 <SX1276OnDio0Irq+0x1c6>
                        SX1276.Settings.State = RF_IDLE;
 8005730:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 8005732:	1d28      	adds	r0, r5, #4
 8005734:	f000 fca2 	bl	800607c <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d100      	bne.n	8005740 <SX1276OnDio0Irq+0x1d4>
 800573e:	e721      	b.n	8005584 <SX1276OnDio0Irq+0x18>
 8005740:	689d      	ldr	r5, [r3, #8]
 8005742:	2d00      	cmp	r5, #0
 8005744:	d100      	bne.n	8005748 <SX1276OnDio0Irq+0x1dc>
 8005746:	e71d      	b.n	8005584 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8005748:	0023      	movs	r3, r4
 800574a:	0022      	movs	r2, r4
 800574c:	3360      	adds	r3, #96	@ 0x60
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	3464      	adds	r4, #100	@ 0x64
 8005752:	3262      	adds	r2, #98	@ 0x62
 8005754:	2100      	movs	r1, #0
 8005756:	5e52      	ldrsh	r2, [r2, r1]
 8005758:	0030      	movs	r0, r6
 800575a:	7821      	ldrb	r1, [r4, #0]
 800575c:	b25b      	sxtb	r3, r3
 800575e:	47a8      	blx	r5
 8005760:	e710      	b.n	8005584 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8005762:	3aa4      	subs	r2, #164	@ 0xa4
 8005764:	1882      	adds	r2, r0, r2
 8005766:	189b      	adds	r3, r3, r2
 8005768:	b218      	sxth	r0, r3
 800576a:	e7c6      	b.n	80056fa <SX1276OnDio0Irq+0x18e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800576c:	68a2      	ldr	r2, [r4, #8]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800576e:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8005770:	428a      	cmp	r2, r1
 8005772:	d903      	bls.n	800577c <SX1276OnDio0Irq+0x210>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8005774:	389d      	subs	r0, #157	@ 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8005776:	1818      	adds	r0, r3, r0
 8005778:	b200      	sxth	r0, r0
 800577a:	e7be      	b.n	80056fa <SX1276OnDio0Irq+0x18e>
 800577c:	38a4      	subs	r0, #164	@ 0xa4
 800577e:	e7fa      	b.n	8005776 <SX1276OnDio0Irq+0x20a>
            TimerStop( &TxTimeoutTimer );
 8005780:	480d      	ldr	r0, [pc, #52]	@ (80057b8 <SX1276OnDio0Irq+0x24c>)
 8005782:	4d0a      	ldr	r5, [pc, #40]	@ (80057ac <SX1276OnDio0Irq+0x240>)
 8005784:	f000 fc7a 	bl	800607c <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 8005788:	7963      	ldrb	r3, [r4, #5]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d103      	bne.n	8005796 <SX1276OnDio0Irq+0x22a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800578e:	2108      	movs	r1, #8
 8005790:	2012      	movs	r0, #18
 8005792:	f7fe ff56 	bl	8004642 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8005796:	2300      	movs	r3, #0
 8005798:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800579a:	682b      	ldr	r3, [r5, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d100      	bne.n	80057a2 <SX1276OnDio0Irq+0x236>
 80057a0:	e6f0      	b.n	8005584 <SX1276OnDio0Irq+0x18>
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	e712      	b.n	80055cc <SX1276OnDio0Irq+0x60>
 80057a6:	46c0      	nop			@ (mov r8, r8)
 80057a8:	20000464 	.word	0x20000464
 80057ac:	200004e4 	.word	0x200004e4
 80057b0:	20000518 	.word	0x20000518
 80057b4:	1f4add40 	.word	0x1f4add40
 80057b8:	20000500 	.word	0x20000500

080057bc <SX1276Send>:
{
 80057bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057be:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 80057c0:	4c5f      	ldr	r4, [pc, #380]	@ (8005940 <SX1276Send+0x184>)
{
 80057c2:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 80057c4:	7965      	ldrb	r5, [r4, #5]
{
 80057c6:	1ddf      	adds	r7, r3, #7
 80057c8:	0006      	movs	r6, r0
    switch( SX1276.Settings.Modem )
 80057ca:	2d00      	cmp	r5, #0
 80057cc:	d01c      	beq.n	8005808 <SX1276Send+0x4c>
 80057ce:	2d01      	cmp	r5, #1
 80057d0:	d041      	beq.n	8005856 <SX1276Send+0x9a>
 80057d2:	2600      	movs	r6, #0
    TimerStop( &RxTimeoutTimer );
 80057d4:	4d5b      	ldr	r5, [pc, #364]	@ (8005944 <SX1276Send+0x188>)
 80057d6:	485c      	ldr	r0, [pc, #368]	@ (8005948 <SX1276Send+0x18c>)
 80057d8:	f000 fc50 	bl	800607c <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80057dc:	0028      	movs	r0, r5
 80057de:	0031      	movs	r1, r6
 80057e0:	301c      	adds	r0, #28
 80057e2:	f000 fcdd 	bl	80061a0 <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 80057e6:	7963      	ldrb	r3, [r4, #5]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d100      	bne.n	80057ee <SX1276Send+0x32>
 80057ec:	e072      	b.n	80058d4 <SX1276Send+0x118>
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d100      	bne.n	80057f4 <SX1276Send+0x38>
 80057f2:	e088      	b.n	8005906 <SX1276Send+0x14a>
    TimerStart( &TxTimeoutTimer );
 80057f4:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 80057f6:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 80057f8:	301c      	adds	r0, #28
    SX1276.Settings.State = RF_TX_RUNNING;
 80057fa:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 80057fc:	f000 fc92 	bl	8006124 <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 8005800:	2003      	movs	r0, #3
 8005802:	f7ff f80b 	bl	800481c <SX1276SetOpMode.part.0>
}
 8005806:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8005808:	87a5      	strh	r5, [r4, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 800580a:	783d      	ldrb	r5, [r7, #0]
            if( SX1276.Settings.Fsk.FixLen == false )
 800580c:	1ce3      	adds	r3, r4, #3
            SX1276.Settings.FskPacketHandler.Size = size;
 800580e:	8765      	strh	r5, [r4, #58]	@ 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 8005810:	7fd8      	ldrb	r0, [r3, #31]
 8005812:	2800      	cmp	r0, #0
 8005814:	d11a      	bne.n	800584c <SX1276Send+0x90>
    SX1276WriteBuffer( 0, buffer, size );
 8005816:	2201      	movs	r2, #1
 8005818:	0039      	movs	r1, r7
 800581a:	f7fe fefa 	bl	8004612 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 800581e:	1e6b      	subs	r3, r5, #1
 8005820:	2b3f      	cmp	r3, #63	@ 0x3f
 8005822:	d905      	bls.n	8005830 <SX1276Send+0x74>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 8005824:	002a      	movs	r2, r5
 8005826:	0031      	movs	r1, r6
 8005828:	4848      	ldr	r0, [pc, #288]	@ (800594c <SX1276Send+0x190>)
 800582a:	f000 fad5 	bl	8005dd8 <UTIL_MEM_cpy_8>
 800582e:	2520      	movs	r5, #32
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8005830:	0027      	movs	r7, r4
    SX1276WriteBuffer( 0, buffer, size );
 8005832:	002a      	movs	r2, r5
 8005834:	0031      	movs	r1, r6
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8005836:	373f      	adds	r7, #63	@ 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 8005838:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800583a:	703d      	strb	r5, [r7, #0]
    SX1276WriteBuffer( 0, buffer, size );
 800583c:	f7fe fee9 	bl	8004612 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8005840:	783b      	ldrb	r3, [r7, #0]
 8005842:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8005844:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8005846:	189b      	adds	r3, r3, r2
 8005848:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        break;
 800584a:	e7c3      	b.n	80057d4 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 800584c:	0029      	movs	r1, r5
 800584e:	2032      	movs	r0, #50	@ 0x32
 8005850:	f7fe fef7 	bl	8004642 <SX1276Write>
 8005854:	e7e3      	b.n	800581e <SX1276Send+0x62>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8005856:	0023      	movs	r3, r4
 8005858:	3355      	adds	r3, #85	@ 0x55
 800585a:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800585c:	2033      	movs	r0, #51	@ 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800585e:	2b00      	cmp	r3, #0
 8005860:	d02d      	beq.n	80058be <SX1276Send+0x102>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8005862:	f7fe ff39 	bl	80046d8 <SX1276Read>
 8005866:	2341      	movs	r3, #65	@ 0x41
 8005868:	4398      	bics	r0, r3
 800586a:	b2c1      	uxtb	r1, r0
 800586c:	2033      	movs	r0, #51	@ 0x33
 800586e:	f7fe fee8 	bl	8004642 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8005872:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8005874:	203b      	movs	r0, #59	@ 0x3b
 8005876:	f7fe fee4 	bl	8004642 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800587a:	0023      	movs	r3, r4
 800587c:	783d      	ldrb	r5, [r7, #0]
 800587e:	3364      	adds	r3, #100	@ 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8005880:	0029      	movs	r1, r5
 8005882:	2022      	movs	r0, #34	@ 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8005884:	701d      	strb	r5, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8005886:	f7fe fedc 	bl	8004642 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800588a:	2100      	movs	r1, #0
 800588c:	200e      	movs	r0, #14
 800588e:	f7fe fed8 	bl	8004642 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8005892:	2100      	movs	r1, #0
 8005894:	200d      	movs	r0, #13
 8005896:	f7fe fed4 	bl	8004642 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800589a:	2001      	movs	r0, #1
 800589c:	f7fe ff1c 	bl	80046d8 <SX1276Read>
 80058a0:	23f8      	movs	r3, #248	@ 0xf8
 80058a2:	4398      	bics	r0, r3
 80058a4:	d104      	bne.n	80058b0 <SX1276Send+0xf4>
                SX1276SetStby( );
 80058a6:	f7fe ffe5 	bl	8004874 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 80058aa:	2001      	movs	r0, #1
 80058ac:	f7fb fd20 	bl	80012f0 <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 80058b0:	0031      	movs	r1, r6
 80058b2:	002a      	movs	r2, r5
 80058b4:	2000      	movs	r0, #0
 80058b6:	f7fe feac 	bl	8004612 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80058ba:	6da6      	ldr	r6, [r4, #88]	@ 0x58
        break;
 80058bc:	e78a      	b.n	80057d4 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80058be:	f7fe ff0b 	bl	80046d8 <SX1276Read>
 80058c2:	2341      	movs	r3, #65	@ 0x41
 80058c4:	4398      	bics	r0, r3
 80058c6:	4305      	orrs	r5, r0
 80058c8:	b2e9      	uxtb	r1, r5
 80058ca:	2033      	movs	r0, #51	@ 0x33
 80058cc:	f7fe feb9 	bl	8004642 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80058d0:	211d      	movs	r1, #29
 80058d2:	e7cf      	b.n	8005874 <SX1276Send+0xb8>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80058d4:	2040      	movs	r0, #64	@ 0x40
 80058d6:	f7fe feff 	bl	80046d8 <SX1276Read>
 80058da:	2103      	movs	r1, #3
 80058dc:	4001      	ands	r1, r0
 80058de:	2040      	movs	r0, #64	@ 0x40
 80058e0:	f7fe feaf 	bl	8004642 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80058e4:	2041      	movs	r0, #65	@ 0x41
 80058e6:	f7fe fef7 	bl	80046d8 <SX1276Read>
 80058ea:	213e      	movs	r1, #62	@ 0x3e
 80058ec:	4001      	ands	r1, r0
 80058ee:	2041      	movs	r0, #65	@ 0x41
 80058f0:	f7fe fea7 	bl	8004642 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80058f4:	2035      	movs	r0, #53	@ 0x35
 80058f6:	f7fe feef 	bl	80046d8 <SX1276Read>
 80058fa:	233f      	movs	r3, #63	@ 0x3f
 80058fc:	4018      	ands	r0, r3
 80058fe:	0023      	movs	r3, r4
 8005900:	333e      	adds	r3, #62	@ 0x3e
 8005902:	7018      	strb	r0, [r3, #0]
        break;
 8005904:	e776      	b.n	80057f4 <SX1276Send+0x38>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005906:	0023      	movs	r3, r4
 8005908:	3353      	adds	r3, #83	@ 0x53
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00e      	beq.n	800592e <SX1276Send+0x172>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8005910:	21f5      	movs	r1, #245	@ 0xf5
 8005912:	2011      	movs	r0, #17
 8005914:	f7fe fe95 	bl	8004642 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8005918:	2040      	movs	r0, #64	@ 0x40
 800591a:	f7fe fedd 	bl	80046d8 <SX1276Read>
 800591e:	2333      	movs	r3, #51	@ 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8005920:	0001      	movs	r1, r0
 8005922:	2040      	movs	r0, #64	@ 0x40
 8005924:	4019      	ands	r1, r3
 8005926:	4301      	orrs	r1, r0
 8005928:	f7fe fe8b 	bl	8004642 <SX1276Write>
 800592c:	e762      	b.n	80057f4 <SX1276Send+0x38>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800592e:	21f7      	movs	r1, #247	@ 0xf7
 8005930:	2011      	movs	r0, #17
 8005932:	f7fe fe86 	bl	8004642 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8005936:	2040      	movs	r0, #64	@ 0x40
 8005938:	f7fe fece 	bl	80046d8 <SX1276Read>
 800593c:	233f      	movs	r3, #63	@ 0x3f
 800593e:	e7ef      	b.n	8005920 <SX1276Send+0x164>
 8005940:	20000464 	.word	0x20000464
 8005944:	200004e4 	.word	0x200004e4
 8005948:	200004e8 	.word	0x200004e8
 800594c:	20000518 	.word	0x20000518

08005950 <SX1276OnDio1Irq>:
{
 8005950:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8005952:	4c39      	ldr	r4, [pc, #228]	@ (8005a38 <SX1276OnDio1Irq+0xe8>)
 8005954:	7925      	ldrb	r5, [r4, #4]
 8005956:	2d01      	cmp	r5, #1
 8005958:	d002      	beq.n	8005960 <SX1276OnDio1Irq+0x10>
 800595a:	2d02      	cmp	r5, #2
 800595c:	d050      	beq.n	8005a00 <SX1276OnDio1Irq+0xb0>
}
 800595e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8005960:	7963      	ldrb	r3, [r4, #5]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d017      	beq.n	8005996 <SX1276OnDio1Irq+0x46>
 8005966:	2b01      	cmp	r3, #1
 8005968:	d1f9      	bne.n	800595e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 800596a:	f7fc f92b 	bl	8001bc4 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800596e:	2800      	cmp	r0, #0
 8005970:	d0f5      	beq.n	800595e <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 8005972:	4832      	ldr	r0, [pc, #200]	@ (8005a3c <SX1276OnDio1Irq+0xec>)
 8005974:	4d32      	ldr	r5, [pc, #200]	@ (8005a40 <SX1276OnDio1Irq+0xf0>)
 8005976:	f000 fb81 	bl	800607c <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800597a:	2180      	movs	r1, #128	@ 0x80
 800597c:	2012      	movs	r0, #18
 800597e:	f7fe fe60 	bl	8004642 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8005982:	2300      	movs	r3, #0
 8005984:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005986:	682b      	ldr	r3, [r5, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0e8      	beq.n	800595e <SX1276OnDio1Irq+0xe>
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0e5      	beq.n	800595e <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 8005992:	4798      	blx	r3
 8005994:	e7e3      	b.n	800595e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8005996:	f7fc f915 	bl	8001bc4 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800599a:	2800      	cmp	r0, #0
 800599c:	d0df      	beq.n	800595e <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800599e:	0020      	movs	r0, r4
 80059a0:	3068      	adds	r0, #104	@ 0x68
 80059a2:	f000 fb6b 	bl	800607c <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80059a6:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 80059a8:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 80059aa:	4313      	orrs	r3, r2
 80059ac:	d108      	bne.n	80059c0 <SX1276OnDio1Irq+0x70>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80059ae:	1ce3      	adds	r3, r4, #3
 80059b0:	7fd8      	ldrb	r0, [r3, #31]
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d119      	bne.n	80059ea <SX1276OnDio1Irq+0x9a>
    SX1276ReadBuffer( 0, buffer, size );
 80059b6:	0021      	movs	r1, r4
 80059b8:	002a      	movs	r2, r5
 80059ba:	313a      	adds	r1, #58	@ 0x3a
 80059bc:	f7fe fe74 	bl	80046a8 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80059c0:	0025      	movs	r5, r4
 80059c2:	353e      	adds	r5, #62	@ 0x3e
 80059c4:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
 80059c6:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80059c8:	491e      	ldr	r1, [pc, #120]	@ (8005a44 <SX1276OnDio1Irq+0xf4>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80059ca:	782a      	ldrb	r2, [r5, #0]
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80059cc:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80059ce:	1a1b      	subs	r3, r3, r0
 80059d0:	4293      	cmp	r3, r2
 80059d2:	db0f      	blt.n	80059f4 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80059d4:	3a01      	subs	r2, #1
    SX1276ReadBuffer( 0, buffer, size );
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	2000      	movs	r0, #0
 80059da:	f7fe fe65 	bl	80046a8 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 80059de:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 80059e0:	782b      	ldrb	r3, [r5, #0]
 80059e2:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80059e4:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80059e6:	87a3      	strh	r3, [r4, #60]	@ 0x3c
}
 80059e8:	e7b9      	b.n	800595e <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80059ea:	2032      	movs	r0, #50	@ 0x32
 80059ec:	f7fe fe74 	bl	80046d8 <SX1276Read>
 80059f0:	8760      	strh	r0, [r4, #58]	@ 0x3a
 80059f2:	e7e5      	b.n	80059c0 <SX1276OnDio1Irq+0x70>
    SX1276ReadBuffer( 0, buffer, size );
 80059f4:	2000      	movs	r0, #0
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	f7fe fe56 	bl	80046a8 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80059fc:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 80059fe:	e7f2      	b.n	80059e6 <SX1276OnDio1Irq+0x96>
            switch( SX1276.Settings.Modem )
 8005a00:	7965      	ldrb	r5, [r4, #5]
 8005a02:	2d00      	cmp	r5, #0
 8005a04:	d1ab      	bne.n	800595e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 8005a06:	f7fc f8dd 	bl	8001bc4 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8005a0a:	2801      	cmp	r0, #1
 8005a0c:	d0a7      	beq.n	800595e <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8005a0e:	0026      	movs	r6, r4
 8005a10:	363f      	adds	r6, #63	@ 0x3f
 8005a12:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
 8005a14:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8005a16:	490b      	ldr	r1, [pc, #44]	@ (8005a44 <SX1276OnDio1Irq+0xf4>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8005a18:	7832      	ldrb	r2, [r6, #0]
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8005a1a:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8005a1c:	1a1b      	subs	r3, r3, r0
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	dd05      	ble.n	8005a2e <SX1276OnDio1Irq+0xde>
    SX1276WriteBuffer( 0, buffer, size );
 8005a22:	0028      	movs	r0, r5
 8005a24:	f7fe fdf5 	bl	8004612 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8005a28:	7833      	ldrb	r3, [r6, #0]
 8005a2a:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8005a2c:	e7da      	b.n	80059e4 <SX1276OnDio1Irq+0x94>
    SX1276WriteBuffer( 0, buffer, size );
 8005a2e:	0028      	movs	r0, r5
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	f7fe fdee 	bl	8004612 <SX1276WriteBuffer>
 8005a36:	e7e1      	b.n	80059fc <SX1276OnDio1Irq+0xac>
 8005a38:	20000464 	.word	0x20000464
 8005a3c:	200004e8 	.word	0x200004e8
 8005a40:	200004e4 	.word	0x200004e4
 8005a44:	20000518 	.word	0x20000518

08005a48 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8005a48:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a4a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005a4e:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8005a50:	4b16      	ldr	r3, [pc, #88]	@ (8005aac <TRACE_AllocateBufer+0x64>)
 8005a52:	8a5d      	ldrh	r5, [r3, #18]
 8005a54:	8a1a      	ldrh	r2, [r3, #16]
 8005a56:	4295      	cmp	r5, r2
 8005a58:	d114      	bne.n	8005a84 <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8005a5a:	2280      	movs	r2, #128	@ 0x80
 8005a5c:	0092      	lsls	r2, r2, #2
 8005a5e:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8005a60:	b292      	uxth	r2, r2
 8005a62:	4290      	cmp	r0, r2
 8005a64:	d306      	bcc.n	8005a74 <TRACE_AllocateBufer+0x2c>
 8005a66:	4285      	cmp	r5, r0
 8005a68:	d916      	bls.n	8005a98 <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8005a6e:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8005a70:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8005a72:	825a      	strh	r2, [r3, #18]
#endif
  }

  if(freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8005a74:	8a5a      	ldrh	r2, [r3, #18]
 8005a76:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8005a78:	1812      	adds	r2, r2, r0
 8005a7a:	05d2      	lsls	r2, r2, #23
 8005a7c:	0dd2      	lsrs	r2, r2, #23
    ret = 0;
 8005a7e:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8005a80:	825a      	strh	r2, [r3, #18]
    ret = 0;
 8005a82:	e00b      	b.n	8005a9c <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8005a84:	4295      	cmp	r5, r2
 8005a86:	d90c      	bls.n	8005aa2 <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8005a88:	2680      	movs	r6, #128	@ 0x80
 8005a8a:	00b6      	lsls	r6, r6, #2
 8005a8c:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8005a8e:	b2b6      	uxth	r6, r6
 8005a90:	4286      	cmp	r6, r0
 8005a92:	d8ef      	bhi.n	8005a74 <TRACE_AllocateBufer+0x2c>
 8005a94:	4282      	cmp	r2, r0
 8005a96:	d8e8      	bhi.n	8005a6a <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 8005a98:	2001      	movs	r0, #1
 8005a9a:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9c:	f384 8810 	msr	PRIMASK, r4
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8005aa0:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8005aa2:	1b52      	subs	r2, r2, r5
  if(freesize > Size)
 8005aa4:	b292      	uxth	r2, r2
 8005aa6:	4282      	cmp	r2, r0
 8005aa8:	d8e4      	bhi.n	8005a74 <TRACE_AllocateBufer+0x2c>
 8005aaa:	e7f5      	b.n	8005a98 <TRACE_AllocateBufer+0x50>
 8005aac:	20000618 	.word	0x20000618

08005ab0 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005ab4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8005ab6:	4a03      	ldr	r2, [pc, #12]	@ (8005ac4 <TRACE_Lock+0x14>)
 8005ab8:	8ad3      	ldrh	r3, [r2, #22]
 8005aba:	3301      	adds	r3, #1
 8005abc:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005abe:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8005ac2:	4770      	bx	lr
 8005ac4:	20000618 	.word	0x20000618

08005ac8 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005acc:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8005ace:	4a03      	ldr	r2, [pc, #12]	@ (8005adc <TRACE_UnLock+0x14>)
 8005ad0:	8ad3      	ldrh	r3, [r2, #22]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8005ada:	4770      	bx	lr
 8005adc:	20000618 	.word	0x20000618

08005ae0 <UTIL_ADV_TRACE_Init>:
{
 8005ae0:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8005ae2:	2218      	movs	r2, #24
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4807      	ldr	r0, [pc, #28]	@ (8005b04 <UTIL_ADV_TRACE_Init+0x24>)
 8005ae8:	f000 f980 	bl	8005dec <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8005aec:	2280      	movs	r2, #128	@ 0x80
 8005aee:	2100      	movs	r1, #0
 8005af0:	4805      	ldr	r0, [pc, #20]	@ (8005b08 <UTIL_ADV_TRACE_Init+0x28>)
 8005af2:	0092      	lsls	r2, r2, #2
 8005af4:	f000 f97a 	bl	8005dec <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8005af8:	4b04      	ldr	r3, [pc, #16]	@ (8005b0c <UTIL_ADV_TRACE_Init+0x2c>)
 8005afa:	4805      	ldr	r0, [pc, #20]	@ (8005b10 <UTIL_ADV_TRACE_Init+0x30>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4798      	blx	r3
}
 8005b00:	bd10      	pop	{r4, pc}
 8005b02:	46c0      	nop			@ (mov r8, r8)
 8005b04:	20000618 	.word	0x20000618
 8005b08:	20000730 	.word	0x20000730
 8005b0c:	080065dc 	.word	0x080065dc
 8005b10:	08005c79 	.word	0x08005c79

08005b14 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8005b14:	4b01      	ldr	r3, [pc, #4]	@ (8005b1c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8005b16:	6058      	str	r0, [r3, #4]
}
 8005b18:	4770      	bx	lr
 8005b1a:	46c0      	nop			@ (mov r8, r8)
 8005b1c:	20000618 	.word	0x20000618

08005b20 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8005b20:	4b01      	ldr	r3, [pc, #4]	@ (8005b28 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8005b22:	7218      	strb	r0, [r3, #8]
}
 8005b24:	4770      	bx	lr
 8005b26:	46c0      	nop			@ (mov r8, r8)
 8005b28:	20000618 	.word	0x20000618

08005b2c <TRACE_Send>:
{
 8005b2c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b2e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005b32:	b672      	cpsid	i
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8005b34:	4c1b      	ldr	r4, [pc, #108]	@ (8005ba4 <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 8005b36:	8ae6      	ldrh	r6, [r4, #22]
 8005b38:	2e00      	cmp	r6, #0
 8005b3a:	d12f      	bne.n	8005b9c <TRACE_Send+0x70>
    TRACE_Lock();
 8005b3c:	f7ff ffb8 	bl	8005ab0 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8005b40:	8a21      	ldrh	r1, [r4, #16]
 8005b42:	8a62      	ldrh	r2, [r4, #18]
 8005b44:	4291      	cmp	r1, r2
 8005b46:	d027      	beq.n	8005b98 <TRACE_Send+0x6c>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8005b48:	78a3      	ldrb	r3, [r4, #2]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d110      	bne.n	8005b70 <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8005b4e:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8005b50:	8026      	strh	r6, [r4, #0]
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8005b52:	1a5b      	subs	r3, r3, r1
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8005b54:	2102      	movs	r1, #2
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8005b5a:	70a1      	strb	r1, [r4, #2]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d109      	bne.n	8005b74 <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8005b60:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8005b62:	8223      	strh	r3, [r4, #16]
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8005b64:	8a21      	ldrh	r1, [r4, #16]
 8005b66:	428a      	cmp	r2, r1
 8005b68:	d911      	bls.n	8005b8e <TRACE_Send+0x62>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8005b6a:	1a52      	subs	r2, r2, r1
 8005b6c:	82a2      	strh	r2, [r4, #20]
 8005b6e:	e001      	b.n	8005b74 <TRACE_Send+0x48>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f7      	beq.n	8005b64 <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8005b74:	8a26      	ldrh	r6, [r4, #16]
 8005b76:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba8 <TRACE_Send+0x7c>)
 8005b78:	18f6      	adds	r6, r6, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b7a:	f385 8810 	msr	PRIMASK, r5
      UTIL_ADV_TRACE_PreSendHook();
 8005b7e:	f7fb fba5 	bl	80012cc <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8005b82:	4b0a      	ldr	r3, [pc, #40]	@ (8005bac <TRACE_Send+0x80>)
 8005b84:	0030      	movs	r0, r6
 8005b86:	8aa1      	ldrh	r1, [r4, #20]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	4798      	blx	r3
}
 8005b8c:	bd70      	pop	{r4, r5, r6, pc}
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8005b8e:	2380      	movs	r3, #128	@ 0x80
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	1a5b      	subs	r3, r3, r1
 8005b94:	82a3      	strh	r3, [r4, #20]
 8005b96:	e7ed      	b.n	8005b74 <TRACE_Send+0x48>
      TRACE_UnLock();
 8005b98:	f7ff ff96 	bl	8005ac8 <TRACE_UnLock>
 8005b9c:	f385 8810 	msr	PRIMASK, r5
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	e7f3      	b.n	8005b8c <TRACE_Send+0x60>
 8005ba4:	20000618 	.word	0x20000618
 8005ba8:	20000730 	.word	0x20000730
 8005bac:	080065dc 	.word	0x080065dc

08005bb0 <UTIL_ADV_TRACE_COND_FSend>:
{
 8005bb0:	b408      	push	{r3}
 8005bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb4:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	466c      	mov	r4, sp
 8005bba:	8023      	strh	r3, [r4, #0]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8005bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8005c6c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8005bbe:	7a1c      	ldrb	r4, [r3, #8]
 8005bc0:	4284      	cmp	r4, r0
 8005bc2:	d34f      	bcc.n	8005c64 <UTIL_ADV_TRACE_COND_FSend+0xb4>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8005bc4:	68d8      	ldr	r0, [r3, #12]
 8005bc6:	4008      	ands	r0, r1
 8005bc8:	4288      	cmp	r0, r1
 8005bca:	d14d      	bne.n	8005c68 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d004      	beq.n	8005bdc <UTIL_ADV_TRACE_COND_FSend+0x2c>
 8005bd2:	2a00      	cmp	r2, #0
 8005bd4:	d002      	beq.n	8005bdc <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8005bd6:	4669      	mov	r1, sp
 8005bd8:	a802      	add	r0, sp, #8
 8005bda:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8005bdc:	2180      	movs	r1, #128	@ 0x80
  va_start( vaArgs, strFormat);
 8005bde:	ab0c      	add	r3, sp, #48	@ 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8005be0:	0049      	lsls	r1, r1, #1
 8005be2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005be4:	4822      	ldr	r0, [pc, #136]	@ (8005c70 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
  va_start( vaArgs, strFormat);
 8005be6:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8005be8:	f000 fb38 	bl	800625c <tiny_vsnprintf_like>
 8005bec:	0005      	movs	r5, r0
  TRACE_Lock();
 8005bee:	f7ff ff5f 	bl	8005ab0 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8005bf2:	466b      	mov	r3, sp
 8005bf4:	8818      	ldrh	r0, [r3, #0]
 8005bf6:	1c9c      	adds	r4, r3, #2
 8005bf8:	1940      	adds	r0, r0, r5
 8005bfa:	0021      	movs	r1, r4
 8005bfc:	b280      	uxth	r0, r0
 8005bfe:	f7ff ff23 	bl	8005a48 <TRACE_AllocateBufer>
 8005c02:	3001      	adds	r0, #1
 8005c04:	d029      	beq.n	8005c5a <UTIL_ADV_TRACE_COND_FSend+0xaa>
    for (idx = 0u; idx < timestamp_size; idx++)
 8005c06:	466b      	mov	r3, sp
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8005c08:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 8005c0a:	881a      	ldrh	r2, [r3, #0]
 8005c0c:	2300      	movs	r3, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8005c0e:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 8005c10:	001e      	movs	r6, r3
 8005c12:	8825      	ldrh	r5, [r4, #0]
 8005c14:	4817      	ldr	r0, [pc, #92]	@ (8005c74 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8005c16:	b29f      	uxth	r7, r3
 8005c18:	19e9      	adds	r1, r5, r7
 8005c1a:	b289      	uxth	r1, r1
 8005c1c:	42ba      	cmp	r2, r7
 8005c1e:	d814      	bhi.n	8005c4a <UTIL_ADV_TRACE_COND_FSend+0x9a>
 8005c20:	2e00      	cmp	r6, #0
 8005c22:	d001      	beq.n	8005c28 <UTIL_ADV_TRACE_COND_FSend+0x78>
 8005c24:	1952      	adds	r2, r2, r5
 8005c26:	8022      	strh	r2, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8005c28:	2180      	movs	r1, #128	@ 0x80
 8005c2a:	8823      	ldrh	r3, [r4, #0]
 8005c2c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005c2e:	0049      	lsls	r1, r1, #1
 8005c30:	18c0      	adds	r0, r0, r3
 8005c32:	9b01      	ldr	r3, [sp, #4]
 8005c34:	f000 fb12 	bl	800625c <tiny_vsnprintf_like>
    TRACE_UnLock();
 8005c38:	f7ff ff46 	bl	8005ac8 <TRACE_UnLock>
    return TRACE_Send();
 8005c3c:	f7ff ff76 	bl	8005b2c <TRACE_Send>
}
 8005c40:	b006      	add	sp, #24
 8005c42:	bcf0      	pop	{r4, r5, r6, r7}
 8005c44:	bc08      	pop	{r3}
 8005c46:	b001      	add	sp, #4
 8005c48:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8005c4a:	466e      	mov	r6, sp
 8005c4c:	2708      	movs	r7, #8
 8005c4e:	19f6      	adds	r6, r6, r7
 8005c50:	5cf6      	ldrb	r6, [r6, r3]
 8005c52:	3301      	adds	r3, #1
 8005c54:	5446      	strb	r6, [r0, r1]
 8005c56:	4666      	mov	r6, ip
 8005c58:	e7dd      	b.n	8005c16 <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 8005c5a:	f7ff ff35 	bl	8005ac8 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8005c5e:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 8005c60:	4240      	negs	r0, r0
 8005c62:	e7ed      	b.n	8005c40 <UTIL_ADV_TRACE_COND_FSend+0x90>
    return UTIL_ADV_TRACE_GIVEUP;
 8005c64:	2005      	movs	r0, #5
 8005c66:	e7fb      	b.n	8005c60 <UTIL_ADV_TRACE_COND_FSend+0xb0>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8005c68:	2006      	movs	r0, #6
 8005c6a:	e7f9      	b.n	8005c60 <UTIL_ADV_TRACE_COND_FSend+0xb0>
 8005c6c:	20000618 	.word	0x20000618
 8005c70:	20000630 	.word	0x20000630
 8005c74:	20000730 	.word	0x20000730

08005c78 <TRACE_TxCpltCallback>:
{
 8005c78:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c7a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005c7e:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8005c80:	4b1f      	ldr	r3, [pc, #124]	@ (8005d00 <TRACE_TxCpltCallback+0x88>)
 8005c82:	789a      	ldrb	r2, [r3, #2]
 8005c84:	2a02      	cmp	r2, #2
 8005c86:	d11d      	bne.n	8005cc4 <TRACE_TxCpltCallback+0x4c>
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8005c88:	2200      	movs	r2, #0
 8005c8a:	709a      	strb	r2, [r3, #2]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8005c8c:	8a5c      	ldrh	r4, [r3, #18]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8005c8e:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8005c90:	4294      	cmp	r4, r2
 8005c92:	d02e      	beq.n	8005cf2 <TRACE_TxCpltCallback+0x7a>
 8005c94:	8ad8      	ldrh	r0, [r3, #22]
 8005c96:	2801      	cmp	r0, #1
 8005c98:	d12b      	bne.n	8005cf2 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8005c9a:	7898      	ldrb	r0, [r3, #2]
 8005c9c:	2801      	cmp	r0, #1
 8005c9e:	d117      	bne.n	8005cd0 <TRACE_TxCpltCallback+0x58>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8005ca0:	8818      	ldrh	r0, [r3, #0]
 8005ca2:	1a82      	subs	r2, r0, r2
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8005ca4:	2002      	movs	r0, #2
 8005ca6:	7098      	strb	r0, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8005ca8:	2000      	movs	r0, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8005caa:	b292      	uxth	r2, r2
 8005cac:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8005cae:	8018      	strh	r0, [r3, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8005cb0:	4282      	cmp	r2, r0
 8005cb2:	d10f      	bne.n	8005cd4 <TRACE_TxCpltCallback+0x5c>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8005cb4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8005cb6:	821a      	strh	r2, [r3, #16]
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8005cb8:	8a18      	ldrh	r0, [r3, #16]
 8005cba:	4284      	cmp	r4, r0
 8005cbc:	d914      	bls.n	8005ce8 <TRACE_TxCpltCallback+0x70>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8005cbe:	1a24      	subs	r4, r4, r0
 8005cc0:	829c      	strh	r4, [r3, #20]
 8005cc2:	e007      	b.n	8005cd4 <TRACE_TxCpltCallback+0x5c>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8005cc4:	8a1a      	ldrh	r2, [r3, #16]
 8005cc6:	8a98      	ldrh	r0, [r3, #20]
 8005cc8:	1812      	adds	r2, r2, r0
 8005cca:	05d2      	lsls	r2, r2, #23
 8005ccc:	0dd2      	lsrs	r2, r2, #23
 8005cce:	e7dd      	b.n	8005c8c <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d0f1      	beq.n	8005cb8 <TRACE_TxCpltCallback+0x40>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8005cd4:	8a18      	ldrh	r0, [r3, #16]
 8005cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8005d04 <TRACE_TxCpltCallback+0x8c>)
 8005cd8:	1880      	adds	r0, r0, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cda:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8005cde:	8a99      	ldrh	r1, [r3, #20]
 8005ce0:	4b09      	ldr	r3, [pc, #36]	@ (8005d08 <TRACE_TxCpltCallback+0x90>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	4798      	blx	r3
}
 8005ce6:	bd10      	pop	{r4, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8005ce8:	2280      	movs	r2, #128	@ 0x80
 8005cea:	0092      	lsls	r2, r2, #2
 8005cec:	1a12      	subs	r2, r2, r0
 8005cee:	829a      	strh	r2, [r3, #20]
 8005cf0:	e7f0      	b.n	8005cd4 <TRACE_TxCpltCallback+0x5c>
 8005cf2:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8005cf6:	f7fb faef 	bl	80012d8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8005cfa:	f7ff fee5 	bl	8005ac8 <TRACE_UnLock>
}
 8005cfe:	e7f2      	b.n	8005ce6 <TRACE_TxCpltCallback+0x6e>
 8005d00:	20000618 	.word	0x20000618
 8005d04:	20000730 	.word	0x20000730
 8005d08:	080065dc 	.word	0x080065dc

08005d0c <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	4b02      	ldr	r3, [pc, #8]	@ (8005d18 <UTIL_LPM_Init+0xc>)
 8005d10:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8005d12:	605a      	str	r2, [r3, #4]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8005d14:	4770      	bx	lr
 8005d16:	46c0      	nop			@ (mov r8, r8)
 8005d18:	20000930 	.word	0x20000930

08005d1c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8005d1c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d1e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005d22:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8005d24:	2900      	cmp	r1, #0
 8005d26:	d008      	beq.n	8005d3a <UTIL_LPM_SetStopMode+0x1e>
 8005d28:	2901      	cmp	r1, #1
 8005d2a:	d103      	bne.n	8005d34 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8005d2c:	4a05      	ldr	r2, [pc, #20]	@ (8005d44 <UTIL_LPM_SetStopMode+0x28>)
 8005d2e:	6813      	ldr	r3, [r2, #0]
 8005d30:	4303      	orrs	r3, r0
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8005d32:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d34:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8005d38:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 8005d3a:	4a02      	ldr	r2, [pc, #8]	@ (8005d44 <UTIL_LPM_SetStopMode+0x28>)
 8005d3c:	6813      	ldr	r3, [r2, #0]
 8005d3e:	4383      	bics	r3, r0
 8005d40:	e7f7      	b.n	8005d32 <UTIL_LPM_SetStopMode+0x16>
 8005d42:	46c0      	nop			@ (mov r8, r8)
 8005d44:	20000930 	.word	0x20000930

08005d48 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8005d48:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d4a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005d4e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8005d50:	2900      	cmp	r1, #0
 8005d52:	d008      	beq.n	8005d66 <UTIL_LPM_SetOffMode+0x1e>
 8005d54:	2901      	cmp	r1, #1
 8005d56:	d103      	bne.n	8005d60 <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8005d58:	4a05      	ldr	r2, [pc, #20]	@ (8005d70 <UTIL_LPM_SetOffMode+0x28>)
 8005d5a:	6853      	ldr	r3, [r2, #4]
 8005d5c:	4303      	orrs	r3, r0
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8005d5e:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d60:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8005d64:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 8005d66:	4a02      	ldr	r2, [pc, #8]	@ (8005d70 <UTIL_LPM_SetOffMode+0x28>)
 8005d68:	6853      	ldr	r3, [r2, #4]
 8005d6a:	4383      	bics	r3, r0
 8005d6c:	e7f7      	b.n	8005d5e <UTIL_LPM_SetOffMode+0x16>
 8005d6e:	46c0      	nop			@ (mov r8, r8)
 8005d70:	20000930 	.word	0x20000930

08005d74 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d74:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005d78:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 8005d7a:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8005d7c:	4b05      	ldr	r3, [pc, #20]	@ (8005d94 <UTIL_LPM_GetMode+0x20>)
 8005d7e:	6819      	ldr	r1, [r3, #0]
 8005d80:	4281      	cmp	r1, r0
 8005d82:	d103      	bne.n	8005d8c <UTIL_LPM_GetMode+0x18>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8005d84:	6858      	ldr	r0, [r3, #4]
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 8005d86:	4243      	negs	r3, r0
 8005d88:	4158      	adcs	r0, r3
 8005d8a:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d8c:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 8005d90:	4770      	bx	lr
 8005d92:	46c0      	nop			@ (mov r8, r8)
 8005d94:	20000930 	.word	0x20000930

08005d98 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 8005d98:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d9a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005d9e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8005da0:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd0 <UTIL_LPM_EnterLowPower+0x38>)
 8005da2:	4c0c      	ldr	r4, [pc, #48]	@ (8005dd4 <UTIL_LPM_EnterLowPower+0x3c>)
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	2a00      	cmp	r2, #0
 8005da8:	d006      	beq.n	8005db8 <UTIL_LPM_EnterLowPower+0x20>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8005dae:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 8005db0:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db2:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8005db6:	bd70      	pop	{r4, r5, r6, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <UTIL_LPM_EnterLowPower+0x2e>
        UTIL_PowerDriver.EnterStopMode( );
 8005dbe:	68a3      	ldr	r3, [r4, #8]
 8005dc0:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	e7f4      	b.n	8005db0 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8005dc6:	6923      	ldr	r3, [r4, #16]
 8005dc8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8005dca:	6963      	ldr	r3, [r4, #20]
 8005dcc:	e7f0      	b.n	8005db0 <UTIL_LPM_EnterLowPower+0x18>
 8005dce:	46c0      	nop			@ (mov r8, r8)
 8005dd0:	20000930 	.word	0x20000930
 8005dd4:	080065c4 	.word	0x080065c4

08005dd8 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8005dd8:	2300      	movs	r3, #0
{
 8005dda:	b510      	push	{r4, lr}
  while( size-- )
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d100      	bne.n	8005de2 <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 8005de0:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 8005de2:	5ccc      	ldrb	r4, [r1, r3]
 8005de4:	54c4      	strb	r4, [r0, r3]
 8005de6:	3301      	adds	r3, #1
 8005de8:	e7f8      	b.n	8005ddc <UTIL_MEM_cpy_8+0x4>
	...

08005dec <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8005dec:	4b04      	ldr	r3, [pc, #16]	@ (8005e00 <UTIL_MEM_set_8+0x14>)
 8005dee:	3a01      	subs	r2, #1
 8005df0:	b292      	uxth	r2, r2
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d100      	bne.n	8005df8 <UTIL_MEM_set_8+0xc>
  {
    *dst8++ = value;
  }
}
 8005df6:	4770      	bx	lr
    *dst8++ = value;
 8005df8:	7001      	strb	r1, [r0, #0]
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	e7f7      	b.n	8005dee <UTIL_MEM_set_8+0x2>
 8005dfe:	46c0      	nop			@ (mov r8, r8)
 8005e00:	0000ffff 	.word	0x0000ffff

08005e04 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8005e04:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e06:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005e0a:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8005e0c:	4b05      	ldr	r3, [pc, #20]	@ (8005e24 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8005e0e:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4302      	orrs	r2, r0
 8005e14:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8005e16:	185b      	adds	r3, r3, r1
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	4302      	orrs	r2, r0
 8005e1c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e1e:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8005e22:	bd10      	pop	{r4, pc}
 8005e24:	20000938 	.word	0x20000938

08005e28 <UTIL_SEQ_PreIdle>:
__WEAK void UTIL_SEQ_Idle( void )
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
 8005e28:	4770      	bx	lr

08005e2a <UTIL_SEQ_PostIdle>:
   * Unless specified by the application, there is nothing to be done
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
 8005e2a:	4770      	bx	lr

08005e2c <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8005e2c:	2280      	movs	r2, #128	@ 0x80
  uint8_t n = 0U;
 8005e2e:	2300      	movs	r3, #0
  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8005e30:	0252      	lsls	r2, r2, #9
 8005e32:	4290      	cmp	r0, r2
 8005e34:	d201      	bcs.n	8005e3a <SEQ_BitPosition+0xe>
 8005e36:	0400      	lsls	r0, r0, #16
 8005e38:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8005e3a:	2280      	movs	r2, #128	@ 0x80
 8005e3c:	0452      	lsls	r2, r2, #17
 8005e3e:	4290      	cmp	r0, r2
 8005e40:	d202      	bcs.n	8005e48 <SEQ_BitPosition+0x1c>
 8005e42:	3308      	adds	r3, #8
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8005e48:	2280      	movs	r2, #128	@ 0x80
 8005e4a:	0552      	lsls	r2, r2, #21
 8005e4c:	4290      	cmp	r0, r2
 8005e4e:	d202      	bcs.n	8005e56 <SEQ_BitPosition+0x2a>
 8005e50:	3304      	adds	r3, #4
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 8005e56:	221f      	movs	r2, #31
 8005e58:	1ad3      	subs	r3, r2, r3
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8005e5a:	4a03      	ldr	r2, [pc, #12]	@ (8005e68 <SEQ_BitPosition+0x3c>)
 8005e5c:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 8005e5e:	5c10      	ldrb	r0, [r2, r0]
 8005e60:	1a18      	subs	r0, r3, r0
 8005e62:	b2c0      	uxtb	r0, r0
}
 8005e64:	4770      	bx	lr
 8005e66:	46c0      	nop			@ (mov r8, r8)
 8005e68:	080067b8 	.word	0x080067b8

08005e6c <UTIL_SEQ_Run>:
{
 8005e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 8005e6e:	4e2f      	ldr	r6, [pc, #188]	@ (8005f2c <UTIL_SEQ_Run+0xc0>)
 8005e70:	6873      	ldr	r3, [r6, #4]
  SuperMask &= Mask_bm;
 8005e72:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 8005e74:	9301      	str	r3, [sp, #4]
  SuperMask &= Mask_bm;
 8005e76:	6070      	str	r0, [r6, #4]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8005e78:	4c2d      	ldr	r4, [pc, #180]	@ (8005f30 <UTIL_SEQ_Run+0xc4>)
 8005e7a:	6831      	ldr	r1, [r6, #0]
 8005e7c:	6822      	ldr	r2, [r4, #0]
 8005e7e:	6873      	ldr	r3, [r6, #4]
 8005e80:	400a      	ands	r2, r1
 8005e82:	4213      	tst	r3, r2
 8005e84:	d037      	beq.n	8005ef6 <UTIL_SEQ_Run+0x8a>
 8005e86:	68a0      	ldr	r0, [r4, #8]
 8005e88:	6862      	ldr	r2, [r4, #4]
 8005e8a:	0005      	movs	r5, r0
 8005e8c:	4015      	ands	r5, r2
 8005e8e:	4210      	tst	r0, r2
 8005e90:	d131      	bne.n	8005ef6 <UTIL_SEQ_Run+0x8a>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8005e92:	6922      	ldr	r2, [r4, #16]
 8005e94:	400b      	ands	r3, r1
 8005e96:	0010      	movs	r0, r2
 8005e98:	4018      	ands	r0, r3
 8005e9a:	421a      	tst	r2, r3
 8005e9c:	d102      	bne.n	8005ea4 <UTIL_SEQ_Run+0x38>
 8005e9e:	2501      	movs	r5, #1
 8005ea0:	69a0      	ldr	r0, [r4, #24]
 8005ea2:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8005ea4:	00ed      	lsls	r5, r5, #3
 8005ea6:	1963      	adds	r3, r4, r5
 8005ea8:	695a      	ldr	r2, [r3, #20]
 8005eaa:	4202      	tst	r2, r0
 8005eac:	d102      	bne.n	8005eb4 <UTIL_SEQ_Run+0x48>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8005eae:	2201      	movs	r2, #1
 8005eb0:	4252      	negs	r2, r2
 8005eb2:	615a      	str	r2, [r3, #20]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8005eb4:	1965      	adds	r5, r4, r5
 8005eb6:	696f      	ldr	r7, [r5, #20]
 8005eb8:	4038      	ands	r0, r7
 8005eba:	f7ff ffb7 	bl	8005e2c <SEQ_BitPosition>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	4083      	lsls	r3, r0
 8005ec2:	439f      	bics	r7, r3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8005ec4:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8005ec6:	616f      	str	r7, [r5, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005ecc:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8005ece:	2201      	movs	r2, #1
 8005ed0:	68e3      	ldr	r3, [r4, #12]
 8005ed2:	409a      	lsls	r2, r3
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	4393      	bics	r3, r2
 8005ed8:	6023      	str	r3, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8005eda:	69a3      	ldr	r3, [r4, #24]
 8005edc:	4393      	bics	r3, r2
 8005ede:	61a3      	str	r3, [r4, #24]
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	4393      	bics	r3, r2
 8005ee4:	6123      	str	r3, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ee6:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8005eea:	68e2      	ldr	r2, [r4, #12]
 8005eec:	4b11      	ldr	r3, [pc, #68]	@ (8005f34 <UTIL_SEQ_Run+0xc8>)
 8005eee:	0092      	lsls	r2, r2, #2
 8005ef0:	58d3      	ldr	r3, [r2, r3]
 8005ef2:	4798      	blx	r3
 8005ef4:	e7c0      	b.n	8005e78 <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	425b      	negs	r3, r3
 8005efa:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 8005efc:	f7ff ff94 	bl	8005e28 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f00:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005f04:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	6832      	ldr	r2, [r6, #0]
 8005f0a:	6861      	ldr	r1, [r4, #4]
 8005f0c:	401a      	ands	r2, r3
 8005f0e:	6873      	ldr	r3, [r6, #4]
 8005f10:	4013      	ands	r3, r2
 8005f12:	68a2      	ldr	r2, [r4, #8]
 8005f14:	400a      	ands	r2, r1
 8005f16:	4313      	orrs	r3, r2
 8005f18:	d101      	bne.n	8005f1e <UTIL_SEQ_Run+0xb2>
	UTIL_SEQ_Idle( );
 8005f1a:	f7fb f9d3 	bl	80012c4 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f1e:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8005f22:	f7ff ff82 	bl	8005e2a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8005f26:	9b01      	ldr	r3, [sp, #4]
 8005f28:	6073      	str	r3, [r6, #4]
}
 8005f2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005f2c:	20000038 	.word	0x20000038
 8005f30:	20000938 	.word	0x20000938
 8005f34:	20000958 	.word	0x20000958

08005f38 <UTIL_SEQ_RegTask>:
{
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f3c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005f40:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8005f42:	f7ff ff73 	bl	8005e2c <SEQ_BitPosition>
 8005f46:	4b03      	ldr	r3, [pc, #12]	@ (8005f54 <UTIL_SEQ_RegTask+0x1c>)
 8005f48:	0080      	lsls	r0, r0, #2
 8005f4a:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f4c:	f385 8810 	msr	PRIMASK, r5
}
 8005f50:	bd70      	pop	{r4, r5, r6, pc}
 8005f52:	46c0      	nop			@ (mov r8, r8)
 8005f54:	20000958 	.word	0x20000958

08005f58 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8005f58:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	466a      	mov	r2, sp
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8005f5e:	4e10      	ldr	r6, [pc, #64]	@ (8005fa0 <SysTimeGet+0x48>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8005f60:	8093      	strh	r3, [r2, #4]
 8005f62:	9300      	str	r3, [sp, #0]
{
 8005f64:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8005f66:	6933      	ldr	r3, [r6, #16]
 8005f68:	a801      	add	r0, sp, #4
 8005f6a:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8005f6c:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8005f6e:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8005f70:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8005f72:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8005f74:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8005f76:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8005f78:	466b      	mov	r3, sp
  c.Seconds = a.Seconds + b.Seconds;
 8005f7a:	9a00      	ldr	r2, [sp, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8005f7c:	889b      	ldrh	r3, [r3, #4]
  c.Seconds = a.Seconds + b.Seconds;
 8005f7e:	1882      	adds	r2, r0, r2
  if( c.SubSeconds >= 1000 )
 8005f80:	20fa      	movs	r0, #250	@ 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8005f82:	195b      	adds	r3, r3, r5
 8005f84:	b299      	uxth	r1, r3
 8005f86:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 8005f88:	0080      	lsls	r0, r0, #2
 8005f8a:	4283      	cmp	r3, r0
 8005f8c:	db03      	blt.n	8005f96 <SysTimeGet+0x3e>
    c.SubSeconds -= 1000;
 8005f8e:	4b05      	ldr	r3, [pc, #20]	@ (8005fa4 <SysTimeGet+0x4c>)
    c.Seconds++;
 8005f90:	3201      	adds	r2, #1
    c.SubSeconds -= 1000;
 8005f92:	18cb      	adds	r3, r1, r3
 8005f94:	b21b      	sxth	r3, r3

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
}
 8005f96:	0020      	movs	r0, r4
  return sysTime;
 8005f98:	6022      	str	r2, [r4, #0]
 8005f9a:	80a3      	strh	r3, [r4, #4]
}
 8005f9c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005f9e:	46c0      	nop			@ (mov r8, r8)
 8005fa0:	08006584 	.word	0x08006584
 8005fa4:	fffffc18 	.word	0xfffffc18

08005fa8 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8005fa8:	2200      	movs	r2, #0
{
 8005faa:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 8005fac:	4b02      	ldr	r3, [pc, #8]	@ (8005fb8 <UTIL_TIMER_Init+0x10>)
 8005fae:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8005fb0:	4b02      	ldr	r3, [pc, #8]	@ (8005fbc <UTIL_TIMER_Init+0x14>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4798      	blx	r3
}
 8005fb6:	bd10      	pop	{r4, pc}
 8005fb8:	200009d8 	.word	0x200009d8
 8005fbc:	08006598 	.word	0x08006598

08005fc0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	0004      	movs	r4, r0
 8005fc4:	0017      	movs	r7, r2
 8005fc6:	0008      	movs	r0, r1
 8005fc8:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8005fca:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 8005fcc:	2c00      	cmp	r4, #0
 8005fce:	d00e      	beq.n	8005fee <UTIL_TIMER_Create+0x2e>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00c      	beq.n	8005fee <UTIL_TIMER_Create+0x2e>
    TimerObject->Timestamp = 0U;
 8005fd4:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8005fd6:	4b07      	ldr	r3, [pc, #28]	@ (8005ff4 <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 8005fd8:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8005fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fdc:	4798      	blx	r3
    TimerObject->argument = Argument;
 8005fde:	9b06      	ldr	r3, [sp, #24]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8005fe0:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8005fe2:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 8005fe4:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8005fe6:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8005fe8:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8005fea:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8005fec:	6165      	str	r5, [r4, #20]
  }
}
 8005fee:	0028      	movs	r0, r5
 8005ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff2:	46c0      	nop			@ (mov r8, r8)
 8005ff4:	08006598 	.word	0x08006598

08005ff8 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8005ff8:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8005ffa:	4c03      	ldr	r4, [pc, #12]	@ (8006008 <UTIL_TIMER_GetCurrentTime+0x10>)
 8005ffc:	69e3      	ldr	r3, [r4, #28]
 8005ffe:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8006000:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006002:	4798      	blx	r3
}
 8006004:	bd10      	pop	{r4, pc}
 8006006:	46c0      	nop			@ (mov r8, r8)
 8006008:	08006598 	.word	0x08006598

0800600c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800600c:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800600e:	4d06      	ldr	r5, [pc, #24]	@ (8006028 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 8006010:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8006012:	69eb      	ldr	r3, [r5, #28]
 8006014:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8006016:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8006018:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800601a:	0030      	movs	r0, r6
 800601c:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800601e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8006020:	1a20      	subs	r0, r4, r0
 8006022:	4798      	blx	r3
}
 8006024:	bd70      	pop	{r4, r5, r6, pc}
 8006026:	46c0      	nop			@ (mov r8, r8)
 8006028:	08006598 	.word	0x08006598

0800602c <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800602c:	4b05      	ldr	r3, [pc, #20]	@ (8006044 <TimerExists+0x18>)
 800602e:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <TimerExists+0xc>
    {
      return true;
    }
    cur = cur->Next;
  }
  return false;
 8006034:	0018      	movs	r0, r3
}
 8006036:	4770      	bx	lr
    if( cur == TimerObject )
 8006038:	4283      	cmp	r3, r0
 800603a:	d001      	beq.n	8006040 <TimerExists+0x14>
    cur = cur->Next;
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	e7f7      	b.n	8006030 <TimerExists+0x4>
      return true;
 8006040:	2001      	movs	r0, #1
 8006042:	e7f8      	b.n	8006036 <TimerExists+0xa>
 8006044:	200009d8 	.word	0x200009d8

08006048 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8006048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800604a:	4e0b      	ldr	r6, [pc, #44]	@ (8006078 <TimerSetTimeout+0x30>)
{
 800604c:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800604e:	6a33      	ldr	r3, [r6, #32]
 8006050:	4798      	blx	r3
  TimerObject->IsPending = 1;
 8006052:	2301      	movs	r3, #1
 8006054:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	69b7      	ldr	r7, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800605a:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800605c:	9301      	str	r3, [sp, #4]
 800605e:	47b8      	blx	r7
 8006060:	9b01      	ldr	r3, [sp, #4]
 8006062:	1940      	adds	r0, r0, r5
 8006064:	4283      	cmp	r3, r0
 8006066:	d202      	bcs.n	800606e <TimerSetTimeout+0x26>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8006068:	47b8      	blx	r7
 800606a:	1940      	adds	r0, r0, r5
 800606c:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800606e:	68b3      	ldr	r3, [r6, #8]
 8006070:	6820      	ldr	r0, [r4, #0]
 8006072:	4798      	blx	r3
}
 8006074:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006076:	46c0      	nop			@ (mov r8, r8)
 8006078:	08006598 	.word	0x08006598

0800607c <UTIL_TIMER_Stop>:
{
 800607c:	0003      	movs	r3, r0
 800607e:	b570      	push	{r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 8006080:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 8006082:	2b00      	cmp	r3, #0
 8006084:	d016      	beq.n	80060b4 <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006086:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800608a:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800608c:	4d11      	ldr	r5, [pc, #68]	@ (80060d4 <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 800608e:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8006090:	682a      	ldr	r2, [r5, #0]
    if(NULL != TimerListHead)
 8006092:	2a00      	cmp	r2, #0
 8006094:	d00b      	beq.n	80060ae <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 8006096:	2100      	movs	r1, #0
 8006098:	7259      	strb	r1, [r3, #9]
          if( TimerListHead->Next != NULL )
 800609a:	6954      	ldr	r4, [r2, #20]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800609c:	4293      	cmp	r3, r2
 800609e:	d10f      	bne.n	80060c0 <UTIL_TIMER_Stop+0x44>
          TimerListHead->IsPending = 0;
 80060a0:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 80060a2:	428c      	cmp	r4, r1
 80060a4:	d007      	beq.n	80060b6 <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 80060a6:	0020      	movs	r0, r4
            TimerListHead = TimerListHead->Next;
 80060a8:	602c      	str	r4, [r5, #0]
            TimerSetTimeout( TimerListHead );
 80060aa:	f7ff ffcd 	bl	8006048 <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ae:	f386 8810 	msr	PRIMASK, r6
}
 80060b2:	2000      	movs	r0, #0
}
 80060b4:	bd70      	pop	{r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 80060b6:	4b08      	ldr	r3, [pc, #32]	@ (80060d8 <UTIL_TIMER_Stop+0x5c>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	4798      	blx	r3
            TimerListHead = NULL;
 80060bc:	602c      	str	r4, [r5, #0]
 80060be:	e7f6      	b.n	80060ae <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 80060c0:	0011      	movs	r1, r2
 80060c2:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 80060c4:	2a00      	cmp	r2, #0
 80060c6:	d0f2      	beq.n	80060ae <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d1f9      	bne.n	80060c0 <UTIL_TIMER_Stop+0x44>
            if( cur->Next != NULL )
 80060cc:	695b      	ldr	r3, [r3, #20]
              prev->Next = cur;
 80060ce:	614b      	str	r3, [r1, #20]
 80060d0:	e7ed      	b.n	80060ae <UTIL_TIMER_Stop+0x32>
 80060d2:	46c0      	nop			@ (mov r8, r8)
 80060d4:	200009d8 	.word	0x200009d8
 80060d8:	08006598 	.word	0x08006598

080060dc <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80060dc:	4b09      	ldr	r3, [pc, #36]	@ (8006104 <TimerInsertTimer+0x28>)
{
 80060de:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80060e0:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80060e2:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 80060e4:	6951      	ldr	r1, [r2, #20]
 80060e6:	2900      	cmp	r1, #0
 80060e8:	d102      	bne.n	80060f0 <TimerInsertTimer+0x14>
        cur = next;
        next = next->Next;
    }
    else
    {
        cur->Next = TimerObject;
 80060ea:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 80060ec:	6141      	str	r1, [r0, #20]

    }
  }
  cur->Next = TimerObject;
  TimerObject->Next = NULL;
}
 80060ee:	bd10      	pop	{r4, pc}
    if( TimerObject->Timestamp  > next->Timestamp )
 80060f0:	6804      	ldr	r4, [r0, #0]
 80060f2:	6819      	ldr	r1, [r3, #0]
 80060f4:	428c      	cmp	r4, r1
 80060f6:	d902      	bls.n	80060fe <TimerInsertTimer+0x22>
        cur = next;
 80060f8:	001a      	movs	r2, r3
        next = next->Next;
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	e7f2      	b.n	80060e4 <TimerInsertTimer+0x8>
 80060fe:	0019      	movs	r1, r3
 8006100:	e7f3      	b.n	80060ea <TimerInsertTimer+0xe>
 8006102:	46c0      	nop			@ (mov r8, r8)
 8006104:	200009d8 	.word	0x200009d8

08006108 <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8006108:	4a05      	ldr	r2, [pc, #20]	@ (8006120 <TimerInsertNewHeadTimer+0x18>)
{
 800610a:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800610c:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 8006112:	2100      	movs	r1, #0
 8006114:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 8006116:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8006118:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800611a:	f7ff ff95 	bl	8006048 <TimerSetTimeout>
}
 800611e:	bd10      	pop	{r4, pc}
 8006120:	200009d8 	.word	0x200009d8

08006124 <UTIL_TIMER_Start>:
{
 8006124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006126:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 8006128:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800612a:	2800      	cmp	r0, #0
 800612c:	d023      	beq.n	8006176 <UTIL_TIMER_Start+0x52>
 800612e:	f7ff ff7d 	bl	800602c <TimerExists>
 8006132:	2800      	cmp	r0, #0
 8006134:	d11f      	bne.n	8006176 <UTIL_TIMER_Start+0x52>
 8006136:	7a65      	ldrb	r5, [r4, #9]
 8006138:	2d00      	cmp	r5, #0
 800613a:	d12b      	bne.n	8006194 <UTIL_TIMER_Start+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800613c:	f3ef 8310 	mrs	r3, PRIMASK
 8006140:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8006142:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8006144:	4e14      	ldr	r6, [pc, #80]	@ (8006198 <UTIL_TIMER_Start+0x74>)
    ticks = TimerObject->ReloadValue;
 8006146:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8006148:	6a33      	ldr	r3, [r6, #32]
 800614a:	4798      	blx	r3
    if( ticks < minValue )
 800614c:	4287      	cmp	r7, r0
 800614e:	d200      	bcs.n	8006152 <UTIL_TIMER_Start+0x2e>
 8006150:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 8006152:	2380      	movs	r3, #128	@ 0x80
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 8006158:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 800615a:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 800615c:	4f0f      	ldr	r7, [pc, #60]	@ (800619c <UTIL_TIMER_Start+0x78>)
    TimerObject->IsReloadStopped = 0U;
 800615e:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <UTIL_TIMER_Start+0x56>
      UTIL_TimerDriver.SetTimerContext();
 8006166:	6933      	ldr	r3, [r6, #16]
 8006168:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 800616a:	0020      	movs	r0, r4
 800616c:	f7ff ffcc 	bl	8006108 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006170:	9b01      	ldr	r3, [sp, #4]
 8006172:	f383 8810 	msr	PRIMASK, r3
}
 8006176:	0028      	movs	r0, r5
 8006178:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800617a:	69b3      	ldr	r3, [r6, #24]
 800617c:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8006182:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 8006184:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4298      	cmp	r0, r3
 800618a:	d3ee      	bcc.n	800616a <UTIL_TIMER_Start+0x46>
        TimerInsertTimer( TimerObject);
 800618c:	0020      	movs	r0, r4
 800618e:	f7ff ffa5 	bl	80060dc <TimerInsertTimer>
 8006192:	e7ed      	b.n	8006170 <UTIL_TIMER_Start+0x4c>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8006194:	2501      	movs	r5, #1
 8006196:	e7ee      	b.n	8006176 <UTIL_TIMER_Start+0x52>
 8006198:	08006598 	.word	0x08006598
 800619c:	200009d8 	.word	0x200009d8

080061a0 <UTIL_TIMER_SetPeriod>:
{
 80061a0:	b510      	push	{r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 80061a2:	2301      	movs	r3, #1
{
 80061a4:	0004      	movs	r4, r0
 80061a6:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 80061a8:	2c00      	cmp	r4, #0
 80061aa:	d010      	beq.n	80061ce <UTIL_TIMER_SetPeriod+0x2e>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80061ac:	4b09      	ldr	r3, [pc, #36]	@ (80061d4 <UTIL_TIMER_SetPeriod+0x34>)
 80061ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b0:	4798      	blx	r3
 80061b2:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80061b4:	0020      	movs	r0, r4
 80061b6:	f7ff ff39 	bl	800602c <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80061ba:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 80061bc:	4298      	cmp	r0, r3
 80061be:	d006      	beq.n	80061ce <UTIL_TIMER_SetPeriod+0x2e>
      (void)UTIL_TIMER_Stop(TimerObject);
 80061c0:	0020      	movs	r0, r4
 80061c2:	f7ff ff5b 	bl	800607c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80061c6:	0020      	movs	r0, r4
 80061c8:	f7ff ffac 	bl	8006124 <UTIL_TIMER_Start>
 80061cc:	0003      	movs	r3, r0
}
 80061ce:	0018      	movs	r0, r3
 80061d0:	bd10      	pop	{r4, pc}
 80061d2:	46c0      	nop			@ (mov r8, r8)
 80061d4:	08006598 	.word	0x08006598

080061d8 <UTIL_TIMER_IRQ_Handler>:
{
 80061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061da:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80061de:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 80061e0:	4e1c      	ldr	r6, [pc, #112]	@ (8006254 <UTIL_TIMER_IRQ_Handler+0x7c>)
 80061e2:	6973      	ldr	r3, [r6, #20]
 80061e4:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 80061e6:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 80061e8:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 80061ea:	4798      	blx	r3
  if ( TimerListHead != NULL )
 80061ec:	4d1a      	ldr	r5, [pc, #104]	@ (8006258 <UTIL_TIMER_IRQ_Handler+0x80>)
  DeltaContext = now  - old; /*intentional wrap around */
 80061ee:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 80061f0:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 80061f2:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01e      	beq.n	8006236 <UTIL_TIMER_IRQ_Handler+0x5e>
      if (cur->Timestamp > DeltaContext)
 80061f8:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 80061fa:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 80061fc:	4288      	cmp	r0, r1
 80061fe:	d900      	bls.n	8006202 <UTIL_TIMER_IRQ_Handler+0x2a>
        cur->Timestamp -= DeltaContext;
 8006200:	1822      	adds	r2, r4, r0
 8006202:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8006204:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8006206:	e7f5      	b.n	80061f4 <UTIL_TIMER_IRQ_Handler+0x1c>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8006208:	681c      	ldr	r4, [r3, #0]
 800620a:	2c00      	cmp	r4, #0
 800620c:	d003      	beq.n	8006216 <UTIL_TIMER_IRQ_Handler+0x3e>
 800620e:	69b3      	ldr	r3, [r6, #24]
 8006210:	4798      	blx	r3
 8006212:	4284      	cmp	r4, r0
 8006214:	d212      	bcs.n	800623c <UTIL_TIMER_IRQ_Handler+0x64>
      cur = TimerListHead;
 8006216:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 8006218:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 800621a:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 800621c:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 8006222:	68e3      	ldr	r3, [r4, #12]
 8006224:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8006226:	2280      	movs	r2, #128	@ 0x80
 8006228:	8963      	ldrh	r3, [r4, #10]
 800622a:	0052      	lsls	r2, r2, #1
 800622c:	4293      	cmp	r3, r2
 800622e:	d102      	bne.n	8006236 <UTIL_TIMER_IRQ_Handler+0x5e>
        (void)UTIL_TIMER_Start(cur);
 8006230:	0020      	movs	r0, r4
 8006232:	f7ff ff77 	bl	8006124 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8006236:	682b      	ldr	r3, [r5, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e5      	bne.n	8006208 <UTIL_TIMER_IRQ_Handler+0x30>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800623c:	6828      	ldr	r0, [r5, #0]
 800623e:	2800      	cmp	r0, #0
 8006240:	d102      	bne.n	8006248 <UTIL_TIMER_IRQ_Handler+0x70>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006242:	f387 8810 	msr	PRIMASK, r7
}
 8006246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8006248:	7a03      	ldrb	r3, [r0, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f9      	bne.n	8006242 <UTIL_TIMER_IRQ_Handler+0x6a>
    TimerSetTimeout( TimerListHead );
 800624e:	f7ff fefb 	bl	8006048 <TimerSetTimeout>
 8006252:	e7f6      	b.n	8006242 <UTIL_TIMER_IRQ_Handler+0x6a>
 8006254:	08006598 	.word	0x08006598
 8006258:	200009d8 	.word	0x200009d8

0800625c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800625c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800625e:	b09d      	sub	sp, #116	@ 0x74
 8006260:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 8006262:	2000      	movs	r0, #0
{
 8006264:	9108      	str	r1, [sp, #32]
  if (size <= 0)
 8006266:	4281      	cmp	r1, r0
 8006268:	dd0a      	ble.n	8006280 <tiny_vsnprintf_like+0x24>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800626a:	9c02      	ldr	r4, [sp, #8]
 800626c:	9301      	str	r3, [sp, #4]
  {
    CHECK_STR_SIZE(buf, str, size);
 800626e:	9902      	ldr	r1, [sp, #8]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8006270:	7813      	ldrb	r3, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 8006272:	1a60      	subs	r0, r4, r1
 8006274:	9908      	ldr	r1, [sp, #32]
 8006276:	3901      	subs	r1, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8006278:	2b00      	cmp	r3, #0
 800627a:	d103      	bne.n	8006284 <tiny_vsnprintf_like+0x28>
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
 800627c:	2300      	movs	r3, #0
 800627e:	7023      	strb	r3, [r4, #0]
  return str - buf;
}
 8006280:	b01d      	add	sp, #116	@ 0x74
 8006282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 8006284:	4281      	cmp	r1, r0
 8006286:	ddf9      	ble.n	800627c <tiny_vsnprintf_like+0x20>
    if (*fmt != '%')
 8006288:	2b25      	cmp	r3, #37	@ 0x25
 800628a:	d005      	beq.n	8006298 <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 800628c:	7023      	strb	r3, [r4, #0]
      continue;
 800628e:	9200      	str	r2, [sp, #0]
      *str++ = *fmt;
 8006290:	3401      	adds	r4, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8006292:	9a00      	ldr	r2, [sp, #0]
 8006294:	3201      	adds	r2, #1
 8006296:	e7ea      	b.n	800626e <tiny_vsnprintf_like+0x12>
    fmt++;
 8006298:	1c53      	adds	r3, r2, #1
 800629a:	9300      	str	r3, [sp, #0]
    if (*fmt == '0')
 800629c:	7853      	ldrb	r3, [r2, #1]
 800629e:	2b30      	cmp	r3, #48	@ 0x30
 80062a0:	d025      	beq.n	80062ee <tiny_vsnprintf_like+0x92>
    if (is_digit(*fmt))
 80062a2:	3b30      	subs	r3, #48	@ 0x30
 80062a4:	2b09      	cmp	r3, #9
 80062a6:	d82c      	bhi.n	8006302 <tiny_vsnprintf_like+0xa6>
 80062a8:	2300      	movs	r3, #0
  int i = 0;
 80062aa:	2700      	movs	r7, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80062ac:	9a00      	ldr	r2, [sp, #0]
 80062ae:	7810      	ldrb	r0, [r2, #0]
 80062b0:	0002      	movs	r2, r0
 80062b2:	3a30      	subs	r2, #48	@ 0x30
 80062b4:	2a09      	cmp	r2, #9
 80062b6:	d91c      	bls.n	80062f2 <tiny_vsnprintf_like+0x96>
    switch (*fmt)
 80062b8:	9a00      	ldr	r2, [sp, #0]
 80062ba:	7812      	ldrb	r2, [r2, #0]
 80062bc:	2a69      	cmp	r2, #105	@ 0x69
 80062be:	d07d      	beq.n	80063bc <tiny_vsnprintf_like+0x160>
 80062c0:	d823      	bhi.n	800630a <tiny_vsnprintf_like+0xae>
 80062c2:	2a63      	cmp	r2, #99	@ 0x63
 80062c4:	d035      	beq.n	8006332 <tiny_vsnprintf_like+0xd6>
 80062c6:	2a64      	cmp	r2, #100	@ 0x64
 80062c8:	d078      	beq.n	80063bc <tiny_vsnprintf_like+0x160>
 80062ca:	2a58      	cmp	r2, #88	@ 0x58
 80062cc:	d072      	beq.n	80063b4 <tiny_vsnprintf_like+0x158>
        if (*fmt != '%') *str++ = '%';
 80062ce:	0020      	movs	r0, r4
 80062d0:	2a25      	cmp	r2, #37	@ 0x25
 80062d2:	d121      	bne.n	8006318 <tiny_vsnprintf_like+0xbc>
        if (*fmt)
 80062d4:	9a00      	ldr	r2, [sp, #0]
 80062d6:	7812      	ldrb	r2, [r2, #0]
 80062d8:	2a00      	cmp	r2, #0
 80062da:	d100      	bne.n	80062de <tiny_vsnprintf_like+0x82>
 80062dc:	e0a6      	b.n	800642c <tiny_vsnprintf_like+0x1d0>
          *str++ = *fmt;
 80062de:	7002      	strb	r2, [r0, #0]
        CHECK_STR_SIZE(buf, str, size);
 80062e0:	9a02      	ldr	r2, [sp, #8]
          *str++ = *fmt;
 80062e2:	1c44      	adds	r4, r0, #1
    base = 10;
 80062e4:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 80062e6:	1aa2      	subs	r2, r4, r2
 80062e8:	428a      	cmp	r2, r1
 80062ea:	da1e      	bge.n	800632a <tiny_vsnprintf_like+0xce>
 80062ec:	e7d1      	b.n	8006292 <tiny_vsnprintf_like+0x36>
      flags |= ZEROPAD;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e7db      	b.n	80062aa <tiny_vsnprintf_like+0x4e>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80062f2:	9a00      	ldr	r2, [sp, #0]
 80062f4:	3201      	adds	r2, #1
 80062f6:	9200      	str	r2, [sp, #0]
 80062f8:	220a      	movs	r2, #10
 80062fa:	4357      	muls	r7, r2
 80062fc:	183f      	adds	r7, r7, r0
 80062fe:	3f30      	subs	r7, #48	@ 0x30
 8006300:	e7d4      	b.n	80062ac <tiny_vsnprintf_like+0x50>
    field_width = -1;
 8006302:	2701      	movs	r7, #1
 8006304:	2300      	movs	r3, #0
 8006306:	427f      	negs	r7, r7
 8006308:	e7d6      	b.n	80062b8 <tiny_vsnprintf_like+0x5c>
    switch (*fmt)
 800630a:	2a75      	cmp	r2, #117	@ 0x75
 800630c:	d100      	bne.n	8006310 <tiny_vsnprintf_like+0xb4>
 800630e:	e092      	b.n	8006436 <tiny_vsnprintf_like+0x1da>
 8006310:	2a78      	cmp	r2, #120	@ 0x78
 8006312:	d051      	beq.n	80063b8 <tiny_vsnprintf_like+0x15c>
 8006314:	2a73      	cmp	r2, #115	@ 0x73
 8006316:	d026      	beq.n	8006366 <tiny_vsnprintf_like+0x10a>
        if (*fmt != '%') *str++ = '%';
 8006318:	2225      	movs	r2, #37	@ 0x25
 800631a:	7022      	strb	r2, [r4, #0]
        CHECK_STR_SIZE(buf, str, size);
 800631c:	9a02      	ldr	r2, [sp, #8]
        if (*fmt != '%') *str++ = '%';
 800631e:	1c60      	adds	r0, r4, #1
        CHECK_STR_SIZE(buf, str, size);
 8006320:	0004      	movs	r4, r0
    base = 10;
 8006322:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 8006324:	1a82      	subs	r2, r0, r2
 8006326:	428a      	cmp	r2, r1
 8006328:	dbd4      	blt.n	80062d4 <tiny_vsnprintf_like+0x78>
      num = va_arg(args, unsigned int);
 800632a:	9801      	ldr	r0, [sp, #4]
 800632c:	c804      	ldmia	r0!, {r2}
 800632e:	9001      	str	r0, [sp, #4]
 8006330:	e04a      	b.n	80063c8 <tiny_vsnprintf_like+0x16c>
 8006332:	0022      	movs	r2, r4
    switch (*fmt)
 8006334:	003b      	movs	r3, r7
          while (--field_width > 0) *str++ = ' ';
 8006336:	2120      	movs	r1, #32
 8006338:	3b01      	subs	r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	dc10      	bgt.n	8006360 <tiny_vsnprintf_like+0x104>
 800633e:	17f9      	asrs	r1, r7, #31
 8006340:	1bc9      	subs	r1, r1, r7
 8006342:	17cb      	asrs	r3, r1, #31
 8006344:	0fca      	lsrs	r2, r1, #31
 8006346:	1e79      	subs	r1, r7, #1
 8006348:	400b      	ands	r3, r1
 800634a:	18e3      	adds	r3, r4, r3
 800634c:	2101      	movs	r1, #1
 800634e:	2a00      	cmp	r2, #0
 8006350:	d000      	beq.n	8006354 <tiny_vsnprintf_like+0xf8>
 8006352:	0039      	movs	r1, r7
        *str++ = (unsigned char) va_arg(args, int);
 8006354:	9a01      	ldr	r2, [sp, #4]
 8006356:	1864      	adds	r4, r4, r1
 8006358:	ca02      	ldmia	r2!, {r1}
 800635a:	7019      	strb	r1, [r3, #0]
 800635c:	9201      	str	r2, [sp, #4]
        continue;
 800635e:	e798      	b.n	8006292 <tiny_vsnprintf_like+0x36>
          while (--field_width > 0) *str++ = ' ';
 8006360:	7011      	strb	r1, [r2, #0]
 8006362:	3201      	adds	r2, #1
 8006364:	e7e8      	b.n	8006338 <tiny_vsnprintf_like+0xdc>
        s = va_arg(args, char *);
 8006366:	9e01      	ldr	r6, [sp, #4]
 8006368:	ce20      	ldmia	r6!, {r5}
        if (!s) s = "<NULL>";
 800636a:	2d00      	cmp	r5, #0
 800636c:	d100      	bne.n	8006370 <tiny_vsnprintf_like+0x114>
 800636e:	4d52      	ldr	r5, [pc, #328]	@ (80064b8 <tiny_vsnprintf_like+0x25c>)
        len = strlen(s);
 8006370:	0028      	movs	r0, r5
 8006372:	f7f9 fec9 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 8006376:	2220      	movs	r2, #32
 8006378:	0023      	movs	r3, r4
 800637a:	4694      	mov	ip, r2
 800637c:	19e1      	adds	r1, r4, r7
 800637e:	1aca      	subs	r2, r1, r3
 8006380:	4290      	cmp	r0, r2
 8006382:	db0f      	blt.n	80063a4 <tiny_vsnprintf_like+0x148>
 8006384:	0fc2      	lsrs	r2, r0, #31
 8006386:	17fb      	asrs	r3, r7, #31
 8006388:	4287      	cmp	r7, r0
 800638a:	4153      	adcs	r3, r2
 800638c:	2200      	movs	r2, #0
 800638e:	b2db      	uxtb	r3, r3
 8006390:	4293      	cmp	r3, r2
 8006392:	d000      	beq.n	8006396 <tiny_vsnprintf_like+0x13a>
 8006394:	1a3a      	subs	r2, r7, r0
 8006396:	18a4      	adds	r4, r4, r2
        for (i = 0; i < len; ++i) *str++ = *s++;
 8006398:	2200      	movs	r2, #0
 800639a:	4282      	cmp	r2, r0
 800639c:	db06      	blt.n	80063ac <tiny_vsnprintf_like+0x150>
 800639e:	1824      	adds	r4, r4, r0
        s = va_arg(args, char *);
 80063a0:	9601      	str	r6, [sp, #4]
 80063a2:	e776      	b.n	8006292 <tiny_vsnprintf_like+0x36>
          while (len < field_width--) *str++ = ' ';
 80063a4:	4662      	mov	r2, ip
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	e7e8      	b.n	800637e <tiny_vsnprintf_like+0x122>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80063ac:	5ca9      	ldrb	r1, [r5, r2]
 80063ae:	54a1      	strb	r1, [r4, r2]
 80063b0:	3201      	adds	r2, #1
 80063b2:	e7f2      	b.n	800639a <tiny_vsnprintf_like+0x13e>
        flags |= UPPERCASE;
 80063b4:	2240      	movs	r2, #64	@ 0x40
 80063b6:	4313      	orrs	r3, r2
    switch (*fmt)
 80063b8:	2510      	movs	r5, #16
 80063ba:	e7b6      	b.n	800632a <tiny_vsnprintf_like+0xce>
        flags |= SIGN;
 80063bc:	2202      	movs	r2, #2
 80063be:	250a      	movs	r5, #10
      num = va_arg(args, int);
 80063c0:	9801      	ldr	r0, [sp, #4]
        flags |= SIGN;
 80063c2:	4313      	orrs	r3, r2
      num = va_arg(args, int);
 80063c4:	c804      	ldmia	r0!, {r2}
 80063c6:	9001      	str	r0, [sp, #4]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80063c8:	9802      	ldr	r0, [sp, #8]
 80063ca:	4694      	mov	ip, r2
 80063cc:	1a26      	subs	r6, r4, r0
 80063ce:	1b8e      	subs	r6, r1, r6
  if (type & UPPERCASE)  dig = upper_digits;
 80063d0:	493a      	ldr	r1, [pc, #232]	@ (80064bc <tiny_vsnprintf_like+0x260>)
 80063d2:	9107      	str	r1, [sp, #28]
 80063d4:	0659      	lsls	r1, r3, #25
 80063d6:	d401      	bmi.n	80063dc <tiny_vsnprintf_like+0x180>
  char *dig = lower_digits;
 80063d8:	4939      	ldr	r1, [pc, #228]	@ (80064c0 <tiny_vsnprintf_like+0x264>)
 80063da:	9107      	str	r1, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 80063dc:	2101      	movs	r1, #1
 80063de:	0018      	movs	r0, r3
 80063e0:	4008      	ands	r0, r1
 80063e2:	9009      	str	r0, [sp, #36]	@ 0x24
 80063e4:	2020      	movs	r0, #32
 80063e6:	9006      	str	r0, [sp, #24]
 80063e8:	420b      	tst	r3, r1
 80063ea:	d001      	beq.n	80063f0 <tiny_vsnprintf_like+0x194>
 80063ec:	312f      	adds	r1, #47	@ 0x2f
 80063ee:	9106      	str	r1, [sp, #24]
  if (type & SIGN)
 80063f0:	079b      	lsls	r3, r3, #30
 80063f2:	d522      	bpl.n	800643a <tiny_vsnprintf_like+0x1de>
    if (num < 0)
 80063f4:	2a00      	cmp	r2, #0
 80063f6:	da20      	bge.n	800643a <tiny_vsnprintf_like+0x1de>
      num = -num;
 80063f8:	4253      	negs	r3, r2
 80063fa:	469c      	mov	ip, r3
      size--;
 80063fc:	232d      	movs	r3, #45	@ 0x2d
 80063fe:	3f01      	subs	r7, #1
    while (num != 0)
 8006400:	9304      	str	r3, [sp, #16]
  if (base < 2 || base > 36) return 0;
 8006402:	2300      	movs	r3, #0
 8006404:	9303      	str	r3, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8006406:	4663      	mov	r3, ip
 8006408:	0029      	movs	r1, r5
 800640a:	0018      	movs	r0, r3
 800640c:	9305      	str	r3, [sp, #20]
 800640e:	f7f9 ff13 	bl	8000238 <__aeabi_uidivmod>
 8006412:	9a07      	ldr	r2, [sp, #28]
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	5c52      	ldrb	r2, [r2, r1]
 8006418:	a90b      	add	r1, sp, #44	@ 0x2c
 800641a:	54ca      	strb	r2, [r1, r3]
 800641c:	3301      	adds	r3, #1
 800641e:	9303      	str	r3, [sp, #12]
    while (num != 0)
 8006420:	9b05      	ldr	r3, [sp, #20]
      num = ((unsigned long) num) / (unsigned) base;
 8006422:	4684      	mov	ip, r0
    while (num != 0)
 8006424:	429d      	cmp	r5, r3
 8006426:	d9ee      	bls.n	8006406 <tiny_vsnprintf_like+0x1aa>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8006428:	9d03      	ldr	r5, [sp, #12]
 800642a:	e00d      	b.n	8006448 <tiny_vsnprintf_like+0x1ec>
          --fmt;
 800642c:	9b00      	ldr	r3, [sp, #0]
 800642e:	3b01      	subs	r3, #1
 8006430:	9300      	str	r3, [sp, #0]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8006432:	0004      	movs	r4, r0
 8006434:	e72d      	b.n	8006292 <tiny_vsnprintf_like+0x36>
    base = 10;
 8006436:	250a      	movs	r5, #10
 8006438:	e777      	b.n	800632a <tiny_vsnprintf_like+0xce>
  if (num == 0)
 800643a:	2a00      	cmp	r2, #0
 800643c:	d124      	bne.n	8006488 <tiny_vsnprintf_like+0x22c>
    tmp[i++] = '0';
 800643e:	2130      	movs	r1, #48	@ 0x30
 8006440:	2501      	movs	r5, #1
 8006442:	ab0b      	add	r3, sp, #44	@ 0x2c
 8006444:	7019      	strb	r1, [r3, #0]
 8006446:	9204      	str	r2, [sp, #16]
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8006448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644a:	0020      	movs	r0, r4
  size -= precision;
 800644c:	1b79      	subs	r1, r7, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800644e:	2b00      	cmp	r3, #0
 8006450:	d022      	beq.n	8006498 <tiny_vsnprintf_like+0x23c>
  if (sign) ASSIGN_STR(sign);
 8006452:	9b04      	ldr	r3, [sp, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d02d      	beq.n	80064b4 <tiny_vsnprintf_like+0x258>
 8006458:	232d      	movs	r3, #45	@ 0x2d
 800645a:	3e01      	subs	r6, #1
 800645c:	1c60      	adds	r0, r4, #1
 800645e:	7023      	strb	r3, [r4, #0]
 8006460:	2e00      	cmp	r6, #0
 8006462:	d0e6      	beq.n	8006432 <tiny_vsnprintf_like+0x1d6>
 8006464:	0002      	movs	r2, r0
 8006466:	0033      	movs	r3, r6
 8006468:	1b89      	subs	r1, r1, r6
 800646a:	18c8      	adds	r0, r1, r3
 800646c:	0014      	movs	r4, r2
  while (size-- > 0) ASSIGN_STR(c);
 800646e:	2800      	cmp	r0, #0
 8006470:	dc18      	bgt.n	80064a4 <tiny_vsnprintf_like+0x248>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8006472:	a90b      	add	r1, sp, #44	@ 0x2c
 8006474:	18d3      	adds	r3, r2, r3
 8006476:	0010      	movs	r0, r2
 8006478:	3d01      	subs	r5, #1
 800647a:	d3da      	bcc.n	8006432 <tiny_vsnprintf_like+0x1d6>
 800647c:	5c6c      	ldrb	r4, [r5, r1]
 800647e:	1c42      	adds	r2, r0, #1
 8006480:	7004      	strb	r4, [r0, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d1f7      	bne.n	8006476 <tiny_vsnprintf_like+0x21a>
 8006486:	e013      	b.n	80064b0 <tiny_vsnprintf_like+0x254>
 8006488:	2300      	movs	r3, #0
 800648a:	e7b9      	b.n	8006400 <tiny_vsnprintf_like+0x1a4>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800648c:	2320      	movs	r3, #32
 800648e:	3e01      	subs	r6, #1
 8006490:	3001      	adds	r0, #1
 8006492:	7023      	strb	r3, [r4, #0]
 8006494:	2e00      	cmp	r6, #0
 8006496:	d0cc      	beq.n	8006432 <tiny_vsnprintf_like+0x1d6>
 8006498:	000b      	movs	r3, r1
 800649a:	0004      	movs	r4, r0
 800649c:	3901      	subs	r1, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	dcf4      	bgt.n	800648c <tiny_vsnprintf_like+0x230>
 80064a2:	e7d6      	b.n	8006452 <tiny_vsnprintf_like+0x1f6>
  while (size-- > 0) ASSIGN_STR(c);
 80064a4:	9806      	ldr	r0, [sp, #24]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	3201      	adds	r2, #1
 80064aa:	7020      	strb	r0, [r4, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1dc      	bne.n	800646a <tiny_vsnprintf_like+0x20e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80064b0:	0010      	movs	r0, r2
 80064b2:	e7be      	b.n	8006432 <tiny_vsnprintf_like+0x1d6>
 80064b4:	0020      	movs	r0, r4
 80064b6:	e7d5      	b.n	8006464 <tiny_vsnprintf_like+0x208>
 80064b8:	08006a8b 	.word	0x08006a8b
 80064bc:	08006ab7 	.word	0x08006ab7
 80064c0:	08006a92 	.word	0x08006a92

080064c4 <memset>:
 80064c4:	0003      	movs	r3, r0
 80064c6:	1882      	adds	r2, r0, r2
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d100      	bne.n	80064ce <memset+0xa>
 80064cc:	4770      	bx	lr
 80064ce:	7019      	strb	r1, [r3, #0]
 80064d0:	3301      	adds	r3, #1
 80064d2:	e7f9      	b.n	80064c8 <memset+0x4>

080064d4 <strncmp>:
 80064d4:	b530      	push	{r4, r5, lr}
 80064d6:	0005      	movs	r5, r0
 80064d8:	1e10      	subs	r0, r2, #0
 80064da:	d00b      	beq.n	80064f4 <strncmp+0x20>
 80064dc:	2400      	movs	r4, #0
 80064de:	3a01      	subs	r2, #1
 80064e0:	5d2b      	ldrb	r3, [r5, r4]
 80064e2:	5d08      	ldrb	r0, [r1, r4]
 80064e4:	4283      	cmp	r3, r0
 80064e6:	d104      	bne.n	80064f2 <strncmp+0x1e>
 80064e8:	4294      	cmp	r4, r2
 80064ea:	d002      	beq.n	80064f2 <strncmp+0x1e>
 80064ec:	3401      	adds	r4, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1f6      	bne.n	80064e0 <strncmp+0xc>
 80064f2:	1a18      	subs	r0, r3, r0
 80064f4:	bd30      	pop	{r4, r5, pc}
	...

080064f8 <__libc_init_array>:
 80064f8:	b570      	push	{r4, r5, r6, lr}
 80064fa:	2600      	movs	r6, #0
 80064fc:	4c0c      	ldr	r4, [pc, #48]	@ (8006530 <__libc_init_array+0x38>)
 80064fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006534 <__libc_init_array+0x3c>)
 8006500:	1b64      	subs	r4, r4, r5
 8006502:	10a4      	asrs	r4, r4, #2
 8006504:	42a6      	cmp	r6, r4
 8006506:	d109      	bne.n	800651c <__libc_init_array+0x24>
 8006508:	2600      	movs	r6, #0
 800650a:	f000 f823 	bl	8006554 <_init>
 800650e:	4c0a      	ldr	r4, [pc, #40]	@ (8006538 <__libc_init_array+0x40>)
 8006510:	4d0a      	ldr	r5, [pc, #40]	@ (800653c <__libc_init_array+0x44>)
 8006512:	1b64      	subs	r4, r4, r5
 8006514:	10a4      	asrs	r4, r4, #2
 8006516:	42a6      	cmp	r6, r4
 8006518:	d105      	bne.n	8006526 <__libc_init_array+0x2e>
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	00b3      	lsls	r3, r6, #2
 800651e:	58eb      	ldr	r3, [r5, r3]
 8006520:	4798      	blx	r3
 8006522:	3601      	adds	r6, #1
 8006524:	e7ee      	b.n	8006504 <__libc_init_array+0xc>
 8006526:	00b3      	lsls	r3, r6, #2
 8006528:	58eb      	ldr	r3, [r5, r3]
 800652a:	4798      	blx	r3
 800652c:	3601      	adds	r6, #1
 800652e:	e7f2      	b.n	8006516 <__libc_init_array+0x1e>
 8006530:	08006ae8 	.word	0x08006ae8
 8006534:	08006ae8 	.word	0x08006ae8
 8006538:	08006aec 	.word	0x08006aec
 800653c:	08006ae8 	.word	0x08006ae8

08006540 <memcpy>:
 8006540:	2300      	movs	r3, #0
 8006542:	b510      	push	{r4, lr}
 8006544:	429a      	cmp	r2, r3
 8006546:	d100      	bne.n	800654a <memcpy+0xa>
 8006548:	bd10      	pop	{r4, pc}
 800654a:	5ccc      	ldrb	r4, [r1, r3]
 800654c:	54c4      	strb	r4, [r0, r3]
 800654e:	3301      	adds	r3, #1
 8006550:	e7f8      	b.n	8006544 <memcpy+0x4>
	...

08006554 <_init>:
 8006554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006556:	46c0      	nop			@ (mov r8, r8)
 8006558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655a:	bc08      	pop	{r3}
 800655c:	469e      	mov	lr, r3
 800655e:	4770      	bx	lr

08006560 <_fini>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	46c0      	nop			@ (mov r8, r8)
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr
